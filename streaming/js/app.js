'use strict';

var dataAppUrl = () => {
  {
    return {
      server: (pathname = "") => {
        return `https://api.vniox.com/streaming/${window.MyResourceClass.MyString.trim(
          pathname
        ).left("/")}`;
      },
      img: (url = "") =>
        `https://img.vniox.com/index.php?url=${encodeURIComponent(url)}`,
      fetch: (url = "") => url,
      rr: (path = "") => `https://app.victor01sp.com/rr` + path,
    };
  }
};

var svgIcon = () => {
  const template = document.createElement("div");

  template.innerHTML = [
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-sr-heart"><path d="M17.5,1.917a6.4,6.4,0,0,0-5.5,3.3,6.4,6.4,0,0,0-5.5-3.3A6.8,6.8,0,0,0,0,8.967c0,4.547,4.786,9.513,8.8,12.88a4.974,4.974,0,0,0,6.4,0C19.214,18.48,24,13.514,24,8.967A6.8,6.8,0,0,0,17.5,1.917Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-heart"><path d="M17.5,1.917a6.4,6.4,0,0,0-5.5,3.3,6.4,6.4,0,0,0-5.5-3.3A6.8,6.8,0,0,0,0,8.967c0,4.547,4.786,9.513,8.8,12.88a4.974,4.974,0,0,0,6.4,0C19.214,18.48,24,13.514,24,8.967A6.8,6.8,0,0,0,17.5,1.917Zm-3.585,18.4a2.973,2.973,0,0,1-3.83,0C4.947,16.006,2,11.87,2,8.967a4.8,4.8,0,0,1,4.5-5.05A4.8,4.8,0,0,1,11,8.967a1,1,0,0,0,2,0,4.8,4.8,0,0,1,4.5-5.05A4.8,4.8,0,0,1,22,8.967C22,11.87,19.053,16.006,13.915,20.313Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-trash-restore-alt"><path d="m21,4h-3.101c-.465-2.279-2.485-4-4.899-4h-2c-2.414,0-4.435,1.721-4.899,4h-3.101c-.552,0-1,.448-1,1s.448,1,1,1h1v13c0,2.757,2.243,5,5,5h6c2.757,0,5-2.243,5-5V6h1c.552,0,1-.448,1-1s-.448-1-1-1Zm-10-2h2c1.304,0,2.415.836,2.828,2h-7.656c.413-1.164,1.524-2,2.828-2Zm7,17c0,1.654-1.346,3-3,3h-6c-1.654,0-3-1.346-3-3V6h12v13Zm-2.293-6.519c.391.391.391,1.023,0,1.414-.195.195-.451.293-.707.293s-.512-.098-.707-.293l-1.293-1.293v4.398c0,.552-.448,1-1,1s-1-.448-1-1v-4.398l-1.293,1.293c-.391.391-1.023.391-1.414,0s-.391-1.023,0-1.414l1.614-1.614c1.154-1.154,3.032-1.154,4.187,0l1.614,1.614Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-prescription-bottle-pill"><path d="m9,22h-2c-1.654,0-3-1.346-3-3h3c.553,0,1-.447,1-1s-.447-1-1-1h-3v-2h3c.553,0,1-.447,1-1s-.447-1-1-1h-3v-2h3c.553,0,1-.447,1-1s-.447-1-1-1h-3v-3h14v1c0,.553.447,1,1,1s1-.447,1-1v-1.172c1.164-.413,2-1.524,2-2.828,0-1.654-1.346-3-3-3H3C1.346,0,0,1.346,0,3c0,1.304.836,2.415,2,2.828v13.172c0,2.757,2.243,5,5,5h2c.553,0,1-.447,1-1s-.447-1-1-1ZM3,2h16c.552,0,1,.448,1,1s-.448,1-1,1H3c-.552,0-1-.448-1-1s.448-1,1-1Zm14,8c-3.859,0-7,3.141-7,7s3.141,7,7,7,7-3.141,7-7-3.141-7-7-7Zm0,2c1.018,0,1.965.306,2.756.83l-6.926,6.926c-.524-.791-.83-1.738-.83-2.756,0-2.757,2.243-5,5-5Zm0,10c-1.018,0-1.965-.306-2.756-.83l6.926-6.926c.524.791.83,1.738.83,2.756,0,2.757-2.243,5-5,5Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-ban"><path d="M12,0A12,12,0,1,0,24,12,12.013,12.013,0,0,0,12,0Zm0,2a9.949,9.949,0,0,1,6.324,2.262L4.262,18.324A9.992,9.992,0,0,1,12,2Zm0,20a9.949,9.949,0,0,1-6.324-2.262L19.738,5.676A9.992,9.992,0,0,1,12,22Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-calendar-clock"><path d="M17,10.039c-3.859,0-7,3.14-7,7,0,3.838,3.141,6.961,7,6.961s7-3.14,7-7c0-3.838-3.141-6.961-7-6.961Zm0,11.961c-2.757,0-5-2.226-5-4.961,0-2.757,2.243-5,5-5s5,2.226,5,4.961c0,2.757-2.243,5-5,5Zm1.707-4.707c.391,.391,.391,1.023,0,1.414-.195,.195-.451,.293-.707,.293s-.512-.098-.707-.293l-1-1c-.188-.188-.293-.442-.293-.707v-2c0-.552,.447-1,1-1s1,.448,1,1v1.586l.707,.707Zm5.293-10.293v2c0,.552-.447,1-1,1s-1-.448-1-1v-2c0-1.654-1.346-3-3-3H5c-1.654,0-3,1.346-3,3v1H11c.552,0,1,.448,1,1s-.448,1-1,1H2v9c0,1.654,1.346,3,3,3h4c.552,0,1,.448,1,1s-.448,1-1,1H5c-2.757,0-5-2.243-5-5V7C0,4.243,2.243,2,5,2h1V1c0-.552,.448-1,1-1s1,.448,1,1v1h8V1c0-.552,.447-1,1-1s1,.448,1,1v1h1c2.757,0,5,2.243,5,5Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-house-blank"><path d="M19,24H5c-2.757,0-5-2.243-5-5V9.724c0-1.665,.824-3.215,2.204-4.145L9.203,.855c1.699-1.146,3.895-1.146,5.594,0l7,4.724c1.379,.93,2.203,2.479,2.203,4.145v9.276c0,2.757-2.243,5-5,5ZM12,1.997c-.584,0-1.168,.172-1.678,.517L3.322,7.237c-.828,.558-1.322,1.487-1.322,2.486v9.276c0,1.654,1.346,3,3,3h14c1.654,0,3-1.346,3-3V9.724c0-.999-.494-1.929-1.321-2.486L13.678,2.514c-.51-.345-1.094-.517-1.678-.517Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-apps"><path d="M7,0H4A4,4,0,0,0,0,4V7a4,4,0,0,0,4,4H7a4,4,0,0,0,4-4V4A4,4,0,0,0,7,0ZM9,7A2,2,0,0,1,7,9H4A2,2,0,0,1,2,7V4A2,2,0,0,1,4,2H7A2,2,0,0,1,9,4Z"></path><path d="M20,0H17a4,4,0,0,0-4,4V7a4,4,0,0,0,4,4h3a4,4,0,0,0,4-4V4A4,4,0,0,0,20,0Zm2,7a2,2,0,0,1-2,2H17a2,2,0,0,1-2-2V4a2,2,0,0,1,2-2h3a2,2,0,0,1,2,2Z"></path><path d="M7,13H4a4,4,0,0,0-4,4v3a4,4,0,0,0,4,4H7a4,4,0,0,0,4-4V17A4,4,0,0,0,7,13Zm2,7a2,2,0,0,1-2,2H4a2,2,0,0,1-2-2V17a2,2,0,0,1,2-2H7a2,2,0,0,1,2,2Z"></path><path d="M20,13H17a4,4,0,0,0-4,4v3a4,4,0,0,0,4,4h3a4,4,0,0,0,4-4V17A4,4,0,0,0,20,13Zm2,7a2,2,0,0,1-2,2H17a2,2,0,0,1-2-2V17a2,2,0,0,1,2-2h3a2,2,0,0,1,2,2Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-receipt"><path d="M16,0H8A5.006,5.006,0,0,0,3,5V23a1,1,0,0,0,1.564.825L6.67,22.386l2.106,1.439a1,1,0,0,0,1.13,0l2.1-1.439,2.1,1.439a1,1,0,0,0,1.131,0l2.1-1.438,2.1,1.437A1,1,0,0,0,21,23V5A5.006,5.006,0,0,0,16,0Zm3,21.1-1.1-.752a1,1,0,0,0-1.132,0l-2.1,1.439-2.1-1.439a1,1,0,0,0-1.131,0l-2.1,1.439-2.1-1.439a1,1,0,0,0-1.129,0L5,21.1V5A3,3,0,0,1,8,2h8a3,3,0,0,1,3,3Z"></path><rect x="7" y="8" width="10" height="2" rx="1"></rect><rect x="7" y="12" width="8" height="2" rx="1"></rect></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-print"><path d="M19,6V4a4,4,0,0,0-4-4H9A4,4,0,0,0,5,4V6a5.006,5.006,0,0,0-5,5v5a5.006,5.006,0,0,0,5,5,3,3,0,0,0,3,3h8a3,3,0,0,0,3-3,5.006,5.006,0,0,0,5-5V11A5.006,5.006,0,0,0,19,6ZM7,4A2,2,0,0,1,9,2h6a2,2,0,0,1,2,2V6H7ZM17,21a1,1,0,0,1-1,1H8a1,1,0,0,1-1-1V17a1,1,0,0,1,1-1h8a1,1,0,0,1,1,1Zm5-5a3,3,0,0,1-3,3V17a3,3,0,0,0-3-3H8a3,3,0,0,0-3,3v2a3,3,0,0,1-3-3V11A3,3,0,0,1,5,8H19a3,3,0,0,1,3,3Z"></path><path d="M18,10H16a1,1,0,0,0,0,2h2a1,1,0,0,0,0-2Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-user"><path d="M12,12A6,6,0,1,0,6,6,6.006,6.006,0,0,0,12,12ZM12,2A4,4,0,1,1,8,6,4,4,0,0,1,12,2Z"></path><path d="M12,14a9.01,9.01,0,0,0-9,9,1,1,0,0,0,2,0,7,7,0,0,1,14,0,1,1,0,0,0,2,0A9.01,9.01,0,0,0,12,14Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-letter-case"><path d="M7.4,5.553a1.041,1.041,0,0,0-1.789,0l-5.5,11a1,1,0,1,0,1.789.894L3.619,14H9.383l1.724,3.447a1,1,0,1,0,1.789-.894ZM4.619,12,6.5,8.236,8.383,12Z"></path><path d="M23,8a1,1,0,0,0-1,1v.026A4.948,4.948,0,0,0,19,8a5,5,0,0,0,0,10,4.948,4.948,0,0,0,3-1.026V17a1,1,0,0,0,2,0V9A1,1,0,0,0,23,8Zm-4,8a3,3,0,1,1,3-3A3,3,0,0,1,19,16Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-palette"><path d="M17.115,8.05A1.5,1.5,0,1,0,18.95,9.115,1.5,1.5,0,0,0,17.115,8.05Z"></path><path d="M12.115,5.05A1.5,1.5,0,1,0,13.95,6.115,1.5,1.5,0,0,0,12.115,5.05Z"></path><path d="M7.115,8.05A1.5,1.5,0,1,0,8.95,9.115,1.5,1.5,0,0,0,7.115,8.05Z"></path><path d="M7.115,14.05A1.5,1.5,0,1,0,8.95,15.115,1.5,1.5,0,0,0,7.115,14.05Z"></path><path d="M12.5.007A12,12,0,0,0,.083,12a12.014,12.014,0,0,0,12,12c.338,0,.67-.022,1-.05a1,1,0,0,0,.916-1l-.032-3.588A3.567,3.567,0,0,1,20.057,16.8l.1.1a1.912,1.912,0,0,0,1.769.521,1.888,1.888,0,0,0,1.377-1.177A11.924,11.924,0,0,0,24.08,11.7,12.155,12.155,0,0,0,12.5.007Zm8.982,15.4-.014-.014a5.567,5.567,0,0,0-9.5,3.985L11.992,22a10,10,0,0,1,.09-20c.117,0,.235,0,.353.006a10.127,10.127,0,0,1,9.645,9.743A9.892,9.892,0,0,1,21.485,15.4Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-exit"><path d="M22.829,9.172,18.95,5.293a1,1,0,0,0-1.414,1.414l3.879,3.879a2.057,2.057,0,0,1,.3.39c-.015,0-.027-.008-.042-.008h0L5.989,11a1,1,0,0,0,0,2h0l15.678-.032c.028,0,.051-.014.078-.016a2,2,0,0,1-.334.462l-3.879,3.879a1,1,0,1,0,1.414,1.414l3.879-3.879a4,4,0,0,0,0-5.656Z"></path><path d="M7,22H5a3,3,0,0,1-3-3V5A3,3,0,0,1,5,2H7A1,1,0,0,0,7,0H5A5.006,5.006,0,0,0,0,5V19a5.006,5.006,0,0,0,5,5H7a1,1,0,0,0,0-2Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-angle-left"><path d="M17.17,24a1,1,0,0,1-.71-.29L8.29,15.54a5,5,0,0,1,0-7.08L16.46.29a1,1,0,1,1,1.42,1.42L9.71,9.88a3,3,0,0,0,0,4.24l8.17,8.17a1,1,0,0,1,0,1.42A1,1,0,0,1,17.17,24Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-arrow-right"><path d="M23.12,9.91,19.25,6a1,1,0,0,0-1.42,0h0a1,1,0,0,0,0,1.41L21.39,11H1a1,1,0,0,0-1,1H0a1,1,0,0,0,1,1H21.45l-3.62,3.61a1,1,0,0,0,0,1.42h0a1,1,0,0,0,1.42,0l3.87-3.88A3,3,0,0,0,23.12,9.91Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-user-key"><path d="m20.061,12.939c.586.586.586,1.536,0,2.121-.586.586-1.536.586-2.121,0-.586-.586-.586-1.536,0-2.121s1.536-.586,2.121,0Zm2.328,5.449c-1.169,1.17-2.794,1.734-4.413,1.585l-3.133,3.133c-.559.559-1.331.879-2.121.879h-1.714c-1.096,0-1.992-.893-1.997-1.99l-.009-1.988c-.002-.401.153-.779.437-1.064s.661-.442,1.063-.442h.49l.004-.512c.006-.82.679-1.488,1.5-1.488h.762v-.393c-.71-2.311.136-4.764,2.138-6.15,1.805-1.251,4.244-1.286,6.071-.093,1.419.927,2.331,2.409,2.503,4.066.173,1.656-.404,3.282-1.581,4.459Zm-.408-4.253c-.11-1.07-.682-1.993-1.607-2.597-1.154-.754-2.696-.728-3.839.062-1.307.906-1.842,2.524-1.33,4.027.036.104.054.213.054.322v1.55c0,.553-.447,1-1,1h-1.265l-.007,1.008c-.004.549-.451.992-1,.992h-.98l.006,1.485h1.711c.263,0,.52-.106.707-.293l3.487-3.487c.236-.235.575-.342.901-.273,1.151.228,2.331-.13,3.157-.957.749-.749,1.115-1.784,1.006-2.839ZM2,6C2,2.691,4.691,0,8,0s6,2.691,6,6-2.691,6-6,6-6-2.691-6-6Zm2,0c0,2.206,1.794,4,4,4s4-1.794,4-4-1.794-4-4-4-4,1.794-4,4Zm5.99,9.213c.079-.546-.301-1.053-.848-1.132-.376-.054-.761-.081-1.142-.081C3.589,14,0,17.589,0,22v1c0,.553.448,1,1,1s1-.447,1-1v-1c0-3.309,2.691-6,6-6,.287,0,.575.021.858.062.544.073,1.054-.302,1.132-.849Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-users-alt"><path d="M12,16a4,4,0,1,1,4-4A4,4,0,0,1,12,16Zm0-6a2,2,0,1,0,2,2A2,2,0,0,0,12,10Zm6,13A6,6,0,0,0,6,23a1,1,0,0,0,2,0,4,4,0,0,1,8,0,1,1,0,0,0,2,0ZM18,8a4,4,0,1,1,4-4A4,4,0,0,1,18,8Zm0-6a2,2,0,1,0,2,2A2,2,0,0,0,18,2Zm6,13a6.006,6.006,0,0,0-6-6,1,1,0,0,0,0,2,4,4,0,0,1,4,4,1,1,0,0,0,2,0ZM6,8a4,4,0,1,1,4-4A4,4,0,0,1,6,8ZM6,2A2,2,0,1,0,8,4,2,2,0,0,0,6,2ZM2,15a4,4,0,0,1,4-4A1,1,0,0,0,6,9a6.006,6.006,0,0,0-6,6,1,1,0,0,0,2,0Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-filter"><path d="m14 24a1 1 0 0 1 -.6-.2l-4-3a1 1 0 0 1 -.4-.8v-5.62l-7.016-7.893a3.9 3.9 0 0 1 2.916-6.487h14.2a3.9 3.9 0 0 1 2.913 6.488l-7.013 7.892v8.62a1 1 0 0 1 -1 1zm-3-4.5 2 1.5v-7a1 1 0 0 1 .253-.664l7.268-8.177a1.9 1.9 0 0 0 -1.421-3.159h-14.2a1.9 1.9 0 0 0 -1.421 3.158l7.269 8.178a1 1 0 0 1 .252.664z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-cross"><path d="M23.707.293h0a1,1,0,0,0-1.414,0L12,10.586,1.707.293a1,1,0,0,0-1.414,0h0a1,1,0,0,0,0,1.414L10.586,12,.293,22.293a1,1,0,0,0,0,1.414h0a1,1,0,0,0,1.414,0L12,13.414,22.293,23.707a1,1,0,0,0,1.414,0h0a1,1,0,0,0,0-1.414L13.414,12,23.707,1.707A1,1,0,0,0,23.707.293Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-calendar-lines-pen"><path d="M19,2h-1V1c0-.552-.448-1-1-1s-1,.448-1,1v1H8V1c0-.552-.448-1-1-1s-1,.448-1,1v1h-1C2.243,2,0,4.243,0,7v12c0,2.757,2.243,5,5,5h4c.552,0,1-.448,1-1s-.448-1-1-1H5c-1.654,0-3-1.346-3-3V10H23c.552,0,1-.448,1-1v-2c0-2.757-2.243-5-5-5Zm3,6H2v-1c0-1.654,1.346-3,3-3h14c1.654,0,3,1.346,3,3v1Zm-3.121,4.879l-5.707,5.707c-.755,.755-1.172,1.76-1.172,2.829v1.586c0,.552,.448,1,1,1h1.586c1.069,0,2.073-.417,2.828-1.172l5.707-5.707c.567-.567,.879-1.32,.879-2.122s-.312-1.555-.878-2.121c-1.134-1.134-3.11-1.134-4.243,0Zm2.828,2.828l-5.708,5.707c-.377,.378-.879,.586-1.414,.586h-.586v-.586c0-.534,.208-1.036,.586-1.414l5.708-5.707c.377-.378,1.036-.378,1.414,0,.189,.188,.293,.439,.293,.707s-.104,.518-.293,.707Zm-16.707-1.707c0-.552,.448-1,1-1h7c.552,0,1,.448,1,1s-.448,1-1,1H6c-.552,0-1-.448-1-1Zm6,4c0,.552-.448,1-1,1H6c-.552,0-1-.448-1-1s.448-1,1-1h4c.552,0,1,.448,1,1Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-menu-dots"><circle cx="2" cy="12" r="2"></circle><circle cx="12" cy="12" r="2"></circle><circle cx="22" cy="12" r="2"></circle></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-vote-nay"><path d="M20,12V7c0-2.76-2.24-5-5-5h-6c-2.76,0-5,2.24-5,5v5c-2.21,0-4,1.79-4,4v2c0,2.21,1.79,4,4,4H20c2.21,0,4-1.79,4-4v-2c0-2.21-1.79-4-4-4ZM6,7c0-1.65,1.35-3,3-3h6c1.65,0,3,1.35,3,3v9H6V7Zm16,11c0,1.1-.9,2-2,2H4c-1.1,0-2-.9-2-2v-2c0-1.1,.9-2,2-2v3c0,.55,.45,1,1,1h14c.55,0,1-.45,1-1v-3c1.1,0,2,.9,2,2v2Zm-12.71-6.71l1.29-1.29-1.29-1.29c-.39-.39-.39-1.02,0-1.41s1.02-.39,1.41,0l1.29,1.29,1.29-1.29c.39-.39,1.02-.39,1.41,0s.39,1.02,0,1.41l-1.29,1.29,1.29,1.29c.39,.39,.39,1.02,0,1.41-.2,.2-.45,.29-.71,.29s-.51-.1-.71-.29l-1.29-1.29-1.29,1.29c-.2,.2-.45,.29-.71,.29s-.51-.1-.71-.29c-.39-.39-.39-1.02,0-1.41Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-badge-percent"><path d="M12,24c-1.626,0-3.16-.714-4.208-1.959-1.54,.177-3.127-.406-4.277-1.555-1.149-1.15-1.729-2.74-1.59-4.362-1.211-.964-1.925-2.498-1.925-4.124s.714-3.16,1.96-4.208c-.175-1.537,.405-3.127,1.555-4.277,1.15-1.151,2.737-1.73,4.361-1.59,.964-1.21,2.498-1.925,4.124-1.925s3.16,.714,4.208,1.959c1.542-.176,3.127,.406,4.277,1.555,1.149,1.15,1.729,2.74,1.59,4.362,1.211,.964,1.925,2.498,1.925,4.124s-.714,3.16-1.96,4.208c.175,1.537-.405,3.127-1.555,4.277-1.151,1.15-2.741,1.729-4.361,1.59-.964,1.21-2.498,1.925-4.124,1.925Zm-4.127-3.924c.561,0,1.081,.241,1.448,.676,.668,.793,1.644,1.248,2.679,1.248s2.011-.455,2.679-1.248c.403-.479,.99-.721,1.616-.67,1.034,.087,2.044-.28,2.776-1.012,.731-.731,1.1-1.743,1.012-2.776-.054-.624,.19-1.213,.67-1.617,.792-.667,1.247-1.644,1.247-2.678s-.455-2.011-1.247-2.678c-.479-.403-.724-.993-.67-1.617,.088-1.033-.28-2.045-1.012-2.776s-1.748-1.096-2.775-1.012c-.626,.057-1.214-.191-1.617-.669-.668-.793-1.644-1.248-2.679-1.248s-2.011,.455-2.679,1.248c-.404,.479-.993,.719-1.616,.67-1.039-.09-2.044,.28-2.776,1.012-.731,.731-1.1,1.743-1.012,2.776,.054,.624-.19,1.213-.67,1.617-.792,.667-1.247,1.644-1.247,2.678s.455,2.011,1.247,2.678c.479,.403,.724,.993,.67,1.617-.088,1.033,.28,2.045,1.012,2.776,.732,.732,1.753,1.098,2.775,1.012,.057-.005,.113-.007,.169-.007Zm1.127-12.076c-.552,0-1,.448-1,1s.448,1,1,1,1-.448,1-1-.448-1-1-1Zm6,6c-.552,0-1,.448-1,1s.448,1,1,1,1-.448,1-1-.448-1-1-1Zm-4.168,1.555l4-6c.307-.459,.183-1.081-.277-1.387-.461-.308-1.081-.182-1.387,.277l-4,6c-.307,.459-.183,1.081,.277,1.387,.171,.114,.363,.168,.554,.168,.323,0,.641-.156,.833-.445Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-plus"><path d="M23,11H13V1a1,1,0,0,0-1-1h0a1,1,0,0,0-1,1V11H1a1,1,0,0,0-1,1H0a1,1,0,0,0,1,1H11V23a1,1,0,0,0,1,1h0a1,1,0,0,0,1-1V13H23a1,1,0,0,0,1-1h0A1,1,0,0,0,23,11Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-angle-small-left"><path d="M10.6,12.71a1,1,0,0,1,0-1.42l4.59-4.58a1,1,0,0,0,0-1.42,1,1,0,0,0-1.41,0L9.19,9.88a3,3,0,0,0,0,4.24l4.59,4.59a1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.42Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-tags"><path d="M7.707,9.256c.391,.391,.391,1.024,0,1.414-.391,.391-1.024,.391-1.414,0-.391-.391-.391-1.024,0-1.414,.391-.391,1.024-.391,1.414,0Zm13.852,6.085l-.565,.565c-.027,1.233-.505,2.457-1.435,3.399l-3.167,3.208c-.943,.955-2.201,1.483-3.543,1.487h-.017c-1.335,0-2.59-.52-3.534-1.464L1.882,15.183c-.65-.649-.964-1.542-.864-2.453l.765-6.916c.051-.456,.404-.819,.858-.881l6.889-.942c.932-.124,1.87,.193,2.528,.851l7.475,7.412c.387,.387,.697,.823,.931,1.288,.812-1.166,.698-2.795-.342-3.835L12.531,2.302c-.229-.229-.545-.335-.851-.292l-6.889,.942c-.549,.074-1.052-.309-1.127-.855-.074-.547,.309-1.051,.855-1.126L11.409,.028c.921-.131,1.869,.191,2.528,.852l7.589,7.405c1.946,1.945,1.957,5.107,.032,7.057Zm-3.438-1.67l-7.475-7.412c-.223-.223-.536-.326-.847-.287l-6.115,.837-.679,6.14c-.033,.303,.071,.601,.287,.816l7.416,7.353c.569,.57,1.322,.881,2.123,.881h.01c.806-.002,1.561-.319,2.126-.893l3.167-3.208c1.155-1.17,1.149-3.067-.014-4.229Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-add-image"><path d="m12,21c0,.553-.448,1-1,1h-6c-2.757,0-5-2.243-5-5V5C0,2.243,2.243,0,5,0h12c2.757,0,5,2.243,5,5v6c0,.553-.448,1-1,1s-1-.447-1-1v-6c0-1.654-1.346-3-3-3H5c-1.654,0-3,1.346-3,3v6.959l2.808-2.808c1.532-1.533,4.025-1.533,5.558,0l5.341,5.341c.391.391.391,1.023,0,1.414-.195.195-.451.293-.707.293s-.512-.098-.707-.293l-5.341-5.341c-.752-.751-1.976-.752-2.73,0l-4.222,4.222v2.213c0,1.654,1.346,3,3,3h6c.552,0,1,.447,1,1ZM15,3.5c1.654,0,3,1.346,3,3s-1.346,3-3,3-3-1.346-3-3,1.346-3,3-3Zm0,2c-.551,0-1,.448-1,1s.449,1,1,1,1-.448,1-1-.449-1-1-1Zm8,12.5h-3v-3c0-.553-.448-1-1-1s-1,.447-1,1v3h-3c-.552,0-1,.447-1,1s.448,1,1,1h3v3c0,.553.448,1,1,1s1-.447,1-1v-3h3c.552,0,1-.447,1-1s-.448-1-1-1Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-trash"><path d="M21,4H17.9A5.009,5.009,0,0,0,13,0H11A5.009,5.009,0,0,0,6.1,4H3A1,1,0,0,0,3,6H4V19a5.006,5.006,0,0,0,5,5h6a5.006,5.006,0,0,0,5-5V6h1a1,1,0,0,0,0-2ZM11,2h2a3.006,3.006,0,0,1,2.829,2H8.171A3.006,3.006,0,0,1,11,2Zm7,17a3,3,0,0,1-3,3H9a3,3,0,0,1-3-3V6H18Z"></path><path d="M10,18a1,1,0,0,0,1-1V11a1,1,0,0,0-2,0v6A1,1,0,0,0,10,18Z"></path><path d="M14,18a1,1,0,0,0,1-1V11a1,1,0,0,0-2,0v6A1,1,0,0,0,14,18Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-refresh"><path d="M12,2a10.032,10.032,0,0,1,7.122,3H16a1,1,0,0,0-1,1h0a1,1,0,0,0,1,1h4.143A1.858,1.858,0,0,0,22,5.143V1a1,1,0,0,0-1-1h0a1,1,0,0,0-1,1V3.078A11.981,11.981,0,0,0,.05,10.9a1.007,1.007,0,0,0,1,1.1h0a.982.982,0,0,0,.989-.878A10.014,10.014,0,0,1,12,2Z"></path><path d="M22.951,12a.982.982,0,0,0-.989.878A9.986,9.986,0,0,1,4.878,19H8a1,1,0,0,0,1-1H9a1,1,0,0,0-1-1H3.857A1.856,1.856,0,0,0,2,18.857V23a1,1,0,0,0,1,1H3a1,1,0,0,0,1-1V20.922A11.981,11.981,0,0,0,23.95,13.1a1.007,1.007,0,0,0-1-1.1Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-basket-shopping-simple"><path d="M23.27,9.03c-.57-.66-1.4-1.03-2.27-1.03h-.09C20.41,3.51,16.59,0,11.97,0S3.52,3.51,3.02,8h-.05c-.87,0-1.7,.38-2.27,1.03C.13,9.69-.12,10.56,0,11.42l1.06,7.42c.42,2.94,2.97,5.15,5.94,5.15h9.97c2.97,0,5.52-2.21,5.94-5.15l1.06-7.42c.12-.86-.13-1.73-.7-2.39ZM11.97,2c3.52,0,6.44,2.61,6.93,6H5.04c.49-3.39,3.41-6,6.93-6Zm10.02,9.14l-1.06,7.42c-.28,1.96-1.98,3.43-3.96,3.43H7c-1.98,0-3.68-1.48-3.96-3.43l-1.06-7.42c-.04-.29,.04-.57,.23-.8,.19-.22,.46-.35,.76-.35H21c.29,0,.56,.12,.75,.34,.19,.22,.28,.51,.23,.8Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-point-of-sale-bill"><path d="m11,10v1c0,.552-.448,1-1,1h-5c-.552,0-1-.448-1-1v-1c0-.552.448-1,1-1h5c.552,0,1,.448,1,1Zm13-3.5v10.5c0,.357-.19.688-.5.866-.309.178-.69.178-.999,0l-2.17-1.25-1.767,1.209c-.172.118-.369.175-.563.175-.319,0-.633-.152-.826-.436-.312-.455-.195-1.077.261-1.39l2.285-1.564c.315-.217.731-.234,1.063-.041l1.216.7V6.5c0-2.481-2.019-4.5-4.5-4.5-2.249,0-4.097,1.624-4.431,3.815,1.164.814,1.931,2.16,1.931,3.685v10c0,2.481-2.019,4.5-4.5,4.5h-6c-2.481,0-4.5-2.019-4.5-4.5v-10c0-1.557.795-2.93,2-3.738v-.762C2,2.243,4.243,0,7,0h10.5c3.584,0,6.5,2.916,6.5,6.5Zm-11,3c0-1.379-1.121-2.5-2.5-2.5h-6c-1.379,0-2.5,1.121-2.5,2.5v10c0,1.379,1.121,2.5,2.5,2.5h6c1.379,0,2.5-1.121,2.5-2.5v-10Zm-1.836-4.433c.263-1.183.837-2.233,1.635-3.067h-5.799c-1.654,0-3,1.346-3,3v.051c.166-.019.329-.051.5-.051h6c.227,0,.446.034.664.067Zm-1.164,8.933h-1c-.553,0-1,.447-1,1s.447,1,1,1h1c.553,0,1-.447,1-1s-.447-1-1-1Zm0,4h-1c-.553,0-1,.447-1,1s.447,1,1,1h1c.553,0,1-.447,1-1s-.447-1-1-1Zm-4-4h-1c-.553,0-1,.447-1,1s.447,1,1,1h1c.553,0,1-.447,1-1s-.447-1-1-1Zm0,4h-1c-.553,0-1,.447-1,1s.447,1,1,1h1c.553,0,1-.447,1-1s-.447-1-1-1Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-minus-small"><rect x="6" y="11" width="12" height="2" rx="1"></rect></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-plus-small"><path d="M17,11H13V7a1,1,0,0,0-1-1h0a1,1,0,0,0-1,1v4H7a1,1,0,0,0-1,1H6a1,1,0,0,0,1,1h4v4a1,1,0,0,0,1,1h0a1,1,0,0,0,1-1V13h4a1,1,0,0,0,1-1h0A1,1,0,0,0,17,11Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-search"><path d="M23.707,22.293l-5.969-5.969a10.016,10.016,0,1,0-1.414,1.414l5.969,5.969a1,1,0,0,0,1.414-1.414ZM10,18a8,8,0,1,1,8-8A8.009,8.009,0,0,1,10,18Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-menu-dots-vertical"><circle cx="12" cy="2" r="2"></circle><circle cx="12" cy="12" r="2"></circle><circle cx="12" cy="22" r="2"></circle></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-pencil"><path d="M22.853,1.148a3.626,3.626,0,0,0-5.124,0L1.465,17.412A4.968,4.968,0,0,0,0,20.947V23a1,1,0,0,0,1,1H3.053a4.966,4.966,0,0,0,3.535-1.464L22.853,6.271A3.626,3.626,0,0,0,22.853,1.148ZM5.174,21.122A3.022,3.022,0,0,1,3.053,22H2V20.947a2.98,2.98,0,0,1,.879-2.121L15.222,6.483l2.3,2.3ZM21.438,4.857,18.932,7.364l-2.3-2.295,2.507-2.507a1.623,1.623,0,1,1,2.295,2.3Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-refund-alt"><path d="m18,7h2.666c-1.943-3.389-5.697-5.375-9.776-4.941C6.32,2.546,2.598,6.247,2.069,10.812c-.7,6.042,4.026,11.188,9.931,11.188,5.514,0,10-4.486,10-10,0-.553.447-1,1-1s1,.447,1,1c0,6.774-5.641,12.255-12.473,11.991C5.355,23.752.248,18.646.009,12.475-.256,5.642,5.226,0,12,0c4.104,0,7.805,2.034,9.995,5.345l.005-2.345c0-.553.447-1,1-1s1,.447,1,1v3.991c0,1.109-.899,2.009-2.009,2.009h-3.991c-.553,0-1-.447-1-1s.447-1,1-1Zm-6,12c.552,0,1-.447,1-1v-1c1.654,0,3-1.346,3-3,0-1.359-.974-2.51-2.315-2.733l-3.041-.506c-.373-.062-.644-.382-.644-.761,0-.552.449-1,1-1h2.268c.356,0,.688.191.867.501.274.478.886.642,1.366.364.478-.276.642-.888.364-1.366-.534-.925-1.53-1.499-2.598-1.499h-.268v-1c0-.553-.448-1-1-1s-1,.447-1,1v1c-1.654,0-3,1.346-3,3,0,1.359.974,2.51,2.315,2.733l3.04.506c.374.062.645.382.645.761,0,.552-.448,1-1,1h-2.268c-.356,0-.688-.191-.867-.501-.277-.479-.889-.643-1.366-.364-.479.276-.642.888-.365,1.366.535.925,1.531,1.499,2.598,1.499h.268v1c0,.553.448,1,1,1Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-point-of-sale-bill"><path d="m11,10v1c0,.552-.448,1-1,1h-5c-.552,0-1-.448-1-1v-1c0-.552.448-1,1-1h5c.552,0,1,.448,1,1Zm13-3.5v10.5c0,.357-.19.688-.5.866-.309.178-.69.178-.999,0l-2.17-1.25-1.767,1.209c-.172.118-.369.175-.563.175-.319,0-.633-.152-.826-.436-.312-.455-.195-1.077.261-1.39l2.285-1.564c.315-.217.731-.234,1.063-.041l1.216.7V6.5c0-2.481-2.019-4.5-4.5-4.5-2.249,0-4.097,1.624-4.431,3.815,1.164.814,1.931,2.16,1.931,3.685v10c0,2.481-2.019,4.5-4.5,4.5h-6c-2.481,0-4.5-2.019-4.5-4.5v-10c0-1.557.795-2.93,2-3.738v-.762C2,2.243,4.243,0,7,0h10.5c3.584,0,6.5,2.916,6.5,6.5Zm-11,3c0-1.379-1.121-2.5-2.5-2.5h-6c-1.379,0-2.5,1.121-2.5,2.5v10c0,1.379,1.121,2.5,2.5,2.5h6c1.379,0,2.5-1.121,2.5-2.5v-10Zm-1.836-4.433c.263-1.183.837-2.233,1.635-3.067h-5.799c-1.654,0-3,1.346-3,3v.051c.166-.019.329-.051.5-.051h6c.227,0,.446.034.664.067Zm-1.164,8.933h-1c-.553,0-1,.447-1,1s.447,1,1,1h1c.553,0,1-.447,1-1s-.447-1-1-1Zm0,4h-1c-.553,0-1,.447-1,1s.447,1,1,1h1c.553,0,1-.447,1-1s-.447-1-1-1Zm-4-4h-1c-.553,0-1,.447-1,1s.447,1,1,1h1c.553,0,1-.447,1-1s-.447-1-1-1Zm0,4h-1c-.553,0-1,.447-1,1s.447,1,1,1h1c.553,0,1-.447,1-1s-.447-1-1-1Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-hamburger-soda"><path d="M19,12H16.386l.54-4.331A3.017,3.017,0,0,0,14,4.017H11.631c.109-.771.043-2.007,1.134-2.012H16a1,1,0,1,0,0-2H12.765A3,3,0,0,0,9.79,2.633L9.617,4.017H3A3.021,3.021,0,0,0,.059,7.572L1.572,19.63a5.005,5.005,0,0,0,4.959,4.376L19,23.994a5,5,0,0,0,5-5V17A5,5,0,0,0,19,12Zm3,5H10a3,3,0,0,1,3-3h6A3,3,0,0,1,22,17ZM14,6.016a1.011,1.011,0,0,1,.96,1.311L14.873,8h-3.74l.248-1.986ZM2.224,6.39A1,1,0,0,1,3,6.016H9.367L9.118,8H2.124l-.1-.77A.993.993,0,0,1,2.224,6.39ZM3.556,19.382,2.376,10H14.623l-.251,2H13a5,5,0,0,0-5,5c-.042,1.634-.1,3.74,1.036,5.01H6.531A3,3,0,0,1,3.556,19.382ZM19,22H13a3,3,0,0,1-3-3h3.7c.387.186,2.875,2.111,3.3,2,.416.118,2.93-1.823,3.3-2H22A3,3,0,0,1,19,22Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-angle-right"><path d="M7,24a1,1,0,0,1-.71-.29,1,1,0,0,1,0-1.42l8.17-8.17a3,3,0,0,0,0-4.24L6.29,1.71A1,1,0,0,1,7.71.29l8.17,8.17a5,5,0,0,1,0,7.08L7.71,23.71A1,1,0,0,1,7,24Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-angle-small-up"><path d="M18,15.5a1,1,0,0,1-.71-.29l-4.58-4.59a1,1,0,0,0-1.42,0L6.71,15.21a1,1,0,0,1-1.42-1.42L9.88,9.21a3.06,3.06,0,0,1,4.24,0l4.59,4.58a1,1,0,0,1,0,1.42A1,1,0,0,1,18,15.5Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-angle-small-down"><path d="M18.71,8.21a1,1,0,0,0-1.42,0l-4.58,4.58a1,1,0,0,1-1.42,0L6.71,8.21a1,1,0,0,0-1.42,0,1,1,0,0,0,0,1.41l4.59,4.59a3,3,0,0,0,4.24,0l4.59-4.59A1,1,0,0,0,18.71,8.21Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-chart-histogram"><path d="M23,22H5a3,3,0,0,1-3-3V1A1,1,0,0,0,0,1V19a5.006,5.006,0,0,0,5,5H23a1,1,0,0,0,0-2Z"></path><path d="M6,20a1,1,0,0,0,1-1V12a1,1,0,0,0-2,0v7A1,1,0,0,0,6,20Z"></path><path d="M10,10v9a1,1,0,0,0,2,0V10a1,1,0,0,0-2,0Z"></path><path d="M15,13v6a1,1,0,0,0,2,0V13a1,1,0,0,0-2,0Z"></path><path d="M20,9V19a1,1,0,0,0,2,0V9a1,1,0,0,0-2,0Z"></path><path d="M6,9a1,1,0,0,0,.707-.293l3.586-3.586a1.025,1.025,0,0,1,1.414,0l2.172,2.172a3,3,0,0,0,4.242,0l5.586-5.586A1,1,0,0,0,22.293.293L16.707,5.878a1,1,0,0,1-1.414,0L13.121,3.707a3,3,0,0,0-4.242,0L5.293,7.293A1,1,0,0,0,6,9Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-money-bill-wave"><path d="M12,16c-2.206,0-4-1.794-4-4s1.794-4,4-4,4,1.794,4,4-1.794,4-4,4Zm0-6c-1.103,0-2,.897-2,2s.897,2,2,2,2-.897,2-2-.897-2-2-2Zm-7-3c-.552,0-1,.448-1,1s.448,1,1,1,1-.448,1-1-.448-1-1-1Zm13,3c0,.552,.448,1,1,1s1-.448,1-1-.448-1-1-1-1,.448-1,1Zm-13,3c-.552,0-1,.448-1,1s.448,1,1,1,1-.448,1-1-.448-1-1-1Zm13,3c0,.552,.448,1,1,1s1-.448,1-1-.448-1-1-1-1,.448-1,1Zm-1.001,5c-1.634,0-3.098-.399-4.513-.785-1.348-.368-2.62-.715-3.986-.715-1.571,0-2.562,.101-3.419,.349-1.206,.347-2.474,.113-3.48-.644-1.017-.765-1.6-1.933-1.6-3.205v-7.548c0-2.063,1.299-3.944,3.233-4.681,1.341-.512,2.609-.771,3.768-.771,1.634,0,3.097,.399,4.513,.785,1.348,.368,2.62,.715,3.986,.715,1.57,0,2.562-.101,3.419-.349,1.208-.347,2.476-.113,3.481,.644,1.017,.765,1.6,1.933,1.6,3.205v7.548h0c0,2.063-1.3,3.944-3.234,4.681-1.341,.512-2.608,.771-3.768,.771Zm-8.499-3.5c1.634,0,3.097,.399,4.513,.785,1.348,.368,2.62,.715,3.986,.715,.914,0,1.942-.215,3.056-.64,1.183-.45,1.946-1.554,1.946-2.812v-7.548c0-.637-.293-1.223-.803-1.606-.499-.375-1.126-.493-1.725-.321-1.051,.303-2.202,.427-3.974,.427-1.634,0-3.097-.399-4.513-.785-1.348-.368-2.62-.715-3.986-.715-.915,0-1.942,.215-3.056,.64-1.183,.45-1.946,1.554-1.946,2.812v7.548c0,.637,.293,1.223,.803,1.606,.499,.375,1.126,.493,1.724,.32,1.051-.303,2.203-.427,3.974-.427Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-digital-wallet"><path d="M24,7v10c0,1.654-1.346,3-3,3h-5.5c-.553,0-1-.448-1-1s.447-1,1-1h5.5c.552,0,1-.449,1-1V7c0-.551-.448-1-1-1H6c-1.096,0-2.146-.366-2.999-1.005,0,.002,0,.004,0,.005v3c0,.552-.447,1-1,1s-1-.448-1-1v-3C1.02,2.304,3.224-.006,6,0H23c.553,0,1,.448,1,1s-.447,1-1,1H6c-.881,0-1.667,.389-2.217,.996,.563,.623,1.361,1.004,2.217,1.004h15c1.654,0,3,1.346,3,3Zm-4,5c0-.828-.672-1.5-1.5-1.5s-1.5,.672-1.5,1.5,.672,1.5,1.5,1.5,1.5-.672,1.5-1.5ZM1.5,21c-.828,0-1.5,.672-1.5,1.5s.672,1.5,1.5,1.5,1.5-.672,1.5-1.5-.672-1.5-1.5-1.5Zm-.5-5c-.553,0-1,.448-1,1s.447,1,1,1c2.757,0,5,2.243,5,5,0,.552,.447,1,1,1s1-.448,1-1c0-3.86-3.141-7-7-7Zm0-5c-.553,0-1,.448-1,1s.447,1,1,1c5.514,0,10,4.486,10,10,0,.552,.447,1,1,1s1-.448,1-1c0-6.617-5.383-12-12-12Z"></path></svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-credit-card"><circle cx="5.5" cy="15.5" r="1.5"></circle><path d="M19,3H5A5.006,5.006,0,0,0,0,8v8a5.006,5.006,0,0,0,5,5H19a5.006,5.006,0,0,0,5-5V8A5.006,5.006,0,0,0,19,3ZM5,5H19a3,3,0,0,1,3,3H2A3,3,0,0,1,5,5ZM19,19H5a3,3,0,0,1-3-3V10H22v6A3,3,0,0,1,19,19Z"></path></svg>',
    '<svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="512.000000pt" height="512.000000pt" viewBox="0 0 512.000000 512.000000" preserveAspectRatio="xMidYMid meet" data-svg-name="custom icon-ghost"><g transform="translate(0.000000,512.000000) scale(0.100000,-0.100000)" stroke="none"><path d="M2768 4990 c-70 -12 -166 -46 -225 -80 -62 -35 -159 -124 -198 -179 -90 -131 -6 -302 147 -301 65 1 117 29 166 92 52 67 101 103 165 119 41 10 58 9 114 -6 122 -33 187 -132 162 -244 -14 -62 -31 -91 -82 -138 -53 -49 -78 -63 -200 -109 -182 -69 -235 -116 -274 -243 l-17 -54 -90 7 c-49 3 -190 6 -313 6 l-224 0 44 58 c78 101 107 179 107 289 0 203 -136 369 -342 418 -118 28 -241 11 -367 -51 -161 -79 -280 -262 -281 -429 0 -67 26 -114 80 -142 53 -28 82 -29 136 -3 55 27 72 55 88 143 21 118 54 163 140 187 62 17 112 6 152 -34 67 -67 67 -171 1 -267 -49 -72 -102 -151 -119 -179 -14 -23 -26 -27 -119 -39 -337 -41 -709 -150 -917 -268 -96 -54 -201 -146 -237 -207 -47 -80 -49 -115 -25 -338 85 -803 236 -1502 448 -2085 74 -202 166 -416 201 -467 67 -97 188 -170 347 -210 585 -147 1203 -150 1798 -10 136 32 218 69 285 130 73 66 108 121 167 264 l51 125 104 6 c128 7 171 22 328 111 386 220 659 523 827 917 74 171 97 273 97 431 2 213 -47 348 -175 485 -156 167 -386 217 -601 130 l-60 -24 7 62 c3 34 9 135 12 224 l7 162 -28 58 c-89 183 -399 347 -845 447 -64 14 -150 31 -193 38 -42 6 -74 15 -70 18 5 4 51 21 103 39 172 59 248 101 326 183 167 177 202 410 93 625 -117 231 -429 379 -701 333z m248 -100 c120 -31 192 -69 273 -145 102 -97 144 -183 149 -311 4 -74 0 -107 -17 -162 -22 -74 -83 -166 -142 -216 -44 -38 -152 -88 -286 -132 -160 -53 -185 -70 -219 -149 -44 -106 -98 -132 -155 -76 -35 36 -36 46 -3 143 45 135 77 164 257 228 211 76 317 199 317 368 0 167 -139 294 -322 294 -101 0 -169 -35 -261 -133 -66 -71 -77 -79 -111 -79 -48 0 -82 23 -96 65 -15 46 4 89 73 158 144 144 343 198 543 147z m-1244 -378 c77 -38 130 -92 166 -171 21 -45 26 -71 26 -136 0 -104 -23 -154 -138 -300 -47 -60 -89 -123 -92 -140 -3 -16 -1 -50 5 -74 12 -54 0 -88 -33 -97 -54 -13 -81 29 -93 147 -6 64 5 91 72 179 23 30 55 80 71 110 25 48 29 66 29 140 0 69 -5 93 -22 127 -57 106 -175 148 -302 106 -102 -33 -162 -114 -180 -244 -9 -68 -26 -89 -73 -89 -15 0 -37 9 -49 21 -18 18 -20 28 -14 77 17 139 103 265 225 327 79 41 142 55 240 52 85 -2 103 -6 162 -35z m738 -802 c40 -119 162 -164 261 -97 28 19 69 74 82 110 4 13 256 -31 422 -73 408 -104 661 -250 714 -411 12 -36 4 -208 -19 -439 -9 -90 -2 -120 28 -120 9 0 53 18 97 40 120 60 233 75 348 45 80 -21 125 -46 188 -103 108 -99 168 -237 176 -403 9 -172 -26 -315 -127 -524 -84 -173 -158 -282 -293 -435 -158 -177 -446 -379 -628 -440 -66 -23 -180 -31 -231 -17 -18 5 -31 2 -41 -7 -8 -8 -38 -75 -67 -148 -63 -157 -102 -222 -161 -270 -63 -51 -113 -74 -225 -102 -255 -64 -497 -96 -789 -103 -323 -8 -605 19 -905 87 -157 35 -227 62 -289 108 -91 69 -110 102 -206 346 -251 642 -387 1200 -490 2011 -46 364 -52 450 -32 497 86 204 527 384 1154 472 46 7 43 11 69 -99 19 -82 68 -125 144 -125 96 0 147 66 135 176 -3 35 -4 68 0 74 4 7 116 9 336 8 l330 -3 19 -55z"></path><path d="M2408 3520 c-98 -52 -154 -213 -105 -306 84 -161 306 -163 390 -4 25 49 28 63 25 127 -3 61 -8 78 -35 115 -43 60 -100 88 -177 88 -40 -1 -73 -7 -98 -20z m172 -89 c33 -24 50 -58 50 -104 0 -44 -12 -70 -48 -109 -48 -51 -128 -45 -178 15 -23 27 -26 38 -22 89 3 44 10 64 29 84 50 54 114 64 169 25z"></path><path d="M1705 3436 c-43 -18 -93 -79 -101 -121 -23 -125 56 -227 176 -227 81 0 149 53 171 134 21 80 -36 188 -114 217 -38 15 -95 13 -132 -3z m123 -91 c57 -48 48 -138 -17 -164 -52 -22 -104 7 -120 66 -13 44 3 89 38 108 38 21 66 18 99 -10z"></path><path d="M4165 2527 c-139 -46 -255 -166 -288 -299 -9 -34 -26 -117 -37 -183 -44 -255 -133 -574 -241 -863 -21 -57 -22 -63 -7 -79 22 -21 105 -28 167 -13 153 37 465 294 601 495 152 225 237 493 209 663 -19 120 -88 225 -177 268 -47 23 -171 29 -227 11z m211 -109 c122 -82 144 -255 62 -488 -93 -267 -275 -494 -534 -666 -102 -68 -197 -114 -210 -101 -3 3 17 71 45 152 85 245 180 627 206 825 13 100 71 196 151 253 61 43 98 55 170 56 54 1 68 -3 110 -31z"></path><path d="M1065 2012 c-87 -41 -145 -143 -131 -234 20 -129 153 -221 274 -189 97 27 161 103 169 202 4 57 2 70 -24 119 -39 74 -101 113 -187 117 -44 3 -72 -2 -101 -15z"></path><path d="M2655 1920 c-83 -26 -145 -117 -145 -214 0 -230 305 -307 415 -105 24 44 27 59 23 118 -7 122 -85 203 -202 208 -33 1 -74 -2 -91 -7z"></path><path d="M1468 1260 c-25 -26 -29 -36 -24 -63 14 -68 9 -67 428 -114 468 -52 489 -52 517 -17 33 43 24 101 -19 124 -17 9 -793 100 -852 100 -11 0 -33 -14 -50 -30z"></path></g></svg>',
    '<svg version="1.0" xmlns="http://www.w3.org/2000/svg"  width="512.000000pt" height="512.000000pt" viewBox="0 0 512.000000 512.000000"  preserveAspectRatio="xMidYMid meet" data-svg-name="custom icon-scared-warning">  <g transform="translate(0.000000,512.000000) scale(0.100000,-0.100000)" stroke="none"> <path d="M800 5088 c-16 -27 -20 -51 -20 -133 l-1 -100 -35 90 c-19 49 -45 100 -56 112 -26 27 -59 30 -80 6 -30 -35 -30 -87 -3 -253 l6 -35 -22 40 c-56 102 -101 134 -139 100 -25 -22 -26 -79 -5 -220 16 -110 46 -219 77 -278 28 -57 94 -124 133 -137 l34 -11 -15 -34 c-7 -19 -11 -41 -8 -50 8 -21 45 -35 90 -35 19 0 47 -8 61 -17 20 -13 48 -18 102 -18 48 0 76 -4 78 -12 2 -6 -23 -41 -55 -77 -77 -85 -95 -124 -90 -192 8 -94 79 -156 195 -170 95 -11 96 -11 89 -49 -4 -19 -23 -69 -43 -112 -31 -64 -37 -88 -37 -142 -1 -122 50 -174 177 -180 58 -2 80 -7 84 -18 3 -9 -4 -51 -17 -94 -30 -106 -26 -213 11 -285 l26 -51 -463 -662 -464 -663 32 -53 31 -53 256 -6 c141 -3 560 -11 931 -17 599 -10 676 -13 685 -27 26 -41 165 -298 165 -304 0 -13 -148 -9 -245 6 -49 8 -141 24 -203 36 -62 13 -115 21 -118 18 -3 -3 -32 -149 -65 -324 -33 -176 -73 -386 -89 -469 -15 -82 -26 -152 -25 -154 8 -7 160 50 219 83 80 45 168 139 190 202 24 72 21 181 -9 270 -14 41 -25 76 -25 77 0 2 39 -3 88 -9 48 -7 163 -17 256 -21 l168 -8 53 -125 c29 -69 85 -215 125 -325 40 -110 74 -202 75 -203 4 -4 846 317 855 325 12 12 -161 160 -225 193 -94 48 -188 54 -269 17 -61 -28 -131 -93 -175 -162 l-29 -45 -12 32 c-7 18 -39 95 -72 170 -32 75 -58 139 -58 141 0 2 33 10 73 17 280 49 475 241 494 488 l6 72 281 -6 c830 -18 1076 -19 1071 -5 -3 8 -231 362 -506 788 l-501 773 16 47 c20 58 20 163 1 227 -18 60 -20 116 -2 117 6 1 37 0 68 -1 71 -2 128 25 160 77 37 58 33 156 -9 247 -38 83 -51 146 -31 146 51 1 156 23 189 40 48 24 90 84 97 138 7 53 -23 119 -86 185 -29 30 -51 63 -51 75 0 20 5 22 73 20 52 -2 81 3 104 15 18 9 52 17 76 17 73 0 93 32 63 101 -5 12 0 18 23 22 69 14 147 121 190 259 44 146 65 350 39 376 -30 30 -91 -9 -142 -91 -32 -51 -11 -38 25 16 41 63 79 88 103 68 45 -38 -14 -369 -90 -498 -35 -61 -91 -112 -131 -119 -18 -3 -52 -2 -75 4 -23 6 -44 9 -46 7 -2 -2 14 -9 36 -14 48 -13 64 -30 65 -72 3 -48 -17 -55 -110 -42 -115 17 -241 60 -275 93 -34 35 -35 51 -4 87 23 27 24 27 62 11 42 -18 94 -31 94 -24 0 3 -24 11 -53 20 -109 32 -179 128 -197 272 -14 113 10 244 47 258 40 16 116 -78 137 -168 4 -15 9 -26 11 -24 2 2 17 67 33 144 42 201 83 285 130 269 27 -8 42 -55 41 -124 0 -77 -33 -266 -45 -264 -5 1 -23 5 -39 9 -17 4 -28 4 -25 1 7 -8 303 -97 308 -93 2 2 -12 9 -32 16 l-34 11 24 55 c13 31 22 59 19 64 -3 5 2 37 10 72 22 94 20 183 -5 208 -11 11 -27 20 -36 20 -29 0 -70 -57 -103 -142 -18 -46 -35 -85 -37 -87 -1 -2 -1 43 2 100 5 93 3 107 -15 137 -59 92 -128 -12 -176 -267 l-18 -94 -27 57 c-44 91 -89 128 -131 105 -25 -13 -38 -47 -50 -129 -19 -127 21 -278 90 -344 l29 -28 -24 -35 c-26 -39 -29 -55 -14 -83 7 -13 5 -21 -7 -31 -25 -21 -53 -90 -53 -132 0 -54 20 -94 84 -165 86 -97 78 -112 -73 -130 -89 -11 -118 -28 -148 -86 -25 -48 -13 -166 26 -246 32 -67 41 -129 19 -131 -7 -1 -45 -2 -85 -3 -85 -1 -116 -19 -150 -86 -27 -52 -29 -111 -8 -190 8 -30 13 -55 11 -57 -2 -2 -42 58 -91 132 -48 75 -86 137 -84 139 2 2 29 19 59 38 259 164 306 519 99 751 l-48 54 66 78 c37 43 62 76 57 74 -6 -2 -39 -36 -73 -76 l-61 -72 -48 30 c-49 31 -157 69 -198 69 -23 0 -24 3 -26 83 l-2 82 -5 -80 -6 -80 -70 -7 c-74 -7 -138 -26 -192 -58 l-33 -19 -47 80 c-25 43 -48 78 -50 75 -2 -2 17 -39 42 -81 38 -64 44 -81 33 -91 -7 -7 -19 -14 -26 -16 -7 -2 -70 86 -145 202 l-133 205 -65 3 -64 3 -143 -205 -143 -206 -30 22 c-34 25 -33 28 19 106 52 77 57 86 45 79 -6 -4 -32 -41 -58 -82 l-46 -75 -42 22 c-58 29 -132 48 -193 48 l-52 0 -10 83 -11 82 5 -81 5 -81 -40 -7 c-59 -9 -141 -42 -195 -78 -26 -17 -51 -27 -55 -22 -4 5 -29 37 -55 72 -26 34 -50 62 -53 62 -3 0 -1 -6 4 -12 5 -7 31 -41 57 -76 l47 -62 -41 -48 c-82 -92 -120 -196 -120 -330 0 -178 81 -317 249 -428 2 -2 -61 -94 -138 -205 -78 -111 -140 -203 -138 -205 2 -3 68 87 147 200 l142 204 39 -17 c21 -9 38 -19 36 -22 -5 -15 -1342 -1948 -1347 -1948 -3 0 -17 19 -31 43 l-27 44 519 741 c443 632 518 744 509 760 -14 28 -12 79 6 141 22 74 16 179 -12 217 -34 45 -81 67 -149 69 -33 0 -66 2 -72 2 -23 3 -14 56 23 132 60 123 58 234 -4 294 -23 21 -46 29 -114 40 -93 15 -128 29 -128 50 0 8 29 45 65 84 73 78 85 103 85 171 0 35 -8 59 -30 94 -23 37 -28 52 -21 70 10 25 -8 79 -29 92 -8 5 -1 19 24 44 19 20 47 62 61 93 54 119 49 342 -9 380 -37 25 -94 -19 -134 -102 l-28 -59 -18 107 c-24 139 -50 224 -82 262 -33 39 -59 38 -84 -2z m74 3 c29 -31 54 -112 81 -257 14 -75 25 -142 25 -148 0 -6 11 14 24 45 32 79 61 123 91 139 56 30 87 -33 86 -175 -1 -193 -78 -314 -224 -351 -51 -14 -51 -14 -8 -9 24 3 56 12 71 20 25 13 29 12 48 -8 62 -67 12 -116 -157 -156 -138 -33 -192 -36 -220 -14 -22 18 -22 20 -8 56 13 31 23 38 62 48 25 6 44 13 42 16 -3 2 -25 -1 -50 -8 -63 -15 -106 1 -156 58 -70 78 -122 250 -137 448 -10 127 23 161 87 88 30 -35 109 -187 109 -211 0 -6 -14 -13 -31 -17 -17 -4 -28 -9 -26 -12 6 -5 297 74 306 83 3 4 -7 4 -24 0 -16 -4 -34 -8 -39 -9 -26 -5 -47 313 -25 356 22 41 47 47 73 18z m-180 -61 c11 -19 35 -72 52 -119 18 -46 34 -78 36 -70 3 8 3 4 1 -9 -2 -12 3 -45 11 -72 l15 -50 -52 -14 c-116 -33 -101 -43 -132 85 -30 125 -36 232 -17 267 20 35 61 26 86 -18z m3900 18 c25 -35 19 -123 -14 -254 -17 -65 -33 -120 -36 -123 -5 -6 -81 13 -123 31 l-30 13 33 95 c46 136 85 218 114 241 31 24 37 24 56 -3z m-1917 -550 c-73 -112 -299 -434 -305 -436 -5 -1 -18 11 -30 27 l-22 30 141 201 140 200 46 0 c45 0 45 0 30 -22z m172 -186 c72 -112 131 -207 131 -211 0 -4 -9 -16 -21 -27 -11 -10 -37 -45 -56 -77 -20 -32 -39 -54 -43 -50 -3 4 -44 66 -90 136 -46 70 -87 124 -91 120 -4 -4 -54 -76 -111 -160 l-105 -152 -40 78 -40 78 65 94 c196 284 264 380 267 377 1 -2 61 -94 134 -206z m-650 -133 c79 -36 175 -131 214 -213 108 -221 45 -468 -157 -617 -46 -34 -56 -36 -56 -9 0 11 -5 39 -12 63 -9 37 -9 51 5 86 25 61 21 81 -24 149 -37 55 -41 66 -35 104 20 141 20 140 -13 188 -34 49 -38 82 -16 120 23 40 19 122 -7 150 l-22 23 30 -7 c16 -4 58 -20 93 -37z m-395 -3 c-45 -45 -47 -96 -4 -163 34 -53 36 -72 14 -114 -23 -45 -20 -98 10 -157 32 -64 32 -78 0 -154 -28 -68 -27 -89 11 -147 21 -30 24 -47 22 -99 -2 -70 -1 -70 -94 -26 -158 75 -263 246 -263 428 0 194 105 362 275 442 66 31 69 30 29 -10z m1388 6 c-44 -41 -49 -85 -18 -152 32 -68 32 -68 1 -126 -31 -58 -31 -82 -3 -161 l21 -62 -36 -70 c-43 -81 -44 -97 -16 -152 17 -34 19 -51 14 -105 -4 -35 -10 -64 -14 -64 -3 0 -31 14 -61 32 -145 83 -240 250 -240 421 0 187 129 374 306 446 68 28 81 26 46 -7z m344 -8 c119 -56 224 -186 259 -319 54 -210 -48 -440 -240 -542 l-60 -31 -3 73 c-2 59 1 81 17 111 28 51 26 71 -9 137 -35 66 -37 99 -10 158 26 58 25 87 -5 143 -31 58 -31 71 0 121 32 52 34 126 5 155 -26 26 -20 25 46 -6z m-762 -118 l86 -133 -15 -59 c-45 -174 9 -360 141 -483 74 -70 151 -109 251 -131 l73 -15 584 -895 c321 -492 582 -896 581 -898 -3 -3 -3639 59 -3643 63 -2 1 269 396 602 878 l605 874 41 6 c72 9 186 71 251 136 107 108 165 277 142 414 l-10 57 110 160 c61 88 112 160 113 160 1 0 41 -60 88 -134z m1386 -1773 c355 -548 651 -1007 659 -1021 l13 -25 -383 6 c-211 4 -1185 21 -2164 37 -978 17 -1781 33 -1783 35 -2 2 299 442 670 979 582 844 676 974 694 970 11 -3 50 -8 85 -12 l65 -7 -604 -873 c-332 -480 -602 -875 -600 -877 4 -4 583 -15 3301 -62 l389 -6 -51 79 c-28 43 -293 450 -589 904 l-538 825 65 12 c37 6 77 16 91 22 14 5 27 10 30 10 3 1 295 -447 650 -996z m-1022 -1030 c127 -7 127 -6 96 -95 -41 -123 -165 -194 -370 -214 l-72 -6 -24 43 c-53 94 -148 270 -148 274 0 7 389 6 518 -2z"/> <path d="M945 4656 c-42 -18 -93 -63 -110 -97 -8 -15 -14 -50 -14 -76 l2 -48 6 55 c4 30 12 65 19 77 13 24 73 73 89 73 5 0 18 7 29 15 23 18 18 18 -21 1z"/> <path d="M2600 3721 c0 -51 0 -51 33 -51 78 0 138 -37 123 -75 -7 -21 -79 -36 -127 -29 -31 5 -40 4 -35 -4 10 -16 115 -15 146 1 19 10 25 20 25 47 0 30 -5 38 -35 52 -19 10 -52 18 -72 18 -37 0 -38 1 -38 39 0 22 -4 43 -10 46 -6 4 -10 -13 -10 -44z"/> <path d="M2592 3490 c-61 -13 -139 -58 -179 -105 -60 -68 -105 -176 -110 -258 -5 -85 13 -129 66 -164 45 -30 61 -29 161 12 106 44 140 44 231 0 41 -19 88 -35 105 -35 74 0 129 92 129 215 -2 209 -203 377 -403 335z m162 -20 c23 -8 26 -15 26 -60 0 -43 -5 -55 -32 -85 -27 -29 -43 -37 -83 -41 -92 -11 -151 31 -162 115 -6 42 5 53 66 72 38 11 155 11 185 -1z"/> <path d="M2551 2799 c-30 -5 -69 -17 -85 -27 l-31 -18 -6 -155 c-7 -207 4 -321 45 -439 18 -52 35 -102 39 -110 4 -10 -4 -22 -25 -35 -54 -34 -92 -107 -96 -185 -4 -60 -1 -75 24 -120 94 -173 334 -170 427 5 29 55 29 155 0 211 -30 57 -95 112 -148 126 -32 9 -45 17 -43 28 4 19 59 25 88 10 19 -10 23 -6 46 47 50 112 75 236 77 378 1 112 -1 136 -19 175 -12 25 -30 53 -40 62 -49 43 -157 63 -253 47z"/> <path d="M2580 5052 c0 -38 -3 -151 -7 -250 l-6 -182 46 0 47 0 0 250 0 250 -40 0 -40 0 0 -68z"/> <path d="M3181 4993 c-78 -292 -101 -381 -101 -394 0 -11 14 -20 38 -26 l38 -10 57 216 c32 119 57 219 57 223 0 6 -55 28 -71 28 -5 0 -13 -17 -18 -37z"/> <path d="M1972 4955 c-38 -16 -44 10 53 -210 31 -71 64 -145 71 -162 l14 -33 38 17 c20 10 38 18 39 18 6 3 -165 379 -173 382 -5 1 -24 -4 -42 -12z"/> <path d="M4220 4666 c0 -2 20 -14 45 -26 25 -12 54 -33 65 -47 25 -33 42 -94 35 -130 l-5 -28 11 27 c14 35 -3 97 -38 138 -28 34 -113 83 -113 66z"/> <path d="M456 850 c-65 -20 -109 -88 -104 -160 3 -46 1 -50 -32 -72 -46 -31 -65 -82 -51 -135 13 -46 70 -108 115 -123 29 -9 31 -13 28 -49 -5 -53 28 -125 70 -151 26 -17 45 -20 90 -17 107 6 192 92 193 193 0 70 -18 74 -27 6 -20 -171 -244 -233 -289 -81 -17 54 -5 89 29 89 44 0 107 41 107 70 0 38 -45 56 -87 36 -18 -9 -42 -29 -53 -46 -15 -22 -25 -28 -40 -24 -40 13 -78 48 -97 91 -17 38 -18 49 -7 74 6 17 25 37 41 45 28 15 32 14 52 -5 30 -28 67 -40 94 -30 58 22 27 71 -52 83 -42 7 -46 10 -52 42 -17 93 75 160 170 124 33 -12 100 -82 116 -120 12 -30 40 -42 40 -17 0 17 -37 76 -69 110 -49 54 -131 83 -185 67z m14 -250 c12 -8 11 -10 -7 -10 -12 0 -25 5 -28 10 -8 13 15 13 35 0z m80 -181 c0 -12 -69 -43 -78 -35 -3 3 3 15 13 26 19 21 65 28 65 9z"/> <path d="M897 593 c51 -2 135 -2 185 0 51 1 10 3 -92 3 -102 0 -143 -2 -93 -3z"/> <path d="M938 443 c84 -2 219 -2 300 0 81 1 12 3 -153 3 -165 0 -231 -2 -147 -3z"/> </g> </svg>',
    '<svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 512 512" version="1.1" data-svg-name="custom icon-coffee-question"><path d="M 277.500 12.581 C 261.018 16.554, 252.233 20.933, 242.691 29.932 C 229.159 42.694, 226.791 52.997, 235.191 62.564 C 239.389 67.346, 242.936 69, 248.990 69 C 255.889 69, 260.311 66.480, 267.331 58.547 C 270.538 54.923, 274.996 51.023, 277.237 49.879 C 286.548 45.129, 301.167 48.761, 306.761 57.215 C 308.731 60.191, 309.516 62.823, 309.789 67.367 C 310.586 80.628, 302.895 89.289, 283.879 96.546 C 264.080 104.102, 258.545 108.575, 254.863 120 L 252.768 126.500 222.134 126.149 C 205.285 125.956, 191.347 125.653, 191.160 125.475 C 190.973 125.298, 192.640 122.742, 194.865 119.795 C 197.090 116.848, 200.168 111.751, 201.705 108.468 C 204.236 103.063, 204.500 101.457, 204.500 91.448 C 204.500 80.688, 204.401 80.196, 200.741 72.790 C 189.011 49.056, 160.052 41.188, 133.643 54.561 C 117.475 62.747, 105.993 80.524, 106.004 97.355 C 106.008 104.902, 108.272 109.078, 113.921 111.960 C 118.985 114.543, 123.015 114.543, 128.079 111.960 C 133.290 109.301, 135.550 105.402, 136.814 96.889 C 138.112 88.142, 140.434 84.147, 146.014 81.058 C 158.087 74.374, 170.345 81.343, 170.325 94.878 C 170.316 101.303, 168.104 106.363, 161.531 115 C 159.229 118.025, 156.288 122.407, 154.995 124.738 C 153.194 127.987, 151.928 129.086, 149.573 129.446 C 104.013 136.414, 82.403 142.048, 59.370 152.962 C 37.188 163.474, 24.158 176.275, 22.371 189.312 C 20.827 200.574, 32.003 280.811, 40.976 322.889 C 49.740 363.989, 62.109 405.402, 75.506 438.500 C 84.426 460.537, 87.482 466.532, 92.571 471.972 C 102.224 482.292, 113.159 486.894, 141.205 492.438 C 194.208 502.916, 245.890 502.284, 298.844 490.512 C 317.244 486.421, 324.484 483.224, 332.816 475.510 C 340.348 468.536, 343.059 464.115, 349.069 449 L 353.641 437.500 362.335 437.317 C 367.116 437.216, 373.609 436.390, 376.764 435.482 C 383.178 433.635, 400.498 424.427, 411.362 417.088 C 448.512 391.990, 476.032 354.180, 487.122 313 C 489.014 305.973, 489.409 301.987, 489.402 290 C 489.394 276.963, 489.123 274.693, 486.722 267.500 C 480.086 247.624, 465.724 232.436, 448.836 227.436 C 438.899 224.494, 423.624 224.864, 414.052 228.280 C 409.956 229.741, 406.454 230.787, 406.271 230.604 C 406.087 230.421, 406.399 225.372, 406.962 219.385 C 407.526 213.398, 408.063 203.749, 408.155 197.943 C 408.305 188.558, 408.043 186.781, 405.802 181.943 C 399.063 167.399, 379.992 154.506, 350.500 144.559 C 337.346 140.122, 319.923 135.776, 305.520 133.340 C 299.734 132.361, 295 131.319, 295 131.025 C 295 130.731, 300.129 128.759, 306.397 126.643 C 326.261 119.936, 333.643 115.253, 342.092 104 C 349.555 94.060, 352.192 86.628, 352.765 73.923 C 353.551 56.511, 348.913 44.900, 336.010 31.980 C 323.526 19.478, 308.596 13.220, 289.500 12.485 C 284 12.273, 278.600 12.316, 277.500 12.581 M 183.733 135.693 C 182.171 136.100, 182.034 137.042, 182.550 143.827 C 183.053 150.436, 182.854 151.944, 181.111 154.701 C 178.930 158.153, 174.812 160.736, 170.926 161.090 C 160.358 162.053, 156.261 157.517, 152.575 140.777 C 152.066 138.463, 151.565 138.124, 149.238 138.513 C 147.732 138.765, 139.300 140.141, 130.500 141.570 C 94.395 147.435, 64.188 157.841, 46.382 170.547 C 39.070 175.765, 35.388 179.914, 32.698 185.969 C 30.830 190.174, 30.783 191.176, 31.911 202.969 C 36.980 256.009, 48.267 320.395, 60.051 363.500 C 67.449 390.561, 78.839 423.268, 90.415 450.692 C 94.056 459.319, 96.002 462.545, 99.757 466.181 C 109.423 475.539, 116.037 478.229, 142.242 483.463 C 193.120 493.624, 243.024 493.278, 294 482.412 C 309.962 479.009, 316.935 476.530, 323.243 472.012 C 330.609 466.737, 334.920 460.042, 341.599 443.500 C 344.708 435.800, 347.662 429.055, 348.165 428.511 C 348.685 427.948, 353.138 427.659, 358.512 427.840 C 369.395 428.206, 375.547 426.764, 386.391 421.303 C 414.101 407.348, 438.748 385.559, 455.734 360 C 485.612 315.040, 489.002 271.965, 464.583 247.546 C 457.483 240.446, 450.500 236.728, 441 234.988 C 429.932 232.962, 416.739 235.446, 406.402 241.505 C 404.060 242.877, 401.227 244, 400.107 244 C 396.363 244, 396.015 241.270, 397.542 223.908 C 399.842 197.767, 399.775 189.285, 397.231 184.381 C 389.877 170.211, 363.495 156.215, 326.565 146.890 C 315.664 144.138, 285.999 138.614, 285.469 139.237 C 285.346 139.382, 284.334 141.300, 283.220 143.500 C 279.657 150.536, 274.439 154, 267.403 154 C 259.625 154, 251.568 147.403, 250.396 140.077 C 249.867 136.768, 249.340 136.118, 246.764 135.603 C 243.314 134.913, 186.413 134.994, 183.733 135.693 M 244.788 158.156 C 237.050 160.292, 230.713 168.121, 228.562 178.203 L 227.985 180.907 211.620 181.203 L 195.256 181.500 193.086 176.768 C 189.968 169.964, 184.042 166.612, 176.146 167.183 C 172.241 167.466, 169.330 168.341, 167.162 169.885 C 163.729 172.329, 160 178.617, 160 181.960 C 160 183.082, 159.790 184, 159.534 184 C 156.757 184, 133.850 187.683, 124.500 189.633 C 105.034 193.692, 82.155 200.614, 83.662 201.987 C 86.415 204.496, 113.104 211.737, 133 215.372 C 160.216 220.346, 175.574 221.490, 215 221.482 C 254.535 221.474, 270.411 220.296, 296.967 215.400 C 317.158 211.678, 343.614 204.477, 346.374 201.952 C 348.725 199.801, 300.133 187.459, 281.500 185.475 C 272.029 184.467, 272.269 184.650, 272.213 178.373 C 272.091 164.887, 258.010 154.507, 244.788 158.156 M 413.976 260.320 C 402.428 265.072, 394.324 272.632, 389.593 283.070 C 388.145 286.265, 386.062 294.674, 384.533 303.500 C 379.804 330.798, 371.570 361.689, 362.441 386.378 C 359.998 392.983, 358 398.944, 358 399.623 C 358 402.615, 361.130 404, 367.821 403.967 C 376.715 403.924, 382.648 401.688, 393.734 394.204 C 423.889 373.846, 442.505 350.593, 452.441 320.873 C 458.591 302.481, 459.290 290.196, 454.862 278.361 C 451.975 270.645, 446.154 263.754, 439.882 260.628 C 432.801 257.100, 422.113 256.973, 413.976 260.320 M 417.698 268.444 C 412.460 270.312, 406.460 274.631, 402.955 279.057 C 399.329 283.635, 395.023 292.709, 395.010 295.800 C 395.004 297.064, 393.218 306.964, 391.039 317.800 C 386.613 339.818, 379.111 367.273, 372.936 384.055 C 370.685 390.172, 369.021 395.354, 369.238 395.571 C 370.925 397.258, 385.010 389.824, 397.166 380.830 C 424.040 360.947, 443.871 330.120, 448.106 301.645 C 451.015 282.085, 441.793 266.927, 427.054 267.044 C 423.999 267.068, 419.789 267.698, 417.698 268.444 M 104.296 311.949 C 88.542 321.150, 89.763 343.859, 106.429 351.619 C 115.120 355.666, 123.488 354.357, 130.552 347.845 C 141.586 337.674, 140.273 320.503, 127.832 312.270 C 124.470 310.045, 122.332 309.464, 116.590 309.216 C 110.205 308.939, 108.983 309.211, 104.296 311.949 M 264 320.594 C 254.234 324.825, 248.576 335.897, 251.006 346.026 C 252.671 352.967, 256.828 358.237, 263.105 361.365 C 270.047 364.824, 275.934 364.834, 282.832 361.397 C 304.312 350.693, 296.759 318.861, 272.782 319.039 C 269.877 319.061, 265.925 319.760, 264 320.594 M 147.201 385.028 C 142.880 389.053, 143.346 395.249, 148.204 398.368 C 149.759 399.367, 162.760 401.164, 188.500 403.940 C 209.400 406.193, 228.332 408.293, 230.570 408.605 C 233.998 409.083, 235.143 408.751, 237.820 406.498 C 241.924 403.044, 242.270 397.542, 238.600 394.094 C 236.382 392.011, 233.121 391.502, 195.850 387.433 C 173.657 385.010, 154.122 383.021, 152.439 383.014 C 150.730 383.006, 148.416 383.896, 147.201 385.028" stroke="none" fill-rule="evenodd"/></svg>',
  ].join("");

  const icons = Array.from(template.children).reduce((prev, curr) => {
    const data_svg_name = curr.getAttribute("data-svg-name");
    curr.removeAttribute("data-svg-name");
    prev[data_svg_name] = curr.outerHTML;
    return prev;
  }, {});

  return (name = "") => icons[name] || "";
};

var dataApp = () => {
  const MyClass = window.MyResourceClass;
  const MyFunction = window.MyResourceFunction;

  const dataApp = {
    routes: new MyClass.RouteHashCallback(),
    auth: "auth_Mj8Q5q3",
    user: null,
    // icon: new IconSVG(),
    svgIcon: svgIcon(),
    mediaPlayer: new MediaPlayer(
      document.createDocumentFragment(),
      "media-player-id-1741285515518"
    ),
    url: dataAppUrl(),
    elements: {
      meta: {
        color: document.getElementById("meta-theme-color"),
      },
      style: {
        app: document.getElementById("style-app"),
      },
      custom: {
        requestDisableCors: document.querySelector("request-disable-cors"),
      },
    },
    values: {
      youtubeToken: null,
      hls: null,
    },
    functions: {
      scrollY: (parameters) => {
        let isDragging = false;
        let startX;
        let scrollLeft;

        const scrollContainer = parameters.target;

        scrollContainer?.addEventListener("mousedown", (e) => {
          isDragging = true;
          startX = e.pageX - scrollContainer.offsetLeft;
          scrollLeft = scrollContainer.scrollLeft;

          parameters?.events?.start?.(e);
        });

        scrollContainer?.addEventListener("mouseleave", (e) => {
          if (isDragging) {
            isDragging = false;
            parameters?.events?.end?.(e);
          }
        });

        scrollContainer?.addEventListener("mouseup", (e) => {
          if (isDragging) {
            isDragging = false;
            parameters?.events?.end?.(e);
          }
        });

        scrollContainer?.addEventListener("mousemove", (e) => {
          if (!isDragging) return;
          e.preventDefault();
          const x = e.pageX - scrollContainer.offsetLeft;
          const walk = x - startX;
          scrollContainer.scrollLeft = scrollLeft - walk;

          parameters?.events?.move?.(e);
        });
      },
      historyBack: ($element) => {
        $element?.addEventListener("click", (e) => {
          const start = Boolean(history.state?.start);
          if (start) {
            return;
          }

          e.preventDefault();
          history.back();
        });
      },
      generateUUID: () => {
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
          /[xy]/g,
          (char) => {
            const random = (Math.random() * 16) | 0; // Genera un número aleatorio entre 0 y 15
            const value = char === "x" ? random : (random & 0x3) | 0x8; // Usa 0x3 y 0x8 para asegurar la versión 4
            return value.toString(16); // Convierte a hexadecimal
          }
        );
      },
      formatTime: (seconds) => {
        seconds = parseInt(seconds) || 0;
        const h = Math.floor(seconds / 3600); // Calcular horas
        const m = Math.floor((seconds % 3600) / 60); // Calcular minutos
        const s = seconds % 60; // Calcular segundos restantes

        const parts = [];
        if (h > 0) parts.push(`${h}h`);
        if (m > 0 || h > 0) parts.push(`${m}m`); // Mostrar minutos si hay horas
        if (s > 0) parts.push(`${s}s`); // Mostrar minutos si hay horas

        return parts.join(" ");
      },
    },
    instances: {
      IntersectionObserver: new IntersectionObserver(
        (entries, observer) => {
          entries.forEach((entry) => {
            entry.target.dispatchEvent(
              new CustomEvent("_IntersectionObserver", {
                detail: {
                  entry,
                  observer,
                },
              })
            );
          });
        },
        { root: null, rootMargin: "0px", threshold: 0 }
      ),
    },
    fetchOptions: (options = {}) => {
      return {
        ...options,
        headers: {
          "Token-Auth": window.MyResourceClass.Cookie.get("auth_Mj8Q5q3"),
          ...(options?.headers ?? {}),
        },
        method: options?.method ?? "GET",
      };
    },
    MyClass: MyClass,
    MyFunction: MyFunction,

    iptv: {
      server: "https://593zona.live:8443",
      username: "CDSNJ7xstgS",
      password: "gkwT7heDNq",
    },
  };

  return dataApp;
};

// import eleConfirm from "../includes/eleConfirm";

var navigate = () => {
  const useApp = window.dataApp;
  const useThis = {
    routes: new useApp.MyClass.RouteHashCallback(),
    element: {
      textNode: document.createTextNode(""),
    },
  };

  const $element = useApp.MyFunction.createNodeElement(`
        <div class="div_kpAeq7EQQSpIEGP" >
            <div class="div_AzB9StLbTItJbDG">
                <div class="div_JJ29L3eoT4hcf1x">
                    <div id="links" class="div_ynsbf8jCYmc6NsK">
                        <a id="inicio" href="#/" class="button_vz3gd83JzdjM7pt">
                          ${useApp.svgIcon("fi fi-rr-house-blank")}
                        </a>
                        <a id="search" href="#/search" class="button_vz3gd83JzdjM7pt">
                          ${useApp.svgIcon("fi fi-rr-search")}
                        </a>
                        <a id="favorite" href="#/favorite" class="button_vz3gd83JzdjM7pt">
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-books"><path d="M23.786,19.492L16.713,1.836c-.624-1.529-2.376-2.269-3.911-1.645l-.925,.378c-.249,.102-.472,.244-.68,.402-.548-.594-1.326-.972-2.196-.972H3C1.346,0,0,1.346,0,3V21c0,1.654,1.346,3,3,3h6c1.654,0,3-1.346,3-3V8.895l5.304,13.242c.625,1.543,2.417,2.26,3.909,1.641l.926-.378c1.505-.574,2.286-2.434,1.647-3.907ZM13.574,7.446l2.778-1.132,4.171,10.412-2.778,1.132L13.574,7.446Zm-.942-5.025l.925-.378c.496-.206,1.097,.031,1.302,.543l.75,1.871-2.777,1.132-.747-1.866c-.208-.51,.038-1.095,.549-1.303ZM2,7h3v10H2V7Zm5,0h3v10h-3V7Zm3-4v2h-3V2h2c.551,0,1,.448,1,1ZM3,2h2v3H2V3c0-.552,.449-1,1-1Zm-1,19v-2h3v3H3c-.551,0-1-.448-1-1Zm7,1h-2v-3h3v2c0,.552-.449,1-1,1Zm12.929-.991c-.104,.247-.297,.438-.544,.539h0l-.926,.378c-.511,.206-1.095-.037-1.3-.54l-.669-1.671,2.778-1.132,.665,1.661c.102,.247,.101,.52-.003,.766Z"></path></svg>
                        </a>
                        <a id="profile" href="#/setting" class="button_vz3gd83JzdjM7pt">
                          ${useApp.svgIcon("fi fi-rr-user")}
                        </a>
                    </div>
                </div>
            </div>
        </div>    
    `);
  const $elements = useApp.MyFunction.createObjectElement(
    $element.querySelectorAll("[id]"),
    "id",
    true
  );

  useThis.routes.set([
    { hash: "/", callback: () => $elements.inicio },
    { hash: "/favorite", callback: () => $elements.favorite },
    { hash: "/historial", callback: () => $elements.favorite },
    { hash: "/search/*", callback: () => $elements.search },
    { hash: "/profile/*", callback: () => $elements.profile },
    { hash: "/setting/*", callback: () => $elements.profile },
    { hash: "/theme/*", callback: () => $elements.profile },
    { hash: "/login/*", callback: () => $elements.profile },
    { hash: "/register/*", callback: () => $elements.profile },
  ]);

  addEventListener("hashchange", () => {
    Array.from($elements.links.querySelectorAll("a.active")).forEach((a) =>
      a.classList.remove("active")
    );
    (useThis.routes.get() || document.createElement("a")).classList.add(
      "active"
    );
  });

  return $element;
};

var navigateBottom = () => {
  const useApp = window.dataApp;
  const useThis = {
    routes: new useApp.MyClass.RouteHashCallback(),
    element: {
      textNode: document.createTextNode(""),
    },
  };

  const $element = useApp.MyFunction.createNodeElement(`
        <div class="div_U1rCCk1">
            <div id="links" class="div_ZnL3gfK">
                <a id="inicio" href="#/">
                  ${useApp.svgIcon("fi fi-rr-house-blank")}
                </a>
                <a id="search" href="#/search" class="button_vz3gd83JzdjM7pt">
                  ${useApp.svgIcon("fi fi-rr-search")}
                </a>
                <a id="favorite" href="#/favorite" class="button_vz3gd83JzdjM7pt">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-books"><path d="M23.786,19.492L16.713,1.836c-.624-1.529-2.376-2.269-3.911-1.645l-.925,.378c-.249,.102-.472,.244-.68,.402-.548-.594-1.326-.972-2.196-.972H3C1.346,0,0,1.346,0,3V21c0,1.654,1.346,3,3,3h6c1.654,0,3-1.346,3-3V8.895l5.304,13.242c.625,1.543,2.417,2.26,3.909,1.641l.926-.378c1.505-.574,2.286-2.434,1.647-3.907ZM13.574,7.446l2.778-1.132,4.171,10.412-2.778,1.132L13.574,7.446Zm-.942-5.025l.925-.378c.496-.206,1.097,.031,1.302,.543l.75,1.871-2.777,1.132-.747-1.866c-.208-.51,.038-1.095,.549-1.303ZM2,7h3v10H2V7Zm5,0h3v10h-3V7Zm3-4v2h-3V2h2c.551,0,1,.448,1,1ZM3,2h2v3H2V3c0-.552,.449-1,1-1Zm-1,19v-2h3v3H3c-.551,0-1-.448-1-1Zm7,1h-2v-3h3v2c0,.552-.449,1-1,1Zm12.929-.991c-.104,.247-.297,.438-.544,.539h0l-.926,.378c-.511,.206-1.095-.037-1.3-.54l-.669-1.671,2.778-1.132,.665,1.661c.102,.247,.101,.52-.003,.766Z"></path></svg>
                </a>
                <a id="profile" href="#/setting" class="button_vz3gd83JzdjM7pt">
                  ${useApp.svgIcon("fi fi-rr-user")}
                </a>
            </div>
        </div>
    `);

  const $elements = useApp.MyFunction.createObjectElement(
    $element.querySelectorAll("[id]"),
    "id",
    true
  );

  useThis.routes.set([
    { hash: "/", callback: () => $elements.inicio },
    { hash: "/favorite", callback: () => $elements.favorite },
    { hash: "/historial", callback: () => $elements.favorite },
    { hash: "/search/*", callback: () => $elements.search },
    { hash: "/profile/*", callback: () => $elements.profile },
    { hash: "/setting/*", callback: () => $elements.profile },
    { hash: "/theme/*", callback: () => $elements.profile },
    { hash: "/login/*", callback: () => $elements.profile },
    { hash: "/register/*", callback: () => $elements.profile },
  ]);

  addEventListener("hashchange", () => {
    Array.from($elements.links.querySelectorAll("a.active")).forEach((a) =>
      a.classList.remove("active")
    );
    (useThis.routes.get() || document.createElement("a")).classList.add(
      "active"
    );
  });

  return $element;
};

var auth = () => {
  return new Promise((resolve, reject) => {
    const useApp = window.dataApp;

    const encodeQueryString = useApp.MyFunction.encodeQueryObject({
      route: "token.auth",
    });

    if (useApp.MyClass.Cookie.get(useApp.auth)) {
      return fetch(useApp.url.server(`/api.php?${encodeQueryString}`), {
        method: "GET",
        headers: {
          "Token-Auth": useApp.MyClass.Cookie.get(useApp.auth),
        },
      })
        .then((res) => res.json())
        .then((data) => {
          dispatchEvent(new CustomEvent("_auth", { detail: data }));
          resolve(data);
        })
        .catch(reject);
    }

    dispatchEvent(new CustomEvent("_auth", { detail: null }));
    resolve(null);
  });
};

var routesPrivate = (page = "") => {
  const useApp = window.dataApp;
  const $node = document.createTextNode("");

  auth().then((result) => {
    if (result?.status) {
      useApp.MyClass.Cookie.set(useApp.auth, result.token, {
        lifetime: 60 * 60 * 24 * 7,
      });
      return $node.replaceWith(page());
    }

    location.hash = "/login";
  });

  return $node;
};

var routesPublic = (page = "") => {
  const useApp = window.dataApp;
  const $node = document.createTextNode("");

  auth().then((result) => {
    if (!result?.status) {
      useApp.MyClass.Cookie.remove(useApp.auth, {});
      return $node.replaceWith(page());
    }

    location.hash = "/";
  });

  return $node;
};

var peliculaId = () => {
  const useApp = window.dataApp;
  const useThis = {
    params: useApp.routes.params(),
    // reactivity: {
    //   isFavorite: defineVal(false),
    //   isView: defineVal(false),
    //   load: defineVal(true),
    //   data: defineVal({}),
    // },
    functions: {},
    oValues: {
      favorite: useApp.MyFunction.observeValue(false),
      view: useApp.MyFunction.observeValue(false),
    },
    values: {
      isConnected: false,
      streaming: {},
      episode: 1,
      data_id: "",
      data: null,
      thisMovie: {},
    },
  };

  const $element = useApp.MyFunction.createNodeElement(`
    <div class="div_Xu02Xjh div_mrXVL9t" style="position:fixed">
         
        <header class="header_K0hs3I0 header_RtX3J1X">

            <div class="div_uNg74XS">
                <a href="#" class="button_lvV6qZu" data-history-back>
                  ${useApp.svgIcon("fi fi-rr-angle-small-left")}
                </a>  
            </div>
            <h2 id="textTitle" style="flex: 1; text-align:center; font-size: clamp(1rem, 2vw, 2rem);"></h2>
            <div id="divButton" class="div_x0cH0Hq">
                <button id="favorite" class="button_lvV6qZu" data-action="0">
                  ${useApp.svgIcon("fi fi-rr-heart")}
                </button>
            </div>

        </header>
        <div id="item" class="div_guZ6yID div_DtSQApy">
            <div id="itemNull" class="loader-i" style="--color:var(--app-color-letter)"></div>
            <div id="itemFalse" class="div_b14S3dH" style="display:none">
                ${useApp.svgIcon("fi fi-rr-search-alt")}
                <h3>La pelicula no existe</h3>
            </div> 
            <div id="itemTrue" class="div_hqzh2NV" style="display:none; padding:15px">

                <div class="div_cnJqhFl">
                  <div class="div_0JOSFlg">
                    <img id="poster" src="">
                  </div>
                  <div class="div_cxFXOaL">
                    <label class="label_zjZIMnZ">
                      <input type="checkbox" id="inputView">
                      <span style="display:flex"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-check"><path d="M22.319,4.431,8.5,18.249a1,1,0,0,1-1.417,0L1.739,12.9a1,1,0,0,0-1.417,0h0a1,1,0,0,0,0,1.417l5.346,5.345a3.008,3.008,0,0,0,4.25,0L23.736,5.847a1,1,0,0,0,0-1.416h0A1,1,0,0,0,22.319,4.431Z"></path></svg></span>
                    </label>
                    <button id="play" class="button_bDfhQ4b">
                      <small>
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-sr-play"><path d="M20.492,7.969,10.954.975A5,5,0,0,0,3,5.005V19a4.994,4.994,0,0,0,7.954,4.03l9.538-6.994a5,5,0,0,0,0-8.062Z"></path></svg>
                      </small>
                      <span>Reproducir</span>
                    </button>
                  </div>
                </div>
                
                <hr class="hr_nTfcjTI">
                <div class="div_BIchAsC">

                    <form class="app-form-label-checkbox" id="form-filter-type">
                      <label>
                        <input type="radio" name="key" value="information" checked>
                        <span>Detalles</span>
                      </label>
                      <label>
                        <input type="radio" name="key" value="similar">
                        <span>Otros</span>
                      </label>
                    </form>
                      
                </div>
                <hr class="hr_nTfcjTI">

                <div id="itemTrueInformation" class="div_cnJqhFl" >
                  <div class="div_aSwP0zW">
                      <span id="genres"></span>
                      <span id="duration"></span>
                      <span id="date"></span>
                  </div>
                  <p id="overview" style="font-size:14px"></p>
                </div>

                <div id="itemTrueSimilar" class="div_wNo9gA9" style="display:none; padding: 15px 0">
                  <div id="episodes" class="div_qsNmfP3" style="padding: 0"></div>
                </div>

            </div>
        </div>
        
        <div id="itemTrueOption" class="div_5Pe946IMjyL1Rs" popover>
            <div class="div_dsb3nhtCrFmUlSN p-10px">
                <div class="div_cXaADrL pointer-on">
                    <div id="itemTrueOptionVideos" class="div_lm2WViG"></div>
                </div>
            </div>
        </div>

        <div id="loaderVideo" class="div_uzuovb5" style="display:none">
        
          <div class="div_x8birmo">
            <div class="loader-i" style="--color:var(--app-color-letter)"></div>
            <span>cargando...</span>
          </div>

        </div>
    </div>
  `);

  const $elements = useApp.MyFunction.createObjectElement(
    $element.querySelectorAll("[id]"),
    "id",
    true
  );

  useThis.oValues.favorite.observe((boolean) => {
    $elements.favorite.innerHTML = useApp.svgIcon(
      boolean ? "fi fi-sr-heart" : "fi fi-rr-heart"
    );

    $elements.favorite.setAttribute("data-action", boolean ? 1 : 0);
  });

  useThis.oValues.view.observe((boolean) => {
    $elements.inputView.checked = boolean;
  });

  useThis.functions.dataRenderTrue = (data) => {
    const thisMovie = data.props.pageProps.thisMovie;
    const fromSecondsToTime = useApp.MyFunction.fromSecondsToTime(
      thisMovie.runtime * 60
    );

    const slug = thisMovie.url.slug
      .split("/")
      .map((name) => {
        if (name == "movies") return "pelicula";
        else if (name == "series") return "serie";
        else if (name == "seasons") return "temporada";
        else if (name == "episodes") return "episodio";
        return name;
      })
      .join("/");

    $elements.poster.src = useApp.url.img(
      thisMovie.images.poster.replace("/original/", "/w342/")
    );

    $elements.textTitle.textContent = thisMovie.titles.name;
    $elements.overview.textContent = thisMovie.overview;
    $elements.genres.textContent = thisMovie.genres
      .map((genre) => genre.name)
      .join(", ");

    $elements.duration.textContent = `${fromSecondsToTime.hours}h ${fromSecondsToTime.minutes}min`;
    $elements.date.textContent = new Date(thisMovie.releaseDate).getFullYear();

    $elements.play.style.display = "";
    $elements.play.setAttribute("data-data", JSON.stringify(thisMovie));
    $elements.play.setAttribute("data-slug", `https://cuevana.biz/${slug}`);

    useApp.mediaPlayer.info({
      title: thisMovie.titles.name,
      description: thisMovie.genres.map((genre) => genre.name).join(", "),
    });

    useApp.mediaPlayer.controls({
      options: {
        not: ["download"],
      },
    });

    useApp.MyClass.MyImage.canvas($elements.poster.src).then((result) => {
      const pixelData = result.ctx.getImageData(0, 0, 1, 1).data;
      const r = pixelData[0];
      const g = pixelData[1];
      const b = pixelData[2];

      const color = useApp.MyClass.MyColor.toDark({ rgb: [r, g, b] }, 50);

      $elements.itemTrueOptionVideos.parentElement.style.background =
        useApp.MyClass.MyColor.toDark({ rgb: [r, g, b] }, 60);

      useApp.elements.meta.color.setAttribute("content", color);
      $element.style.background = color;

      Android.colorSystemBar(color);
    });

    const objectMovies = Object.values(data.props.pageProps)
      .filter((value) => Array.isArray(value))
      .flat()
      .reduce((prev, curr) => {
        if (!prev[curr.TMDbId]) {
          prev[curr.TMDbId] = curr;
        }

        return prev;
      }, {});

    $elements.episodes.innerHTML = Object.values(objectMovies)
      .map((data) => {
        const type =
          data.url.slug.split("/")[0] == "movies" ? "pelicula" : "serie";

        if (data.images.poster == null) {
          return '<div style="display:none"></div>';
        }
        const url = data.images.poster.replace("/original/", "/w185/");

        return `
          <a
            href="#/${type}/${data.TMDbId}"
            class="div_SQpqup7"
            data-item>
              <div class="div_fMC1uk6">
                <img src="${url}" alt="">
                <span>${type}</span>
              </div>
              <div class="div_9nWIRZE">
                <p>${data.titles.name}</p>
              </div>
          </a>
        `;
      })
      .join("");

    useThis.functions.dataTrueInfo(thisMovie);

    $elements.itemNull.style.display = "none";
    $elements.itemTrue.style.display = "";
  };

  useThis.functions.dataTrueInfo = (data) => {
    useThis.values.data_id = data.TMDbId;

    const encodeQueryString = useApp.MyFunction.encodeQueryObject({
      route: "favorites-one",
      data_id: data.TMDbId,
      type: 2,
    });

    const body = {
      data_id: data.TMDbId,
      data_json: JSON.stringify(
        Object.entries(data).reduce((prev, curr) => {
          if (["TMDbId", "titles", "url", "images"].includes(curr[0])) {
            prev[curr[0]] = curr[1];
          }
          return prev;
        }, {})
      ),
      type: 2,
    };

    fetch(
      useApp.url.server(`/api.php?${encodeQueryString}`),
      useApp.fetchOptions({
        method: "POST",
        body: JSON.stringify(body),
      })
    )
      .then((res) => res.json())
      .then((data) => {
        useThis.values.streaming = data;
        $elements.favorite.style.visibility = "";
        useThis.values.isConnected = Boolean(data);

        if (useThis.values.isConnected) {
          useThis.oValues.favorite.value = Boolean(data?.favorite);
          useThis.oValues.view.value = Boolean(data?.view);
        }
      });
  };

  useThis.functions.getLinkServer = (url) => {
    const newURL = new URL(url);
    const hostSplit = newURL.host.split(".");
    const host = hostSplit.length == 3 ? hostSplit[1] : hostSplit[0];
    const mediaPlayer = useApp.mediaPlayer;

    if (["streamwish"].includes(host)) {
      MediaWebUrl.streamwish({ url: url }).then((res) => {
        $elements.loaderVideo.style.display = "none";
        if (res.status) {
          Android.openWithDefault(res.url, "video/*");
          return;
        } else alert("Video no disponible");
      });
    } else if (["voe"].includes(host)) {
      MediaWebUrl.voesx({ url: url }).then((res) => {
        if (res.status) {
          Android.openWithDefault(res.url, "video/*");
          return;
        } else alert("Video no disponible");
      });
    } else if (["doodstream"].includes(host)) {
      MediaWebUrl.doodstream({ url: url }).then((res) => {
        if (res.status) {
          Android.openWithDefault(res.url, "video/*");
          return;
        } else alert("Video no disponible");
      });
    } else if (["yourupload"].includes(host)) {
      MediaWeb.yourupload({ url: url }).then((res) => {
        if (res.body.status) {
          mediaPlayer.video((video) => {
            video.src = res.body.url;
          });
        } else alert("Video no disponible");
      });
    }
  };

  useThis.functions.dataTrue = () => {
    ApiWebCuevana.peliculaId(useThis.params.id).then((data) => {
      useThis.values.data = data;
      useThis.values.thisMovie = data.props.pageProps.thisMovie;
      useThis.functions.dataRenderTrue(data);
    });
  };

  useThis.functions.updateHistory = (currentTime, duration = 0) => {
    console.log("visto");
    console.log(useThis.values.isConnected);
    if (useThis.values.isConnected) {
      const encodeQueryString = useApp.MyFunction.encodeQueryObject({
        route: "update-history-view",
        episode: useThis.values.episode,
        time_view: currentTime,
        time_duration: duration,
        datetime: Date.now(),
        data_id: useThis.values.data_id,
        type: 2,
      });

      fetch(
        useApp.url.server(`/api.php?${encodeQueryString}`),
        useApp.fetchOptions({
          method: "GET",
        })
      );
    }
  };

  useThis.functions.updateHistoryVideo = () => {
    useApp.mediaPlayer.video((video) => {
      let times = {};
      let status = false;

      video.src = "";

      video.onloadedmetadata = () => {
        times = {};
        status = false;

        const currentTime =
          parseInt(
            useThis.values.streaming?.episodes?.[useThis.values.episode]
              ?.time_view
          ) || 0;

        video.currentTime = currentTime;
      };

      video.ontimeupdate = (e) => {
        if (status) {
          const num = Math.floor(e.target.currentTime);

          if (num > 0 && num % 15 == 0 && !times[num]) {
            times[num] = true;
            useThis.functions.updateHistory(
              num,
              Math.ceil(video.duration) || 0
            );
          }
        }
      };

      video.onseeked = () => {
        const currentTime = Math.floor(video.currentTime);
        useThis.functions.updateHistory(
          currentTime,
          Math.ceil(video.duration) || 0
        );

        times = {};
        times[currentTime] = true;

        status = true;
      };
    });
  };

  $elements.play.addEventListener("click", () => {
    const data = JSON.parse($elements.play.getAttribute("data-data"));
    $elements.itemTrueOption.showPopover();

    $elements.itemTrueOptionVideos.innerHTML =
      '<div class="loader-i m-auto g-col-full" style="--color:#fff; padding: 20px 0"></div>';

    Promise.all([
      // add more aditional server,
      data.videos,
    ]).then((res) => {
      const mergedObject = res.reduce((acc, obj) => ({ ...acc, ...obj }), {});

      $elements.itemTrueOptionVideos.innerHTML = Object.entries(mergedObject)
        .map((data) => {
          let show = true;

          return data[1]
            .map((video) => {
              if (video.result == "") return "";
              if (!["streamwish"].includes(video.cyberlocker)) return "";

              const visibility = show ? "" : "display:none";
              show = false;

              return `
                <span 
                  class="span_eNUkEzu" 
                  style="${visibility}">
                  ${data[0].slice(0, 3).toUpperCase()}
                </span>
                <button 
                  class="button_NuUj5A6" 
                  data-type="" 
                  data-url="${video.result}" 
                  data-quality="">
                    
                    <div class="div_Z8bTLpN">
                        <span>${video.cyberlocker}</span>
                        <p>${video.quality}</p>
                    </div>
                    
                </button>
              `;
            })
            .join("");
        })
        .join("");
    });
  });

  $elements.favorite.addEventListener("click", () => {
    // if (!useThis.values.isConnected) {
    //   return (location.hash = "#/login");
    // }
    useThis.oValues.favorite.value = !useThis.oValues.favorite.value;

    const encodeQueryString = useApp.MyFunction.encodeQueryObject({
      route: "toggle-favorites",
      data_id: useThis.values.thisMovie.TMDbId,
      type: 2,
      action: $elements.favorite.dataset.action,
    });

    fetch(
      useApp.url.server(`/api.php?${encodeQueryString}`),
      useApp.fetchOptions({
        method: "GET",
      })
    )
      .then((res) => res.json())
      .then((data) => {
        if (data == null) {
          location.hash = "#/login";
          return;
        }

        if (data?.status) {
          useThis.oValues.favorite.value = data.type == 1;
        }
      });
  });

  $elements.inputView.addEventListener("change", () => {
    // if (!useThis.values.isConnected) {
    //   return (location.hash = "#/login");
    // }

    // useThis.oValues.view.value = !useThis.oValues.view.value;

    const encodeQueryString = useApp.MyFunction.encodeQueryObject({
      route: "toggle-views",
      data_id: useThis.values.thisMovie.TMDbId,
      type: 2,
      action: $elements.inputView.checked ? 1 : 0,
    });

    fetch(
      useApp.url.server(`/api.php?${encodeQueryString}`),
      useApp.fetchOptions({
        method: "GET",
      })
    )
      .then((res) => res.json())
      .then((data) => {
        if (data == null) {
          location.hash = "#/login";
          return;
        }

        if (data?.status) {
          $elements.inputView.checked = data.type == 1;
        }
      });
  });

  $elements.itemTrueOptionVideos.addEventListener("click", (e) => {
    const button = e.target.closest("button");
    if (button) {
      $elements.itemTrueOption.hidePopover();

      $elements.loaderVideo.style.display = "";
      ApiWebCuevana.serverUrl(button.getAttribute("data-url")).then((url) => {
        useThis.functions.getLinkServer(url);
      });

      // useApp.mediaPlayer.element().requestFullscreen();
      // useThis.functions.updateHistoryVideo();

      if ("mediaSession" in navigator) {
        navigator.mediaSession.metadata = new MediaMetadata({
          title: $elements.textTitle.textContent,
          artist: $elements.genres.textContent,
          album: "Pelicula",
          artwork: [
            {
              src: $elements.poster.src,
              sizes: "512x512",
              type: "image/png",
            },
          ],
        });
      }
    }
  });

  $elements.itemTrueOption.addEventListener("click", (e) => {
    if (e.target === e.currentTarget) {
      $elements.itemTrueOption.hidePopover();
    }
  });

  $elements["form-filter-type"].addEventListener("change", () => {
    const value = $elements["form-filter-type"].key.value;

    const elements = {
      information: $elements.itemTrueInformation,
      similar: $elements.itemTrueSimilar,
    };

    Object.entries(elements).forEach((entries) => {
      entries[1].style.display = entries[0] == value ? "" : "none";
    });
  });

  useApp.elements.meta.color.setAttribute("content", "#000000");
  useThis.functions.dataTrue();

  useApp.functions.historyBack($element.querySelector("[data-history-back]"));

  Android.colorSystemBar("#000000");

  return $element;
};

var serieId = () => {
  const useApp = window.dataApp;
  const useThis = {
    params: useApp.routes.params(),
    functions: {},
    oValues: {
      isFavorite: useApp.MyFunction.observeValue(false),
      isView: useApp.MyFunction.observeValue(false),
      episodes: useApp.MyFunction.observeValue([]),
    },
    values: {
      dataInfo: null,
      isConnected: false,
      observes: [],
      streaming: {},
      episode: -1,
      data_id: "",
      data: null,
      thisSerie: {},
    },
  };

  const $element = useApp.MyFunction.createNodeElement(`
    <div class="div_Xu02Xjh div_mrXVL9t" style="position:fixed">
        <header class="header_K0hs3I0 header_XpmKRuK header_RtX3J1X">

            <div class="div_uNg74XS">
                <a href="#" class="button_lvV6qZu" data-history-back>
                  ${useApp.svgIcon("fi fi-rr-angle-small-left")}
                </a>
            </div>
            <h2 id="title" style="flex: 1; text-align:center; font-size: clamp(1rem, 2vw, 2rem);"></h2>
            <div class="div_x0cH0Hq">
                <button id="favorite" class="button_lvV6qZu" data-action="0">
                  ${useApp.svgIcon("fi fi-rr-heart")}
                </button>
            </div>

        </header>

        <div id="item" class="div_guZ6yID div_DtSQApy" >
            <div id="itemNull" class="loader-i" style="--color:var(--app-color-letter)"></div>
            <div id="itemFalse" class="div_b14S3dH" style="display:none">
                ${useApp.svgIcon("fi fi-rr-search-alt")}
                <h3>La pelicula no existe</h3>
            </div>
            <div id="itemTrue" class="div_hqzh2NV" style="display:none; padding:15px">

                <div class="div_cnJqhFl">
                  <div class="div_0JOSFlg">
                    <img id="poster" src="">
                  </div>
                  <div class="div_cxFXOaL">
                    <label class="label_zjZIMnZ">
                      <input type="checkbox" id="inputView">
                      <span style="display:flex"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-check"><path d="M22.319,4.431,8.5,18.249a1,1,0,0,1-1.417,0L1.739,12.9a1,1,0,0,0-1.417,0h0a1,1,0,0,0,0,1.417l5.346,5.345a3.008,3.008,0,0,0,4.25,0L23.736,5.847a1,1,0,0,0,0-1.416h0A1,1,0,0,0,22.319,4.431Z"></path></svg></span>
                    </label>
                    <button id="play" class="button_bDfhQ4b" style="display:none">
                      <small>
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-sr-play"><path d="M20.492,7.969,10.954.975A5,5,0,0,0,3,5.005V19a4.994,4.994,0,0,0,7.954,4.03l9.538-6.994a5,5,0,0,0,0-8.062Z"></path></svg>
                      </small>
                      <span>Reproducir</span>
                    </button>
                  </div>
                </div>

                <hr class="hr_nTfcjTI">
                <div class="div_BIchAsC">

                    <form class="app-form-label-checkbox" id="form-filter-type">
                      <label>
                        <input type="radio" name="key" value="information" checked>
                        <span>Detalles</span>
                      </label>
                      <label>
                        <input type="radio" name="key" value="chapter">
                        <span>Capitulos</span>
                      </label>
                      <label>
                        <input type="radio" name="key" value="similar">
                        <span>Otros</span>
                      </label>
                    </form>
                      
                </div>
                <hr class="hr_nTfcjTI">

                <div id="itemTrueInformation" class="div_cnJqhFl" >
                  <div class="div_aSwP0zW">
                      <span id="genres"></span>
                      <span id="duration"></span>
                      <span id="date"></span>
                  </div>
                  <p id="overview" style="font-size:14px"></p>
                </div>

                <div id="itemTrueChapter" class="div_rJOqfX3" style="display:none">
                    <div class="div_mu7pmfs">
                      <div class="div_xesi90n">
                        <select id="selectSeason">
                          <option>Temporada 1</option>
                        </select>
                        <button id="buttonSeasonOrder">
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-sort-alt"><path d="M11.293,17.707l-3.293,3.293V1c0-.553-.447-1-1-1s-1,.447-1,1V21l-3.293-3.293c-.391-.391-1.023-.391-1.414,0s-.391,1.023,0,1.414l4.293,4.293c.39,.39,.902,.585,1.414,.585s1.024-.195,1.414-.585l4.293-4.293c.391-.391,.391-1.023,0-1.414s-1.023-.391-1.414,0ZM22.707,6.293c.391-.391,.391-1.023,0-1.414L18.414,.586C18.024,.196,17.512,0,17,0s-1.024,.195-1.414,.585l-4.293,4.293c-.391,.391-.391,1.023,0,1.414s1.023,.391,1.414,0l3.293-3.293V23c0,.553,.447,1,1,1s1-.447,1-1V3l3.293,3.293c.391,.391,1.023,.391,1.414,0Z"></path></svg>
                        </button>
                      </div>
                    </div>
                    <div id="episodes" class="div_bi3qmqX" data-class="div_2cD7Iqb"></div>
                </div>

                <div id="itemTrueSimilar" class="div_wNo9gA9" style="display:none; padding: 15px 0">
                  <div id="similar" class="div_qsNmfP3" style="padding: 0"></div>
                </div>
                
            </div>
        </div>
       
        <div id="itemTrueOption" class="div_5Pe946IMjyL1Rs" popover>
            <div class="div_dsb3nhtCrFmUlSN p-10px">
                <div class="div_cXaADrL pointer-on">
                    <div id="itemTrueOptionVideos" class="div_lm2WViG"></div>
                </div>
            </div>
        </div>

        <div id="loaderVideo" class="div_uzuovb5" style="display:none">
        
          <div class="div_x8birmo">
            <div class="loader-i" style="--color:var(--app-color-letter)"></div>
            <span>cargando...</span>
          </div>

        </div>
    </div>
`);

  const $elements = useApp.MyFunction.createObjectElement(
    $element.querySelectorAll("[id]"),
    "id",
    true
  );

  useThis.oValues.isFavorite.observe((boolean) => {
    $elements.favorite.innerHTML = useApp.svgIcon(
      boolean ? "fi fi-sr-heart" : "fi fi-rr-heart"
    );
  });

  useThis.oValues.isView.observe((boolean) => {
    $elements.inputView.checked = boolean;
  });

  useThis.functions.dataRenderTrue = (data) => {
    const thisSerie = data.props.pageProps.thisSerie;

    $elements.poster.src = useApp.url.img(
      thisSerie.images.poster.replace("/original/", "/w342/")
    );

    $elements.title.textContent = thisSerie.titles.name;
    $elements.overview.textContent = thisSerie.overview;
    $elements.genres.textContent = thisSerie.genres
      .map((genre) => genre.name)
      .join(", ");
    $elements.duration.textContent = `${
      thisSerie.seasons.at(-1).number
    } temporadas`;
    $elements.date.textContent = new Date(thisSerie.releaseDate).getFullYear();

    const seasons = thisSerie.seasons.filter(
      (season) => season.episodes.length
    );

    const objectMovies = Object.values(data.props.pageProps)
      .filter((value) => Array.isArray(value))
      .flat()
      .reduce((prev, curr) => {
        if (!prev[curr.TMDbId] && curr.TMDbId != data.TMDbId) {
          prev[curr.TMDbId] = curr;
        }

        return prev;
      }, {});

    $elements.similar.innerHTML = Object.values(objectMovies)
      .map((data) => {
        const type =
          data.url.slug.split("/")[0] == "movies" ? "pelicula" : "serie";

        if (data.images.poster == null) {
          return '<div style="display:none"></div>';
        }
        const url = data.images.poster.replace("/original/", "/w185/");

        return `
          <a
            href="#/${type}/${data.TMDbId}"
            class="div_SQpqup7"
            data-item>
              <div class="div_fMC1uk6">
                <img src="${url}" alt="">
                <span>${type}</span>
              </div>
              <div class="div_9nWIRZE">
                <p>${data.titles.name}</p>
              </div>
          </a>
        `;
      })
      .join("");

    $elements.selectSeason.innerHTML = seasons
      .map((season, index) => {
        return `
          <option value="${index}">Temporada ${season.number}</option>
        `;
      })
      .join("");

    useThis.functions.renderSeason();

    useApp.MyClass.MyImage.canvas($elements.poster.src).then((result) => {
      const pixelData = result.ctx.getImageData(0, 0, 1, 1).data;
      const r = pixelData[0];
      const g = pixelData[1];
      const b = pixelData[2];

      const color = useApp.MyClass.MyColor.toDark({ rgb: [r, g, b] }, 50);

      $elements.itemTrueOptionVideos.parentElement.style.background =
        useApp.MyClass.MyColor.toDark({ rgb: [r, g, b] }, 60);

      useApp.elements.meta.color.setAttribute("content", color);
      $element.style.background = color;

      Android.colorSystemBar(color);
    });

    useThis.functions.dataTrueInfo(thisSerie);

    $elements.itemNull.style.display = "none";
    $elements.itemTrue.style.display = "";
  };

  useThis.functions.dataTrueInfo = (data) => {
    useThis.values.data_id = data.TMDbId;

    const encodeQueryString = useApp.MyFunction.encodeQueryObject({
      route: "favorites-one",
      data_id: data.TMDbId,
      type: 3,
    });

    const body = {
      data_id: data.TMDbId,
      data_json: JSON.stringify(
        Object.entries(data).reduce((prev, curr) => {
          if (["TMDbId", "titles", "url", "images"].includes(curr[0])) {
            prev[curr[0]] = curr[1];
          }
          return prev;
        }, {})
      ),
      type: 3,
    };

    fetch(
      useApp.url.server(`/api.php?${encodeQueryString}`),
      useApp.fetchOptions({
        method: "POST",
        body: JSON.stringify(body),
      })
    )
      .then((res) => res.json())
      .then((data) => {
        useThis.values.streaming = data;
        $elements.favorite.style.visibility = "";
        useThis.values.isConnected = Boolean(data);

        if (useThis.values.isConnected) {
          useThis.oValues.isFavorite.value = Boolean(data?.favorite);
          useThis.oValues.isView.value = Boolean(data?.view);

          useThis.functions.renderSeason();
        }
      });
  };

  useThis.functions.renderSeason = (index = 0) => {
    const seasons = useThis.values.thisSerie.seasons.filter(
      (season) => season.episodes.length
    );

    const episodes = seasons[index].episodes;
    const season = seasons[index].number;

    const array = episodes;

    $elements.episodes.innerHTML = array
      .map((episode) => {
        const episodeInfo =
          useThis.values.streaming?.episodes?.[`${season}-${episode.number}`];

        const dataData = useApp.MyClass.EncodeTemplateString.toInput(
          JSON.stringify(episode)
        );

        const checked = episodeInfo != undefined ? "checked" : "";
        const displayInput = useThis.values.isConnected ? "" : "display:none";

        return `
          <div data-episode="${episode.number}" class="div_eGwK6I1">
            <button 
            class="button_fk0VHgU" 
              data-data="${dataData}" 
              data-season="${season}"
              data-episode="${episode.number}"
              data-item>
                <span>
                  T${season.toString().padStart(2, "0")} 
                  E${episode.number.toString().padStart(2, "0")}
                </span>
                <small>
                  ${
                    parseInt(episodeInfo?.time_view)
                      ? "visto ".concat(
                          useApp.functions.formatTime(episodeInfo.time_view)
                        )
                      : ""
                  }
                  ${
                    parseInt(episodeInfo?.time_duration)
                      ? "de ".concat(
                          useApp.functions.formatTime(episodeInfo.time_duration)
                        )
                      : ""
                  }
                </small>
            </button>
            <label class="label_zjZIMnZ" style="${displayInput}">
              <input type="checkbox" 
                data-season="${season}" 
                data-episode="${episode.number}" ${checked}>
              <span style="display:flex"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-check"><path d="M22.319,4.431,8.5,18.249a1,1,0,0,1-1.417,0L1.739,12.9a1,1,0,0,0-1.417,0h0a1,1,0,0,0,0,1.417l5.346,5.345a3.008,3.008,0,0,0,4.25,0L23.736,5.847a1,1,0,0,0,0-1.416h0A1,1,0,0,0,22.319,4.431Z"></path></svg></span>
            </label>
          </div>
        `;
      })
      .join("");

    if (!episodes.length) {
      $elements.episodes.innerHTML = `
        <div class="div_Qm4cPUn">
          <div id="itemFalse" class="div_b14S3dH">
            ${useApp.svgIcon("fi fi-rr-search-alt")}
            <h3>No hay capitulos</h3>
          </div>
        </div>
      `;
    }
  };

  useThis.functions.setLinkServer = (url) => {
    const newURL = new URL(url);
    const hostSplit = newURL.host.split(".");
    const host = hostSplit.length == 3 ? hostSplit[1] : hostSplit[0];

    const mediaPlayer = useApp.mediaPlayer;

    if (["streamwish"].includes(host)) {
      MediaWebUrl.streamwish({ url: url }).then((res) => {
        $elements.loaderVideo.style.display = "none";
        if (res.status) {
          Android.openWithDefault(res.url, "video/*");
          return;
        } else alert("Video no disponible");
      });
    } else if (["voe"].includes(host)) {
      MediaWebUrl.voesx({ url: url }).then((res) => {
        $elements.loaderVideo.style.display = "none";
        if (res.status) {
          Android.openWithDefault(res.url, "video/*");
          return;
        } else alert("Video no disponible");
      });
    } else if (["doodstream"].includes(host)) {
      MediaWebUrl.doodstream({ url: url }).then((res) => {
        $elements.loaderVideo.style.display = "none";
        if (res.body.status) {
          Android.openWithDefault(res.url, "video/*");
          return;
        } else alert("Video no disponible");
      });
    } else if (["yourupload"].includes(host)) {
      MediaWeb.yourupload({ url: url }).then((res) => {
        if (res.body.status) {
          mediaPlayer.video((video) => {
            video.src = res.body.url;
          });
        } else alert("Video no disponible");
      });
    }
  };

  useThis.functions.dataTrue = () => {
    ApiWebCuevana.serieId(useThis.params.id).then((data) => {
      useThis.values.data = data;
      useThis.values.thisSerie = data.props.pageProps.thisSerie;

      useThis.functions.dataRenderTrue(data);
    });
  };

  useThis.functions.unobserve = () => {
    for (const observe of useThis.values.observes) {
      useApp.instances.IntersectionObserver.unobserve(observe);
    }

    useThis.values.observes = [];
  };

  useThis.functions.updateHistory = (currentTime, duration = 0) => {
    if (useThis.values.isConnected) {
      const encodeQueryString = useApp.MyFunction.encodeQueryObject({
        route: "update-history-view",
        episode: useThis.values.episode,
        time_view: currentTime,
        time_duration: duration,
        datetime: Date.now(),
        data_id: useThis.values.data_id,
        type: 3,
      });

      fetch(
        useApp.url.server(`/api.php?${encodeQueryString}`),
        useApp.fetchOptions({
          method: "GET",
        })
      )
        .then((res) => res.json())
        .then((data) => {
          if (data?.status) {
            if (document.body.contains($element)) {
              useThis.functions.dataTrueInfo(useThis.values.thisSerie);
            }
          }
        });
    }
  };

  useThis.functions.updateHistoryVideo = () => {
    useApp.mediaPlayer.video((video) => {
      let times = {};
      let status = false;

      video.src = "";

      video.onloadedmetadata = () => {
        times = {};
        status = false;

        const currentTime =
          parseInt(
            useThis.values.streaming?.episodes?.[useThis.values.episode]
              ?.time_view
          ) || 0;

        video.currentTime = currentTime;
      };

      video.ontimeupdate = (e) => {
        if (status) {
          const num = Math.floor(e.target.currentTime);

          if (num > 0 && num % 15 == 0 && !times[num]) {
            times[num] = true;
            useThis.functions.updateHistory(
              num,
              Math.ceil(video.duration) || 0
            );
          }
        }
      };

      video.onseeked = () => {
        const currentTime = Math.floor(video.currentTime);
        useThis.functions.updateHistory(
          currentTime,
          Math.ceil(video.duration) || 0
        );

        times = {};
        times[currentTime] = true;

        status = true;
      };
    });
  };

  $elements.selectSeason.addEventListener("change", () => {
    useThis.functions.renderSeason($elements.selectSeason.value);
  });

  $elements.buttonSeasonOrder.addEventListener("click", () => {
    $elements.episodes.append(
      ...Array.from($elements.episodes.children).reverse()
    );
  });

  $elements.episodes.addEventListener("click", (e) => {
    const item = e.target.closest("[data-item]");
    const input = e.target.closest("input");

    if (item) {
      $elements.itemTrueOption.showPopover();
      $elements.itemTrueOptionVideos.setAttribute(
        "data-episode",
        `${item.dataset.season}-${item.dataset.episode}`
      );
      $elements.itemTrueOptionVideos.innerHTML =
        '<div class="loader-i m-auto g-col-full" style="--color:#fff; padding: 20px 0"></div>';

      ApiWebCuevana.serieId(
        useThis.params.id,
        item.getAttribute("data-season"),
        item.getAttribute("data-episode")
      ).then((response) => {
        useThis.values.dataInfo = response;
        $elements.itemTrueOptionVideos.innerHTML = Object.entries(
          response.props.pageProps.episode.videos
        )
          .map((data) => {
            let show = true;

            return data[1]
              .map((video) => {
                if (video.result == "") return "";
                if (!["streamwish"].includes(video.cyberlocker)) return "";

                const visibility = show ? "" : "display:none";
                show = false;

                return `
                  <span 
                    class="span_eNUkEzu" 
                    style="${visibility}">
                      ${data[0].slice(0, 3).toUpperCase()}
                  </span>
                  <button 
                    class="button_NuUj5A6" 
                    data-type="" 
                    data-url="${video.result}" 
                    data-quality="">
                      
                      <div class="div_Z8bTLpN">
                          <span>${video.cyberlocker}</span>
                          <p>${video.quality}</p>
                      </div>
                      
                  </button>
              `;
              })
              .join("");
          })
          .join("");
      });
    }

    if (input) {
      const encodeQueryString = useApp.MyFunction.encodeQueryObject({
        route: "toggle-history-view",
        episode: `${input.dataset.season}-${input.dataset.episode}`,
        datetime: Date.now(),
        data_id: useThis.values.data_id,
        type: 3,
        action: input.checked ? 1 : 0,
      });

      fetch(
        useApp.url.server(`/api.php?${encodeQueryString}`),
        useApp.fetchOptions({
          method: "GET",
        })
      )
        .then((res) => res.json())
        .then((data) => {
          if (data?.status) {
            input.checked = data.type == 1;
          }
        });
    }
  });

  $elements.favorite.addEventListener("click", () => {
    $elements.favorite.setAttribute(
      "data-action",
      $elements.favorite.getAttribute("data-action") != 0 ? 0 : 1
    );

    // if (!useThis.values.isConnected) {
    //   return (location.hash = "#/login");
    // }

    useThis.oValues.isFavorite.value = !useThis.oValues.isFavorite.value;

    const encodeQueryString = useApp.MyFunction.encodeQueryObject({
      route: "toggle-favorites",
      data_id: useThis.values.thisSerie.TMDbId,
      type: 3,
      action: $elements.favorite.dataset.action,
    });

    fetch(
      useApp.url.server(`/api.php?${encodeQueryString}`),
      useApp.fetchOptions({
        method: "GET",
      })
    )
      .then((res) => res.json())
      .then((data) => {
        if (data == null) {
          location.hash = "#/login";
          return;
        }

        if (data?.status) {
          useThis.oValues.isFavorite.value = data.type == 1;
        }
      });
  });

  $elements.inputView.addEventListener("click", () => {
    // if (!useThis.values.isConnected) {
    //   return (location.hash = "#/login");
    // }

    const encodeQueryString = useApp.MyFunction.encodeQueryObject({
      route: "toggle-views",
      data_id: useThis.values.thisSerie.TMDbId,
      type: 3,
      action: $elements.inputView.checked ? 1 : 0,
    });

    fetch(
      useApp.url.server(`/api.php?${encodeQueryString}`),
      useApp.fetchOptions({
        method: "GET",
      })
    )
      .then((res) => res.json())
      .then((data) => {
        if (data == null) {
          location.hash = "#/login";
          return;
        }

        if (data?.status) {
          $elements.inputView.checked = data.type == 1;
        }
      });
  });

  $elements.itemTrueOptionVideos.addEventListener("click", (e) => {
    const button = e.target.closest("button");
    if (button) {
      useThis.values.episode = $elements.itemTrueOptionVideos.dataset.episode;
      const [season, episode] = useThis.values.episode.split("-");

      $elements.itemTrueOption.hidePopover();
      // useApp.mediaPlayer.element().requestFullscreen();
      // useThis.functions.updateHistoryVideo();

      useApp.mediaPlayer.info({
        title: useThis.values.dataInfo.props.pageProps.episode.title,
        description: useThis.values.dataInfo.props.pageProps.serie.genres
          .map((genre) => genre.name)
          .join(", "),
      });

      useApp.mediaPlayer.controls({
        options: {
          not: ["download"],
        },
      });

      $elements.loaderVideo.style.display = "";

      ApiWebCuevana.serverUrl(button.getAttribute("data-url")).then((url) => {
        useThis.functions.setLinkServer(url);
      });

      if ("mediaSession" in navigator) {
        navigator.mediaSession.metadata = new MediaMetadata({
          title: $elements.title.textContent,
          artist: `T${season.padStart(2, "0")} E${episode.padStart(2, "0")}`,
          album: "Serie",
          artwork: [
            {
              src: $elements.poster.src,
              sizes: "512x512",
              type: "image/png",
            },
          ],
        });
      }
    }
  });

  $elements.itemTrueOption.addEventListener("click", (e) => {
    if (e.target === e.currentTarget) {
      $elements.itemTrueOption.hidePopover();
    }
  });

  $elements["form-filter-type"].addEventListener("change", () => {
    const value = $elements["form-filter-type"].key.value;

    const elements = {
      information: $elements.itemTrueInformation,
      chapter: $elements.itemTrueChapter,
      similar: $elements.itemTrueSimilar,
    };

    Object.entries(elements).forEach((entries) => {
      entries[1].style.display = entries[0] == value ? "" : "none";
    });
  });

  addEventListener(
    "hashchange",
    () => {
      useThis.functions.unobserve();
    },
    { once: true }
  );

  useApp.elements.meta.color.setAttribute("content", "#000000");
  useThis.functions.dataTrue();

  useApp.functions.historyBack($element.querySelector("[data-history-back]"));

  Android.colorSystemBar("#000000");

  return $element;
};

var animeId = () => {
  const useApp = window.dataApp;
  const useThis = {
    params: useApp.routes.params(),
    oValues: {
      isFavorite: useApp.MyFunction.observeValue(false),
      isView: useApp.MyFunction.observeValue(false),
      episodes: useApp.MyFunction.observeValue([]),
    },
    functions: {},
    values: {
      video: null,
      isConnected: false,
      streaming: {},
      episode: -1,
      data_id: "",
      data: null,
      thisAnime: {},
    },
    url: {
      fetch: (url) => {
        return `https://fetch.vniox.com/get.php?url=${encodeURIComponent(url)}`;
      },
    },
  };

  const $element = useApp.MyFunction.createNodeElement(`
    <div class="div_Xu02Xjh div_mrXVL9t" style="position:fixed">

          <header class="header_K0hs3I0 header_RtX3J1X">

              <div class="div_uNg74XS">
                  <a href="#" class="button_lvV6qZu" data-history-back>
                    ${useApp.svgIcon("fi fi-rr-angle-small-left")}
                  </a>
              </div>

              <h2 id="title" style="flex: 1; text-align:center; font-size: clamp(1rem, 2vw, 2rem);"></h2>

              <div class="div_x0cH0Hq">
                  <button id="favorite" class="button_lvV6qZu">
                    ${useApp.svgIcon("fi fi-rr-heart")}
                  </button>
              </div>

          </header>

          <div class="div_guZ6yID div_DtSQApy">
              <div id="itemNull" class="loader-i" style="--color:var(--app-color-letter)"></div>
              <div id="itemFalse" class="div_b14S3dH" style="display:none">
                  ${useApp.svgIcon("fi fi-rr-search-alt")}
                  <h3>La pelicula no existe</h3>
              </div>

              <div id="itemTrue" class="div_hqzh2NV" style="display:none; padding:15px">

                  <div class="div_cnJqhFl">
                    <div class="div_0JOSFlg">
                      <img id="poster" src="">
                    </div>
                    <div class="div_cxFXOaL">
                      <label class="label_zjZIMnZ">
                        <input type="checkbox" id="inputView">
                        <span style="display:flex"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-check"><path d="M22.319,4.431,8.5,18.249a1,1,0,0,1-1.417,0L1.739,12.9a1,1,0,0,0-1.417,0h0a1,1,0,0,0,0,1.417l5.346,5.345a3.008,3.008,0,0,0,4.25,0L23.736,5.847a1,1,0,0,0,0-1.416h0A1,1,0,0,0,22.319,4.431Z"></path></svg></span>
                      </label>
                      <button id="play" class="button_bDfhQ4b" style="display:none">
                        <small>
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-sr-play"><path d="M20.492,7.969,10.954.975A5,5,0,0,0,3,5.005V19a4.994,4.994,0,0,0,7.954,4.03l9.538-6.994a5,5,0,0,0,0-8.062Z"></path></svg>
                        </small>
                        <span>Reproducir</span>
                      </button>
                    </div>
                  </div>

                  <hr class="hr_nTfcjTI">
                  <div class="div_BIchAsC">

                      <form class="app-form-label-checkbox" id="form-filter-type">
                        <label>
                          <input type="radio" name="key" value="information" checked>
                          <span>Detalles</span>
                        </label>
                        <label>
                          <input type="radio" name="key" value="chapter">
                          <span>Capitulos</span>
                        </label>
                        <label>
                          <input type="radio" name="key" value="similar">
                          <span>Otros</span>
                        </label>
                      </form>
                        
                  </div>
                  <hr class="hr_nTfcjTI">

                  <div id="itemTrueInformation" class="div_cnJqhFl" >
                    <div class="div_aSwP0zW">
                        <span id="nextEpisode"></span>
                        <span id="genres"></span>
                        <span id="duration"></span>
                        <span id="date"></span>
                    </div>
                    <p id="overview" style="font-size:14px"></p>
                  </div>

                  <div id="itemTrueChapter" class="div_692wB8" style="display:none">
                      <div class="div_mu7pmfs">
                        <div class="div_xesi90n">
                          <select id="selectSeason">
                            <option>Temporada 1</option>
                          </select>
                          <button id="buttonSeasonOrder">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-sort-alt"><path d="M11.293,17.707l-3.293,3.293V1c0-.553-.447-1-1-1s-1,.447-1,1V21l-3.293-3.293c-.391-.391-1.023-.391-1.414,0s-.391,1.023,0,1.414l4.293,4.293c.39,.39,.902,.585,1.414,.585s1.024-.195,1.414-.585l4.293-4.293c.391-.391,.391-1.023,0-1.414s-1.023-.391-1.414,0ZM22.707,6.293c.391-.391,.391-1.023,0-1.414L18.414,.586C18.024,.196,17.512,0,17,0s-1.024,.195-1.414,.585l-4.293,4.293c-.391,.391-.391,1.023,0,1.414s1.023,.391,1.414,0l3.293-3.293V23c0,.553,.447,1,1,1s1-.447,1-1V3l3.293,3.293c.391,.391,1.023,.391,1.414,0Z"></path></svg>
                          </button>
                        </div>
                      </div>
                      <div id="episodes" class="div_bi3qmqX"></div>
                  </div>

                  <div id="itemTrueSimilar" class="div_wNo9gA9" style="display:none; padding: 15px 0">
                    <div id="similar" class="div_qsNmfP3" style="padding: 0"></div>
                  </div>

              </div>
          </div>

          <div id="itemTrueOption" class="div_5Pe946IMjyL1Rs" popover>
              <div class="div_dsb3nhtCrFmUlSN p-10px">
                  <div class="div_cXaADrL pointer-on">
                      <div id="itemTrueOptionVideos" class="div_lm2WViG"></div>
                  </div>
              </div>
          </div>

          <div id="loaderVideo" class="div_uzuovb5" style="display:none">
        
            <div class="div_x8birmo">
              <div class="loader-i" style="--color:var(--app-color-letter)"></div>
              <span>cargando...</span>
            </div>

          </div>
      </div>
  `);

  const $elements = useApp.MyFunction.createObjectElement(
    $element.querySelectorAll("[id]"),
    "id",
    true
  );

  useThis.oValues.isFavorite.observe((boolean) => {
    $elements.favorite.innerHTML = useApp.svgIcon(
      boolean ? "fi fi-sr-heart" : "fi fi-rr-heart"
    );

    $elements.favorite.setAttribute("data-action", boolean ? 1 : 0);
  });

  useThis.oValues.isView.observe((boolean) => {
    $elements.inputView.checked = boolean;
  });

  useThis.oValues.episodes.observe((array) => {
    $elements.episodes.innerHTML = array
      .map((episode) => {
        const episodeInfo = useThis.values.streaming?.episodes?.[episode];

        const checked = episodeInfo != undefined ? "checked" : "";

        const displayInput = useThis.values.isConnected ? "" : "display:none";

        return `
          <div data-episode="${episode}" class="div_eGwK6I1">
            <button 
              class="button_fk0VHgU" 
              data-slug="${useThis.params.id}-${episode}" 
              data-title="${useThis.params.id}" 
              data-description="episodio ${episode}" 
              data-episode="${episode}"
              data-item>
                <span>Episodio ${episode}</span>
                <small>
                  ${
                    parseInt(episodeInfo?.time_view)
                      ? "visto ".concat(
                          useApp.functions.formatTime(episodeInfo.time_view)
                        )
                      : ""
                  }
                  ${
                    parseInt(episodeInfo?.time_duration)
                      ? "de ".concat(
                          useApp.functions.formatTime(episodeInfo.time_duration)
                        )
                      : ""
                  }
                </small>
            </button>
            <label class="label_zjZIMnZ" style="${displayInput}">
              <input type="checkbox" data-episode="${episode}" ${checked}>
              <span style="display:flex"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-check"><path d="M22.319,4.431,8.5,18.249a1,1,0,0,1-1.417,0L1.739,12.9a1,1,0,0,0-1.417,0h0a1,1,0,0,0,0,1.417l5.346,5.345a3.008,3.008,0,0,0,4.25,0L23.736,5.847a1,1,0,0,0,0-1.416h0A1,1,0,0,0,22.319,4.431Z"></path></svg></span>
            </label>
          </div>
        `;
      })
      .join("");
  });

  useThis.functions.dataRenderTrue = (data) => {
    const episode_length = data.episodes;

    $elements.poster.src = useApp.url.img(data.poster);
    $elements.title.textContent = data.title;
    $elements.overview.textContent = data.overview;

    $elements.genres.textContent = data.genres.map((genre) => genre).join(", ");
    $elements.duration.textContent = `${episode_length} episodios`;
    $elements.date.textContent = data.status;
    $elements.nextEpisode.innerHTML = data.nextEpisode
      ? `(nuevo episodio el <b>${data.nextEpisode}<b>)`
      : "";

    $elements.selectSeason.innerHTML = Array(
      Math.floor(episode_length / 50) + 1
    )
      .fill(null)
      .map((_, index, array) => {
        const end =
          array[index + 1] !== undefined ? index * 50 + 50 : episode_length;
        const start = index * 50 + 1;
        return `
            <option value="${start}-${end || 50}">
              ${start} - ${end || 50}
            </option>
          `;
      })
      .join("");

    $elements.similar.innerHTML = data.related
      .map((data) => {
        const url = useApp.url.img(data.poster);
        return `
            <a
              href="#/anime/${data.identifier}"
              class="div_SQpqup7" data-item>
                <div class="div_fMC1uk6">
                  <img src="${url}" alt="">
                  <span>${data.type ?? ""}</span>
                </div>
                <div class="div_9nWIRZE">
                  <p>${data.title}</p>
                </div>
            </a>
          `;
      })
      .join("");

    useThis.oValues.episodes.value = Array(Math.min(50, data.episodes))
      .fill()
      .map((_, i) => i + 1);

    useApp.MyClass.MyImage.canvas($elements.poster.src).then((result) => {
      const pixelData = result.ctx.getImageData(0, 0, 1, 1).data;
      const r = pixelData[0];
      const g = pixelData[1];
      const b = pixelData[2];

      const color = useApp.MyClass.MyColor.toDark({ rgb: [r, g, b] }, 50);

      $elements.itemTrueOptionVideos.parentElement.style.background =
        useApp.MyClass.MyColor.toDark({ rgb: [r, g, b] }, 60);

      useApp.elements.meta.color.setAttribute("content", color);
      $element.style.background = color;

      Android.colorSystemBar(color);
    });

    useThis.functions.dataTrueInfo(data);

    $elements.itemNull.style.display = "none";
    $elements.itemTrue.style.display = "";
  };

  useThis.functions.setLinkServer = (url) => {
    const newURL = new URL(url);
    const hostSplit = newURL.host.split(".");
    const host = hostSplit.length == 3 ? hostSplit[1] : hostSplit[0];
    useApp.mediaPlayer;

    if (["streamwish"].includes(host)) {
      MediaWebUrl.streamwish({ url: url }).then((res) => {
        $elements.loaderVideo.style.display = "none";
        if (res.status) {
          Android.openWithDefault(res.url, "video/*");
          return;
        } else alert("Video no disponible");
      });
    } else if (["voe"].includes(host)) {
      MediaWebUrl.voesx({ url: url }).then((res) => {
        if (res.status) {
          Android.openWithDefault(res.url, "video/*");
          return;
        } else alert("Video no disponible");
      });
    } else if (["doodstream"].includes(host)) {
      MediaWebUrl.doodstream({ url: url }).then((res) => {
        if (res.body.status) {
          Android.openWithDefault(res.url, "video/*");
          return;
        } else alert("Video no disponible");
      });
    } else if (["yourupload"].includes(host)) {
      MediaWeb.yourupload({ url: url }).then((res) => {
        if (res.body.status) {
          Android.openWithDefault(res.url, "video/*");
          return;
        } else alert("Video no disponible");
      });
    }
  };

  useThis.functions.dataTrue = () => {
    ApiWebAnimeflv.identifier(useThis.params.id).then((data) => {
      useThis.values.data = data;
      useThis.values.thisAnime = data;
      useThis.functions.dataRenderTrue(data);
    });
  };

  useThis.functions.dataTrueInfo = (data) => {
    const data_id = parseInt(data.poster.split("/").pop());
    useThis.values.data_id = data_id;

    const body = {
      data_id: data_id,
      data_json: JSON.stringify(
        Object.entries(data).reduce(
          (prev, curr) => {
            if (["identifier", "title", "poster", "type"].includes(curr[0])) {
              prev[curr[0]] = curr[1];
            }
            return prev;
          },
          {
            id: data_id,
          }
        )
      ),
      type: 1,
    };

    fetch(
      useApp.url.server(
        `/api.php?route=favorites-one&type=1&data_id=${data_id}`
      ),
      useApp.fetchOptions({
        method: "POST",
        body: JSON.stringify(body),
      })
    )
      .then((res) => res.json())
      .then((data) => {
        useThis.values.streaming = data;
        $elements.favorite.style.visibility = "";
        useThis.values.isConnected = Boolean(data);

        if (useThis.values.isConnected) {
          useThis.oValues.isFavorite.value = Boolean(data?.favorite);
          useThis.oValues.isView.value = Boolean(data?.view);

          useThis.oValues.episodes.value = [...useThis.oValues.episodes.value];
        }
      });
  };

  useThis.functions.updateHistory = (currentTime, duration = 0) => {
    if (useThis.values.isConnected) {
      const encodeQueryString = useApp.MyFunction.encodeQueryObject({
        route: "update-history-view",
        episode: useThis.values.episode,
        time_view: currentTime,
        time_duration: duration,
        datetime: Date.now(),
        data_id: useThis.values.data_id,
        type: 1,
      });

      fetch(
        useApp.url.server(`/api.php?${encodeQueryString}`),
        useApp.fetchOptions({
          method: "GET",
        })
      )
        .then((res) => res.json())
        .then((data) => {
          if (data?.status) {
            if (document.body.contains($element)) {
              useThis.functions.dataTrueInfo(useThis.values.thisAnime);
            }
          }
        });
    }
  };

  useThis.functions.updateHistoryVideo = () => {
    useApp.mediaPlayer.video((video) => {
      let times = {};
      let status = false;

      video.src = "";

      video.onloadedmetadata = () => {
        times = {};
        status = false;

        const currentTime =
          parseInt(
            useThis.values.streaming?.episodes?.[useThis.values.episode]
              ?.time_view
          ) || 0;

        video.currentTime = currentTime;
        useThis.functions.dataTrueInfo(useThis.values.thisAnime);
      };

      video.ontimeupdate = (e) => {
        if (status) {
          const num = Math.floor(e.target.currentTime);

          if (num > 0 && num % 30 == 0 && !times[num]) {
            times[num] = true;
            useThis.functions.updateHistory(
              num,
              Math.ceil(video.duration) || 0
            );
          }
        }
      };

      video.onseeked = () => {
        const currentTime = Math.floor(video.currentTime);
        useThis.functions.updateHistory(
          currentTime,
          Math.ceil(video.duration) || 0
        );

        times = {};
        times[currentTime] = true;

        status = true;
      };
    });
  };

  $elements.episodes.addEventListener("click", (e) => {
    const item = e.target.closest("[data-item]");
    const input = e.target.closest("input");

    if (item) {
      $elements.itemTrueOption.showPopover();

      $elements.itemTrueOptionVideos.setAttribute(
        "data-episode",
        item.dataset.episode
      );

      $elements.itemTrueOptionVideos.innerHTML =
        '<div class="loader-i m-auto g-col-full" style="--color:#fff; padding: 20px 0"></div>';

      useApp.mediaPlayer.info({
        title: item.getAttribute("data-title").split("-").join(" "),
        description: item.getAttribute("data-description"),
      });

      useApp.mediaPlayer.controls({
        options: {
          not: ["download"],
        },
      });

      ApiWebAnimeflv.identifier(
        useThis.params.id,
        item.getAttribute("data-episode")
      ).then((videos) => {
        $elements.itemTrueOptionVideos.innerHTML = Object.entries(videos)
          .map((data) => {
            let show = true;

            return data[1]
              .map((video, index) => {
                if (index == 0) return "";
                if (!["sw"].includes(video.server)) return "";

                const visibility = show ? "" : "display:none";
                show = false;

                return `
                  <span 
                    class="span_eNUkEzu" 
                    style="${visibility}">
                      ${data[0].slice(0, 3).toUpperCase()}
                  </span>
                  <button 
                    class="button_NuUj5A6" 
                    data-type="" 
                    data-url="${video.code}" 
                    data-quality="">
                      
                      <div class="div_Z8bTLpN">
                          <span>${video.title}</span>
                          <p>${video.server}</p>
                      </div>
                      
                  </button>
              `;
              })
              .join("");
          })
          .join("");
      });
    }

    if (input) {
      // useThis.values.episode = input.dataset.episode;

      const encodeQueryString = useApp.MyFunction.encodeQueryObject({
        route: "toggle-history-view",
        episode: input.dataset.episode,
        datetime: Date.now(),
        data_id: useThis.values.data_id,
        type: 1,
        action: input.checked ? 1 : 0,
      });

      fetch(
        useApp.url.server(`/api.php?${encodeQueryString}`),
        useApp.fetchOptions({
          method: "GET",
        })
      )
        .then((res) => res.json())
        .then((data) => {
          if (data?.status) {
            input.checked = data.type == 1;
          }
        });
    }
  });

  $elements.favorite.addEventListener("click", () => {
    // if (!useThis.values.isConnected) {
    //   return (location.hash = "#/login");
    // }

    useThis.oValues.isFavorite.value = !useThis.oValues.isFavorite.value;

    const encodeQueryString = useApp.MyFunction.encodeQueryObject({
      route: "toggle-favorites",
      data_id: useThis.values.data_id,
      type: 1,
      action: $elements.favorite.dataset.action,
    });

    fetch(
      useApp.url.server(`/api.php?${encodeQueryString}`),
      useApp.fetchOptions({
        method: "GET",
      })
    )
      .then((res) => res.json())
      .then((data) => {
        if (data == null) {
          location.hash = "#/login";
          return;
        }

        if (data?.status) {
          useThis.oValues.isFavorite.value = data.type == 1;
        }
      });
  });

  $elements.inputView.addEventListener("change", () => {
    // if (!useThis.values.isConnected) {
    //   return (location.hash = "#/login");
    // }

    // useThis.oValues.isFavorite.value = !useThis.oValues.isFavorite.value;

    const encodeQueryString = useApp.MyFunction.encodeQueryObject({
      route: "toggle-views",
      data_id: useThis.values.data_id,
      type: 1,
      action: $elements.inputView.checked ? 1 : 0,
    });

    fetch(
      useApp.url.server(`/api.php?${encodeQueryString}`),
      useApp.fetchOptions({
        method: "GET",
      })
    )
      .then((res) => res.json())
      .then((data) => {
        if (data == null) {
          location.hash = "#/login";
          return;
        }

        if (data?.status) {
          useThis.oValues.isView.value = data.type == 1;
        }
      });
  });

  $elements.itemTrueOptionVideos.addEventListener("click", (e) => {
    const button = e.target.closest("button");
    if (button) {
      $elements.loaderVideo.style.display = "";

      useThis.values.episode = $elements.itemTrueOptionVideos.dataset.episode;

      $elements.itemTrueOption.hidePopover();
      setTimeout(() =>
        useThis.functions.setLinkServer(button.getAttribute("data-url"))
      );

      // useApp.mediaPlayer.element().requestFullscreen();
      // useThis.functions.updateHistoryVideo();

      if ("mediaSession" in navigator) {
        navigator.mediaSession.metadata = new MediaMetadata({
          title: $elements.title.textContent,
          artist: `Episodio ${useThis.values.episode}`,
          album: "Anime",
          artwork: [
            {
              src: $elements.poster.src,
              sizes: "512x512",
              type: "image/png",
            },
          ],
        });
      }
    }
  });

  $elements.itemTrueOption.addEventListener("click", (e) => {
    if (e.target === e.currentTarget) {
      $elements.itemTrueOption.hidePopover();
    }
  });

  $elements["form-filter-type"].addEventListener("change", () => {
    const value = $elements["form-filter-type"].key.value;

    const elements = {
      information: $elements.itemTrueInformation,
      chapter: $elements.itemTrueChapter,
      similar: $elements.itemTrueSimilar,
    };

    Object.entries(elements).forEach((entries) => {
      entries[1].style.display = entries[0] == value ? "" : "none";
    });
  });

  $elements.selectSeason.addEventListener("change", () => {
    const [start, end] = $elements.selectSeason.value
      .split("-")
      .map((str) => parseInt(str));

    useThis.oValues.episodes.value = useApp.MyClass.MyArray.range(start, end);
  });

  $elements.buttonSeasonOrder.addEventListener("click", () => {
    $elements.episodes.append(
      ...Array.from($elements.episodes.children).reverse()
    );
  });

  useApp.elements.meta.color.setAttribute("content", "#000000");
  useThis.functions.dataTrue();

  useApp.functions.historyBack($element.querySelector("[data-history-back]"));

  Android.colorSystemBar("#000000");

  return $element;
};

var gendersAnime = [
  "Acción",
  "Artes Marciales",
  "Aventuras",
  "Carreras",
  "Ciencia Ficción",
  "Comedia",
  "Demencia",
  "Demonios",
  "Deportes",
  "Drama",
  "Ecchi",
  "Escolares",
  "Espacial",
  "Fantasía",
  "Harem",
  "Historico",
  "Infantil",
  "Josei",
  "Juegos",
  "Magia",
  "Mecha",
  "Militar",
  "Misterio",
  "Música",
  "Parodia",
  "Policía",
  "Psicológico",
  "Recuentos de la vida",
  "Romance",
  "Samurai",
  "Seinen",
  "Shoujo",
  "Shounen",
  "Sobrenatural",
  "Superpoderes",
  "Suspenso",
  "Terror",
  "Vampiros",
  "Yaoi",
  "Yuri",
];

var gendersPelicula = [
  "Accion",
  "Aventura",
  "Animacion",
  "Ciencia ficcion",
  "Crimen",
  "Drama",
  "Familia",
  "Fantasia",
  "Misterio",
  "Romance",
  "Suspense",
  "Terror",
];

var inicio = () => {
  const useApp = window.dataApp;
  const useThis = {
    params: useApp.routes.params(),

    oValues: {
      dataNull: useApp.MyFunction.observeValue(true),
      dataTrue: useApp.MyFunction.observeValue([]),
      dataTrueGender: useApp.MyFunction.observeValue([
        { value: "", string: "Todos" },
        { value: "-1", string: "Ultimos episodios" },
        { value: "-2", string: "Ultimos animes" },
        ...gendersAnime.map((string) => {
          return {
            value: string.split(" ").join("-").toLocaleLowerCase(),
            string,
          };
        }),
      ]),
    },
    values: {
      observes: [],
    },
    function: {
      dataLoad: () => {},
    },
    functions: {},
    promises: {
      genderPelicula: new Promise((resolve, reject) => {
        fetch(
          `${useApp.iptv.server}/player_api.php?username=${useApp.iptv.username}&password=${useApp.iptv.password}&action=get_vod_categories`
        )
          .then((res) => res.json())
          .then(resolve)
          .catch(reject);
      }),
      genderSerie: new Promise((resolve, reject) => {
        fetch(
          `${useApp.iptv.server}/player_api.php?username=${useApp.iptv.username}&password=${useApp.iptv.password}&action=get_series_categories`
        )
          .then((res) => res.json())
          .then(resolve)
          .catch(reject);
      }),
      genderLive: new Promise((resolve, reject) => {
        fetch(
          `${useApp.iptv.server}/player_api.php?username=${useApp.iptv.username}&password=${useApp.iptv.password}&action=get_live_categories`
        )
          .then((res) => res.json())
          .then(resolve)
          .catch(reject);
      }),
    },
  };

  const $element = useApp.MyFunction.createNodeElement(
    ((_) => `

      <div class="div_Xu02Xjh">

        <header class="header_K0hs3I0">

            <div class="div_uNg74XS">
              <div class="div_sZZicpN">
                <h3 id="h3Title">Inicio</h3>
                <span id="genderText">todos</span>
              </div>
            </div>

            <div class="div_x0cH0Hq">
              <div class="div_klylpyg">
                <small>
                  ${useApp.svgIcon("fi fi-rr-filter")}
                </small>
                <select id="selectGender">
                  <option selected>Todos</option>
                </select>
              </div>
            </div>

        </header>


        <div class="div_BIchAsC">

            <form class="app-form-label-checkbox" id="form-filter-type" name="form-filter-type">
              <label>
                <input type="radio" name="key" value="1" checked>
                <span>Animes</span>
              </label>
              <label>
                <input type="radio" name="key" value="2">
                <span>Peliculas</span>
              </label>
              <label>
                <input type="radio" name="key" value="3">
                <span>Series</span>
              </label>
              <label>
                <input type="radio" name="key" value="4">
                <span>Peliculas II</span>
              </label>
              <label>
                <input type="radio" name="key" value="5">
                <span>Series II</span>
              </label>
              <label>
                <input type="radio" name="key" value="6">
                <span>Canales</span>
              </label>
            </form>
              
        </div>
    
        <div class="div_IsTCHpN">
            <div id="itemNull" class="loader-i" style="--color:var(--app-color-letter)"></div>
            <div id="itemFalse" class="div_b14S3dH" style="display:none">
                ${useApp.svgIcon("fi fi-rr-search-alt")}
                <h3>sin resultados</h3>
            </div>
            <div id="itemTrue" class="div_qsNmfP3" style="display:none">
                <div id="itemTrueLoad" class="div_Qm4cPUn">
                    <div class="loader-i" style="--color:var(--color-letter)"></div>
                </div>
            </div>
        </div>

      </div>

  `)({
      href: ["#", "search", useThis.params.type, useThis.params.result].join(
        "/"
      ),
      title: "Inicio" ,
      description: useThis.params.type,
      hidden: "display:none",
    })
  );

  const $elements = useApp.MyFunction.createObjectElement(
    $element.querySelectorAll("[id]"),
    "id",
    true
  );

  $elements.itemTrueLoad.addEventListener(
    "_IntersectionObserver",
    ({ detail }) => {
      if (detail.entry.isIntersecting) {
        detail.observer.unobserve(detail.entry.target);
        useThis.functions.dataTrue();
      }
    }
  );

  $elements.selectGender.addEventListener("change", () => {
    $elements.itemTrue.innerHTML = "";
    useThis.oValues.dataNull.value = true;

    $elements.genderText.textContent =
      $elements.selectGender.selectedOptions[0].innerText;

    useThis.functions.dataTrue();
  });

  $elements["form-filter-type"].addEventListener("change", async () => {
    const type = $elements["form-filter-type"].key.value;

    $elements.itemTrue.innerHTML = "";
    useThis.oValues.dataNull.value = true;

    const array = [{ value: "", string: "Todos" }];

    if (type == 1) {
      array.push(
        { value: "-1", string: "Ultimos episodios" },
        { value: "-2", string: "Ultimos animes" },
        ...gendersAnime.map((string) => {
          return {
            value: string.split(" ").join("-").toLocaleLowerCase(),
            string,
          };
        })
      );
    }

    if (type == 2) {
      array.push(
        ...gendersPelicula.map((string) => {
          return {
            value: string.split(" ").join("-").toLocaleLowerCase(),
            string,
          };
        })
      );
    }

    if (type == 4) {
      array.push(
        ...(await useThis.promises.genderPelicula)
          .map((string) => {
            return {
              value: string.category_id,
              string: string.category_name,
            };
          })
          .filter((object) => !["53"].includes(object.value))
      );
    }

    if (type == 5) {
      array.push(
        ...(await useThis.promises.genderSerie)
          .map((string) => {
            return {
              value: string.category_id,
              string: string.category_name,
            };
          })
          .filter((object) => !["429"].includes(object.value))
      );
    }

    if (type == 6) {
      array.push(
        ...(await useThis.promises.genderLive)
          .map((string) => {
            return {
              value: string.category_id,
              string: string.category_name,
            };
          })
          .filter((object) => !["12", "410", "413"].includes(object.value))
      );
    }

    useThis.oValues.dataTrueGender.value = array;
    useThis.functions.dataTrue();
  });

  $elements.itemTrue.addEventListener("click", (e) => {
    const button = e.target.closest("button");

    if (button) {
      const data = JSON.parse(button.getAttribute("data-data"));
      Android.openWithDefault(
        `${useApp.iptv.server}/live/${useApp.iptv.username}/${useApp.iptv.password}/${data.stream_id}.ts`,
        "video/*"
      );
    }
  });

  useThis.oValues.dataNull.observe((load) => {
    const dataItem = $elements.itemTrue.querySelector("[data-item]");

    const render = {
      itemNull: load,
      itemFalse: !load && !dataItem,
      itemTrue: !load && !!dataItem,
    };

    Object.entries(render).forEach((entries) => {
      $elements[entries[0]].style.display = entries[1] ? "" : "none";
    });
  });

  useThis.oValues.dataTrue.observe((array) => {
    if (array.length) {
      const type = $elements["form-filter-type"].key.value;

      if (["4", "5"].includes(type)) {
        return useThis.functions.dataRenderIptv(array);
      }

      if (["2", "3"].includes(type)) {
        return useThis.functions.dataRenderPeliculaSerie(array);
      }

      if (type == "1") {
        return useThis.functions.dataRenderAnime(array);
      }

      if (type == "6") {
        return useThis.functions.dataRenderIptvChannel(array);
      }
    }
  });

  useThis.oValues.dataTrueGender.observe((array) => {
    $elements.selectGender.innerHTML = array
      .map((object) => {
        return `<option value="${object.value}">${object.string}</option>`;
      })
      .join("");

    $elements.genderText.textContent =
      $elements.selectGender.selectedOptions[0].innerText;
  });

  useThis.functions.dataRenderAnime = (array) => {
    const template = document.createElement("div");

    template.innerHTML = array
      .map((data) => {
        const url = useApp.url.img(data.poster);
        const episode = `episodio ${data.episode}`;

        const aspectRatio = data.episode ? "aspect-ratio:3/2" : "";

        return `
          <a
            href="#/anime/${data.identifier}"
            class="div_SQpqup7" data-item>
              <div class="div_fMC1uk6" style="${aspectRatio}">
                <img src="" alt="" data-src="${url}" style="display:none">
                <span>${data.type ?? episode}</span>
              </div>
              <div class="div_9nWIRZE">
                <p>${data.title}</p>
              </div>
          </a>
        `;
      })
      .join("");

    $elements.itemTrue.append(
      ...Array.from(template.children).map((child) => {
        child.addEventListener("_IntersectionObserver", ({ detail }) => {
          if (detail.entry.isIntersecting) {
            detail.observer.unobserve(detail.entry.target);
            const img = child.querySelector("img");
            img.onload = () => (img.style.display = "");
            img.src = img.dataset.src;
          }
        });

        useApp.instances.IntersectionObserver.observe(child);
        useThis.values.observes.push(child);

        return child;
      })
    );

    $elements.itemTrueLoad.remove();

    if (array.length == 24) {
      $elements.itemTrue.append($elements.itemTrueLoad);
      useApp.instances.IntersectionObserver.observe($elements.itemTrueLoad);
    }
  };

  useThis.functions.dataRenderPeliculaSerie = (array) => {
    const type =
      $elements["form-filter-type"].key.value == "2" ? "pelicula" : "serie";

    const template = document.createElement("div");

    template.innerHTML = array
      .map((data) => {
        if (data.images.poster == null) {
          return '<div style="display:none"></div>';
        }
        const url = data.images.poster.replace("/original/", "/w185/");

        return `
          <a
            href="#/${type}/${data.TMDbId}"
            class="div_SQpqup7"
            data-item>
              <div class="div_fMC1uk6">
                <img src="" alt="" data-src="${url}" style="display:none">
                <span style="display:none">${type}</span>
              </div>
              <div class="div_9nWIRZE">
                <p>${data.titles.name}</p>
              </div>
          </a>
        `;
      })
      .join("");

    $elements.itemTrue.append(
      ...Array.from(template.children).map((child) => {
        if (child.tagName == "A") {
          child.addEventListener("_IntersectionObserver", ({ detail }) => {
            if (detail.entry.isIntersecting) {
              detail.observer.unobserve(detail.entry.target);
              const img = child.querySelector("img");
              img.onload = () => (img.style.display = "");
              img.src = img.dataset.src;
            }
          });

          useApp.instances.IntersectionObserver.observe(child);
          useThis.values.observes.push(child);
        }

        return child;
      })
    );

    $elements.itemTrueLoad.remove();

    if (array.length == 24) {
      $elements.itemTrue.append($elements.itemTrueLoad);
      useApp.instances.IntersectionObserver.observe($elements.itemTrueLoad);
    }
  };

  useThis.functions.dataRenderIptv = (array) => {
    const types = {
      4: "pelicula-ii",
      5: "serie-ii",
    };

    const type = types[$elements["form-filter-type"].key.value];
    const template = document.createElement("div");

    template.innerHTML = array
      .map((data) => {
        const url = useApp.url.img(data.stream_icon ?? data.cover);

        // const episode = `episodio ${data.episode}`;
        // const aspectRatio = type == "6" ? "aspect-ratio:1/1" : "";

        return `
          <a
            href="#/${type}/${data.stream_id ?? data.series_id}"
            class="div_SQpqup7" data-item>
              <div class="div_fMC1uk6">
                <img src="" alt="" data-src="${url}" style="display:none">
                <span style="display:none"></span>
              </div>
              <div class="div_9nWIRZE">
                <p>${data.name}</p>
              </div>
          </a>
        `;
      })
      .join("");

    $elements.itemTrue.append(
      ...Array.from(template.children).map((child) => {
        child.addEventListener("_IntersectionObserver", ({ detail }) => {
          if (detail.entry.isIntersecting) {
            detail.observer.unobserve(detail.entry.target);
            const img = child.querySelector("img");
            img.onload = () => (img.style.display = "");
            img.src = img.dataset.src;
          }
        });

        useApp.instances.IntersectionObserver.observe(child);
        useThis.values.observes.push(child);

        return child;
      })
    );

    $elements.itemTrueLoad.remove();

    if (array.length == 50) {
      $elements.itemTrue.append($elements.itemTrueLoad);
      useApp.instances.IntersectionObserver.observe($elements.itemTrueLoad);
    }
  };

  useThis.functions.dataRenderIptvChannel = (array) => {
    const template = document.createElement("div");

    template.innerHTML = array
      .map((data) => {
        const url = useApp.url.img(data.stream_icon ?? data.cover);

        const dataInput = useApp.MyClass.EncodeTemplateString.toInput(
          JSON.stringify(data)
        );

        return `
          <button
            class="div_SQpqup7" 
            data-data="${dataInput}"
            data-item>
              <div class="div_fMC1uk6" style="aspect-ratio:1/1">
                <img src="" alt="" data-src="${url}" style="display:none">
                <span style="display:none"></span>
              </div>
              <div class="div_9nWIRZE">
                <p>${data.name}</p>
              </div>
          </button>
        `;
      })
      .join("");

    $elements.itemTrue.append(
      ...Array.from(template.children).map((child) => {
        child.addEventListener("_IntersectionObserver", ({ detail }) => {
          if (detail.entry.isIntersecting) {
            detail.observer.unobserve(detail.entry.target);
            const img = child.querySelector("img");
            img.onload = () => (img.style.display = "");
            img.src = img.dataset.src;
          }
        });

        useApp.instances.IntersectionObserver.observe(child);
        useThis.values.observes.push(child);

        return child;
      })
    );

    $elements.itemTrueLoad.remove();

    if (array.length == 50) {
      $elements.itemTrue.append($elements.itemTrueLoad);
      useApp.instances.IntersectionObserver.observe($elements.itemTrueLoad);
    }
  };

  /** Nuevo */

  useThis.functions.dataTrueAnime = () => {
    const page =
      Math.floor(
        $elements.itemTrue.querySelectorAll("[data-item]").length / 24
      ) + 1;

    const genreArray = [];

    const genreString = $elements.selectGender.value;

    if (genreString != "") {
      genreArray.push(genreString);
    }

    if (["-1", "-2"].includes(genreString)) {
      return ApiWebAnimeflv.home().then((object) => {
        useThis.oValues.dataNull.value = true;
        useThis.oValues.dataTrue.value =
          genreString == "-1" ? object.episodes : object.animes;
        useThis.oValues.dataNull.value = false;
      });
    }

    ApiWebAnimeflv.search({ page, genre: genreArray }).then((array) => {
      useThis.oValues.dataNull.value = true;
      useThis.oValues.dataTrue.value = array;
      useThis.oValues.dataNull.value = false;
    });
  };

  useThis.functions.dataTruePelicula = () => {
    const page =
      Math.floor(
        $elements.itemTrue.querySelectorAll("[data-item]").length / 23
      ) + 1;

    const gender = $elements.selectGender.value;

    ApiWebCuevana.pelicula(page, gender).then((data) => {
      useThis.oValues.dataNull.value = true;
      useThis.oValues.dataTrue.value = data?.props?.pageProps?.movies ?? [];
      useThis.oValues.dataNull.value = false;
    });
  };

  useThis.functions.dataTrueSerie = () => {
    const page =
      Math.floor(
        $elements.itemTrue.querySelectorAll("[data-item]").length / 24
      ) + 1;

    ApiWebCuevana.serie(page).then((data) => {
      useThis.oValues.dataNull.value = true;
      useThis.oValues.dataTrue.value = data?.props?.pageProps?.movies ?? [];
      useThis.oValues.dataNull.value = false;
    });
  };

  useThis.functions.dataTrueIptv = () => {
    const types = {
      4: "pelicula",
      5: "serie",
      6: "live",
    };

    const gender = $elements.selectGender.value;
    const type = types[$elements["form-filter-type"].key.value];

    const length = $elements.itemTrue.querySelectorAll("[data-item]").length;

    const encodeQueryString = useApp.MyFunction.encodeQueryObject({
      route: type,
      category: gender,
      start: length,
      end: 50,
    });

    fetch(`https://api.vniox.com/iptv/api.php?${encodeQueryString}`)
      .then((res) => res.json())
      .then((data) => {
        useThis.oValues.dataNull.value = true;
        useThis.oValues.dataTrue.value = data ?? [];
        useThis.oValues.dataNull.value = false;
      });
  };

  useThis.functions.dataTrue = () => {
    const type = $elements["form-filter-type"].key.value;

    const types = {
      1: useThis.functions.dataTrueAnime,
      2: useThis.functions.dataTruePelicula,
      3: useThis.functions.dataTrueSerie,
      4: useThis.functions.dataTrueIptv,
      5: useThis.functions.dataTrueIptv,
      6: useThis.functions.dataTrueIptv,
    };

    types?.[type]?.();
  };

  useThis.functions.dataTrue();

  return $element;
};

var offline = ()=>{
    const $element  = createNodeElement(`
        <div class="offline">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="512" height="512"><path d="M14,19c0,1.1-.9,2-2,2s-2-.9-2-2,.9-2,2-2,2,.9,2,2ZM1.33,7.07c-.37,.33-.73,.69-1.07,1.05-.38,.4-.35,1.04,.05,1.41,.19,.18,.44,.27,.68,.27,.27,0,.54-.11,.73-.32,.3-.32,.61-.63,.93-.92,.41-.37,.45-1,.08-1.41-.37-.41-1-.45-1.41-.08Zm5.05,4.84c-.4,.31-.77,.65-1.11,1.02-.38,.41-.35,1.04,.05,1.41,.19,.18,.44,.27,.68,.27,.27,0,.54-.11,.73-.32,.27-.29,.56-.56,.87-.8,.44-.34,.52-.97,.18-1.4-.34-.44-.97-.52-1.4-.18Zm7.21,.26c1.39,.32,2.68,1.06,3.66,2.11,.2,.21,.46,.32,.73,.32,.24,0,.49-.09,.68-.27,.4-.38,.43-1.01,.05-1.41-1.84-1.99-4.54-3.06-7.22-2.92-.02,0-.05,0-.07,0L7.24,5.83c1.52-.55,3.12-.83,4.76-.83,3.88,0,7.62,1.63,10.27,4.48,.2,.21,.46,.32,.73,.32,.24,0,.49-.09,.68-.27,.4-.38,.43-1.01,.05-1.41-3.02-3.25-7.3-5.12-11.73-5.12-2.19,0-4.31,.43-6.3,1.29L1.71,.29C1.32-.1,.68-.1,.29,.29S-.1,1.32,.29,1.71L22.29,23.71c.2,.2,.45,.29,.71,.29s.51-.1,.71-.29c.39-.39,.39-1.02,0-1.41L13.6,12.18Z"></path></svg>
            <h3>No hay conexión a internet</h3>
        </div>
    `);
 
    let active = true;
    
    addEventListener('online', () => {
        if( !active ) return
        dispatchEvent( new CustomEvent('hashchange') );
    }, { once : true });

    addEventListener('hashchange', ()=> {
        active = false;
    }, { once : true });

    return $element
};

var searchType = () => {
  if (!localStorage.getItem("search_history")) {
    localStorage.setItem("search_history", "[]");
  }

  const useApp = window.dataApp;
  const useThis = {
    params: useApp.routes.params(),
    oValues: {
      dataNull: useApp.MyFunction.observeValue(true),
      dataTrue: useApp.MyFunction.observeValue([]),
    },
    function: {
      dataLoad: () => {},
    },
    functions: {},
  };

  const $element = useApp.MyFunction.createNodeElement(`

        <div class="div_Xu02Xjh">

            <header class="header_K0hs3I0 header_4scHSOs">
        
                <a 
                  class="a_t8K3Qpd" 
                  href="#/">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-angle-left"><path d="M17.17,24a1,1,0,0,1-.71-.29L8.29,15.54a5,5,0,0,1,0-7.08L16.46.29a1,1,0,1,1,1.42,1.42L9.71,9.88a3,3,0,0,0,0,4.24l8.17,8.17a1,1,0,0,1,0,1.42A1,1,0,0,1,17.17,24Z"></path></svg>
                </a>
                <form id="form" class="form_r7mvBNn" autocomplete="off" >
                    <input 
                      type="search" 
                      name="search" 
                      value="${useApp.MyClass.EncodeTemplateString.toInput(
                        decodeURIComponent(useApp.routes.params("result") || "")
                      )}" 
                      placeholder="buscar">
                    <button type="submit"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-arrow-right"><path d="M23.12,9.91,19.25,6a1,1,0,0,0-1.42,0h0a1,1,0,0,0,0,1.41L21.39,11H1a1,1,0,0,0-1,1H0a1,1,0,0,0,1,1H21.45l-3.62,3.61a1,1,0,0,0,0,1.42h0a1,1,0,0,0,1.42,0l3.87-3.88A3,3,0,0,0,23.12,9.91Z"></path></svg></button>
                </form>

            </header>
            <div class="div_IsTCHpN" style="padding:10px">
                <div id="itemNull" class="loader-i" style="--color:var(--color-letter)"></div>
                <div id="itemFalse" class="div_b14S3dH">
                    ${useApp.svgIcon("fi fi-rr-search-alt")}
                    <h3></h3>
                </div>
                <div id="itemTrue" class="div_C2otGmQ"></div>
            </div>

        </div>

    `);

  const $elements = useApp.MyFunction.createObjectElement(
    $element.querySelectorAll("[id]"),
    "id",
    true
  );

  useThis.oValues.dataNull.observe((boolean) => {
    const dataItem = $elements.itemTrue.querySelector("[data-item]");

    const render = {
      itemNull: boolean,
      itemFalse: !boolean && !dataItem,
      itemTrue: !boolean && !!dataItem,
    };

    Object.entries(render).forEach((entries) => {
      $elements[entries[0]].style.display = entries[1] ? "" : "none";
    });
  });

  useThis.oValues.dataTrue.observe((array) => {
    $elements.itemTrue.innerHTML = array
      .map((data) => {
        const search = encodeURIComponent(data.search);
        return `
        <div class="div_ywmleK1" data-item>
            <button
              class="button_YqF7ZuC"
              data-id="${data.id}">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-cross-small"><path d="M18,6h0a1,1,0,0,0-1.414,0L12,10.586,7.414,6A1,1,0,0,0,6,6H6A1,1,0,0,0,6,7.414L10.586,12,6,16.586A1,1,0,0,0,6,18H6a1,1,0,0,0,1.414,0L12,13.414,16.586,18A1,1,0,0,0,18,18h0a1,1,0,0,0,0-1.414L13.414,12,18,7.414A1,1,0,0,0,18,6Z"></path></svg>
            </button>
            <a
            class="a_UrjAwYX"
            href="#/search/${search}/result">
                <div class="div_9OWid2W">
                    <p>${data.search}</p>
                    <span>${new Date(data.id).toLocaleString()}</span>
                </div>
                ${useApp.svgIcon("fi fi-rr-angle-small-right")}
            </a>
        </div>
      `;
      })
      .join("");
  });

  useThis.functions.dataTrue = () => {
    useThis.oValues.dataNull.value = true;
    useThis.oValues.dataTrue.value = JSON.parse(
      localStorage.getItem("search_history")
    );
    useThis.oValues.dataNull.value = false;
  };

  $elements.form.addEventListener("submit", (e) => {
    e.preventDefault();

    location.hash = `/search/${encodeURIComponent(
      $elements.form.search.value.trim()
    )}/result`;

    const array = JSON.parse(localStorage.getItem("search_history"));

    if (
      !array.some((data) => data.search == $elements.form.search.value.trim())
    ) {
      array.push({
        id: Date.now(),
        search: $elements.form.search.value.trim(),
      });
    }

    localStorage.setItem("search_history", JSON.stringify(array));
  });

  $elements.itemTrue.addEventListener("click", (e) => {
    const button = e.target.closest("button");
    if (button) {
      const id = button.getAttribute("data-id");

      const array = JSON.parse(localStorage.getItem("search_history"));
      localStorage.setItem(
        "search_history",
        JSON.stringify(
          array.filter(
            (data) => data.id != id && data.type != useThis.params.type
          )
        )
      );

      button.closest("[data-item]").remove();
    }
  });

  useThis.functions.dataTrue();
  setTimeout(() => $elements.form.search.focus());

  return $element;
};

var searchTypeResult = () => {
  const useApp = window.dataApp;
  const useThis = {
    params: useApp.routes.params(),
    oValues: {
      dataNull: useApp.MyFunction.observeValue(true),
      dataTrue: useApp.MyFunction.observeValue([]),
      dataTrueGender: useApp.MyFunction.observeValue([
        { value: "", string: "Todos" },
        { value: "-1", string: "Ultimos episodios" },
        { value: "-2", string: "Ultimos animes" },
        ...gendersAnime.map((string) => {
          return {
            value: string.split(" ").join("-").toLocaleLowerCase(),
            string,
          };
        }),
      ]),
    },
    values: {
      observes: [],
    },
    function: {
      dataLoad: () => {},
    },
    functions: {},
  };

  const $element = useApp.MyFunction.createNodeElement(
    ((_) => `

      <div class="div_Xu02Xjh">

        <header class="header_LOF628f">

            <a href="${_.href}" class="a_33g9UEa">
              <small class="small_rppYggX">
                ${useApp.svgIcon("fi fi-rr-search")}
              </small>
              <h4>${_.title}</h4>
            </a>

        </header>


        <div class="div_BIchAsC">

            <form class="app-form-label-checkbox" id="form-filter-type" name="form-filter-type">
              <label>
                <input type="radio" name="key" value="1" checked>
                <span>Animes</span>
              </label>
              <label>
                <input type="radio" name="key" value="2">
                <span>Peliculas y Series</span>
              </label>
              <label>
                <input type="radio" name="key" value="4">
                <span>Peliculas II</span>
              </label>
              <label>
                <input type="radio" name="key" value="5">
                <span>Series II</span>
              </label>
              <label>
                <input type="radio" name="key" value="6">
                <span>Canales</span>
              </label>
            </form>
              
        </div>
    
        <div class="div_IsTCHpN">
            <div id="itemNull" class="loader-i" style="--color:var(--app-color-letter)"></div>
            <div id="itemFalse" class="div_b14S3dH" style="display:none">
                ${useApp.svgIcon("fi fi-rr-search-alt")}
                <h3>sin resultados</h3>
            </div>
            <div id="itemTrue" class="div_qsNmfP3" style="display:none">
                <div id="itemTrueLoad" class="div_Qm4cPUn">
                    <div class="loader-i" style="--color:var(--color-letter)"></div>
                </div>
            </div>
        </div>

      </div>

  `)({
      href: ["#", "search", useThis.params.type, useThis.params.result].join(
        "/"
      ),
      title: decodeURIComponent(useThis.params.result),
      description: useThis.params.type,
      hidden: "display:none",
    })
  );

  const $elements = useApp.MyFunction.createObjectElement(
    $element.querySelectorAll("[id]"),
    "id",
    true
  );

  $elements.itemTrueLoad.addEventListener(
    "_IntersectionObserver",
    ({ detail }) => {
      if (detail.entry.isIntersecting) {
        detail.observer.unobserve(detail.entry.target);
        useThis.functions.dataTrue();
      }
    }
  );

  $elements["form-filter-type"].addEventListener("change", () => {
    $elements.itemTrue.innerHTML = "";
    useThis.oValues.dataNull.value = true;

    useThis.functions.dataTrue();
  });

  useThis.oValues.dataNull.observe((load) => {
    const dataItem = $elements.itemTrue.querySelector("[data-item]");

    const render = {
      itemNull: load,
      itemFalse: !load && !dataItem,
      itemTrue: !load && !!dataItem,
    };

    Object.entries(render).forEach((entries) => {
      $elements[entries[0]].style.display = entries[1] ? "" : "none";
    });
  });

  useThis.oValues.dataTrue.observe((array) => {
    if (array.length) {
      const type = $elements["form-filter-type"].key.value;

      if (["4", "5"].includes(type)) {
        return useThis.functions.dataRenderIptv(array);
      }

      if (["2", "3"].includes(type)) {
        return useThis.functions.dataRenderPeliculaSerie(array);
      }

      if (type == "1") {
        return useThis.functions.dataRenderAnime(array);
      }

      if (type == "6") {
        return useThis.functions.dataRenderIptvChannel(array);
      }
    }
  });

  useThis.functions.dataRenderAnime = (array) => {
    const template = document.createElement("div");

    template.innerHTML = array
      .map((data) => {
        const url = useApp.url.img(data.poster);
        return `
          <a
            href="#/anime/${data.identifier}"
            class="div_SQpqup7" data-item>
              <div class="div_fMC1uk6">
                <img src="" alt="" data-src="${url}" style="display:none">
                <span>${data.type ?? ""}</span>
              </div>
              <div class="div_9nWIRZE">
                <p>${data.title}</p>
              </div>
          </a>
        `;
      })
      .join("");

    $elements.itemTrue.append(
      ...Array.from(template.children).map((child) => {
        child.addEventListener("_IntersectionObserver", ({ detail }) => {
          if (detail.entry.isIntersecting) {
            detail.observer.unobserve(detail.entry.target);
            const img = child.querySelector("img");
            img.onload = () => (img.style.display = "");
            img.src = img.dataset.src;
          }
        });

        useApp.instances.IntersectionObserver.observe(child);
        useThis.values.observes.push(child);

        return child;
      })
    );

    $elements.itemTrueLoad.remove();

    if (array.length == 24) {
      $elements.itemTrue.append($elements.itemTrueLoad);
      useApp.instances.IntersectionObserver.observe($elements.itemTrueLoad);
    }
  };

  useThis.functions.dataRenderPeliculaSerie = (array) => {
    const template = document.createElement("div");

    template.innerHTML = array
      .map((data) => {
        const type =
          data.url.slug.split("/")[0] == "movies" ? "pelicula" : "serie";

        if (data.images.poster == null) {
          return '<div style="display:none"></div>';
        }
        const url = data.images.poster.replace("/original/", "/w185/");

        return `
          <a
            href="#/${type}/${data.TMDbId}"
            class="div_SQpqup7"
            data-item>
              <div class="div_fMC1uk6">
                <img src="" alt="" data-src="${url}" style="display:none">
                <span>${type}</span>
              </div>
              <div class="div_9nWIRZE">
                <p>${data.titles.name}</p>
              </div>
          </a>
        `;
      })
      .join("");

    $elements.itemTrue.append(
      ...Array.from(template.children).map((child) => {
        if (child.tagName == "A") {
          child.addEventListener("_IntersectionObserver", ({ detail }) => {
            if (detail.entry.isIntersecting) {
              detail.observer.unobserve(detail.entry.target);
              const img = child.querySelector("img");
              img.onload = () => (img.style.display = "");
              img.src = img.dataset.src;
            }
          });

          useApp.instances.IntersectionObserver.observe(child);
          useThis.values.observes.push(child);
        }

        return child;
      })
    );

    $elements.itemTrueLoad.remove();

    // if (array.length == 24) {
    //   $elements.itemTrue.append($elements.itemTrueLoad);
    //   useApp.instances.IntersectionObserver.observe($elements.itemTrueLoad);
    // }
  };

  useThis.functions.dataRenderIptv = (array) => {
    const types = {
      4: "pelicula-ii",
      5: "serie-ii",
    };

    const type = types[$elements["form-filter-type"].key.value];
    const template = document.createElement("div");

    template.innerHTML = array
      .map((data) => {
        const url = useApp.url.img(data.stream_icon ?? data.cover);

        // const episode = `episodio ${data.episode}`;
        // const aspectRatio = type == "6" ? "aspect-ratio:1/1" : "";

        return `
          <a
            href="#/${type}/${data.stream_id ?? data.series_id}"
            class="div_SQpqup7" data-item>
              <div class="div_fMC1uk6">
                <img src="" alt="" data-src="${url}" style="display:none">
                <span style="display:none"></span>
              </div>
              <div class="div_9nWIRZE">
                <p>${data.name}</p>
              </div>
          </a>
        `;
      })
      .join("");

    $elements.itemTrue.append(
      ...Array.from(template.children).map((child) => {
        child.addEventListener("_IntersectionObserver", ({ detail }) => {
          if (detail.entry.isIntersecting) {
            detail.observer.unobserve(detail.entry.target);
            const img = child.querySelector("img");
            img.onload = () => (img.style.display = "");
            img.src = img.dataset.src;
          }
        });

        useApp.instances.IntersectionObserver.observe(child);
        useThis.values.observes.push(child);

        return child;
      })
    );

    $elements.itemTrueLoad.remove();

    if (array.length == 50) {
      $elements.itemTrue.append($elements.itemTrueLoad);
      useApp.instances.IntersectionObserver.observe($elements.itemTrueLoad);
    }
  };

  useThis.functions.dataRenderIptvChannel = (array) => {
    const template = document.createElement("div");

    template.innerHTML = array
      .map((data) => {
        const url = useApp.url.img(data.stream_icon ?? data.cover);

        const dataInput = useApp.MyClass.EncodeTemplateString.toInput(
          JSON.stringify(data)
        );

        return `
          <button
            class="div_SQpqup7" 
            data-data="${dataInput}"
            data-item>
              <div class="div_fMC1uk6" style="aspect-ratio:1/1">
                <img src="" alt="" data-src="${url}" style="display:none">
                <span style="display:none"></span>
              </div>
              <div class="div_9nWIRZE">
                <p>${data.name}</p>
              </div>
          </button>
        `;
      })
      .join("");

    $elements.itemTrue.append(
      ...Array.from(template.children).map((child) => {
        child.addEventListener("_IntersectionObserver", ({ detail }) => {
          if (detail.entry.isIntersecting) {
            detail.observer.unobserve(detail.entry.target);
            const img = child.querySelector("img");
            img.onload = () => (img.style.display = "");
            img.src = img.dataset.src;
          }
        });

        useApp.instances.IntersectionObserver.observe(child);
        useThis.values.observes.push(child);

        return child;
      })
    );

    $elements.itemTrueLoad.remove();

    if (array.length == 50) {
      $elements.itemTrue.append($elements.itemTrueLoad);
      useApp.instances.IntersectionObserver.observe($elements.itemTrueLoad);
    }
  };

  /** Nuevo */

  useThis.functions.dataTrueAnime = () => {
    const page =
      Math.floor(
        $elements.itemTrue.querySelectorAll("[data-item]").length / 24
      ) + 1;

    ApiWebAnimeflv.search({
      page,
      search: decodeURIComponent(useThis.params.result),
    }).then((array) => {
      useThis.oValues.dataNull.value = true;
      useThis.oValues.dataTrue.value = array;
      useThis.oValues.dataNull.value = false;
    });
  };

  useThis.functions.dataTruePelicula = () => {
    ApiWebCuevana.search(decodeURIComponent(useThis.params.result)).then(
      (datas) => {
        useThis.oValues.dataNull.value = true;
        useThis.oValues.dataTrue.value = datas?.props?.pageProps?.movies;
        useThis.oValues.dataNull.value = false;
      }
    );
  };

   

  useThis.functions.dataTrueIptv = () => {
    const types = {
      4: "pelicula",
      5: "serie",
      6: "live",
    };

    // const gender = $elements.selectGender.value;
    const type = types[$elements["form-filter-type"].key.value];

    const length = $elements.itemTrue.querySelectorAll("[data-item]").length;

    const encodeQueryString = useApp.MyFunction.encodeQueryObject({
      route: type,
      search: decodeURIComponent(useThis.params.result),
      start: length,
      end: 50,
    });

    fetch(`https://api.vniox.com/iptv/api.php?${encodeQueryString}`)
      .then((res) => res.json())
      .then((data) => {
        useThis.oValues.dataNull.value = true;
        useThis.oValues.dataTrue.value = data ?? [];
        useThis.oValues.dataNull.value = false;
      });
  };

  useThis.functions.dataTrue = () => {
    const type = $elements["form-filter-type"].key.value;

    const types = {
      1: useThis.functions.dataTrueAnime,
      2: useThis.functions.dataTruePelicula,
      3: useThis.functions.dataTruePelicula,
      4: useThis.functions.dataTrueIptv,
      5: useThis.functions.dataTrueIptv,
      6: useThis.functions.dataTrueIptv,
    };

    types?.[type]?.();
  };

  useThis.functions.dataTrue();

  return $element;
};

var favoritos = () => {
  const useApp = window.dataApp;
  const useThis = {
    params: useApp.routes.params(),

    oValues: {
      dataNull: useApp.MyFunction.observeValue(true),
      dataTrue: useApp.MyFunction.observeValue([]),
      dataTrueGender: useApp.MyFunction.observeValue([
        { value: "1", string: "Favoritos" },
        { value: "2", string: "Vistos" },
      ]),
    },
    values: {
      observes: [],
      types: {
        1: "favorites",
        2: "views",
        3: "history",
      },
    },
    function: {
      dataLoad: () => {},
    },
    functions: {},
  };

  const $element = useApp.MyFunction.createNodeElement(
    ((_) => `

      <div class="div_Xu02Xjh">

        <header class="header_K0hs3I0">

            <div class="div_uNg74XS">
              <div class="div_sZZicpN">
                <h3 id="h3Title">Coleccion</h3>
                <span id="genderText">todos</span>
              </div>
            </div>

            <div class="div_x0cH0Hq">
              <a href="#/historial" class="button_lvV6qZu">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-time-past"><path d="M12,0A11.972,11.972,0,0,0,4,3.073V1A1,1,0,0,0,2,1V4A3,3,0,0,0,5,7H8A1,1,0,0,0,8,5H5a.854.854,0,0,1-.1-.021A9.987,9.987,0,1,1,2,12a1,1,0,0,0-2,0A12,12,0,1,0,12,0Z"></path><path d="M12,6a1,1,0,0,0-1,1v5a1,1,0,0,0,.293.707l3,3a1,1,0,0,0,1.414-1.414L13,11.586V7A1,1,0,0,0,12,6Z"></path></svg>
              </a>
              <div class="div_klylpyg">
                <small>
                  ${useApp.svgIcon("fi fi-rr-filter")}
                </small>
                <select id="selectGender">
                  <option selected>Todos</option>
                </select>
              </div>
            </div>

        </header>


        <div class="div_BIchAsC">

            <form class="app-form-label-checkbox" id="form-filter-type" name="form-filter-type">
              <label>
                <input type="radio" name="key" value="1" checked>
                <span>Animes</span>
              </label>
              <label>
                <input type="radio" name="key" value="2">
                <span>peliculas</span>
              </label>
              <label>
                <input type="radio" name="key" value="3">
                <span>Series</span>
              </label>
            </form>
              
        </div>
    
        <div class="div_IsTCHpN">
            <div id="itemNull" class="loader-i" style="--color:var(--app-color-letter)"></div>
            <div id="itemFalse" class="div_b14S3dH" style="display:none">
                ${useApp.svgIcon("fi fi-rr-search-alt")}
                <h3>sin resultados</h3>
            </div>
            <div id="itemTrue" class="div_qsNmfP3" style="display:none">
                <div id="itemTrueLoad" class="div_Qm4cPUn">
                    <div class="loader-i" style="--color:var(--color-letter)"></div>
                </div>
            </div>
        </div>

      </div>

  `)({
      href: ["#", "search", useThis.params.type, useThis.params.result].join(
        "/"
      ),
      title: "Inicio" ,
      description: useThis.params.type,
      hidden: "display:none",
    })
  );

  const $elements = useApp.MyFunction.createObjectElement(
    $element.querySelectorAll("[id]"),
    "id",
    true
  );

  $elements.itemTrueLoad.addEventListener(
    "_IntersectionObserver",
    ({ detail }) => {
      if (detail.entry.isIntersecting) {
        detail.observer.unobserve(detail.entry.target);
        useThis.functions.dataTrue();
      }
    }
  );

  $elements.selectGender.addEventListener("change", () => {
    $elements.itemTrue.innerHTML = "";
    useThis.oValues.dataNull.value = true;

    $elements.genderText.textContent =
      $elements.selectGender.selectedOptions[0].innerText;

    useThis.functions.dataTrue();
  });

  $elements["form-filter-type"].addEventListener("change", () => {
    $elements.itemTrue.innerHTML = "";
    useThis.oValues.dataNull.value = true;

    useThis.functions.dataTrue();
  });

  useThis.oValues.dataNull.observe((load) => {
    const dataItem = $elements.itemTrue.querySelector("[data-item]");

    const render = {
      itemNull: load,
      itemFalse: !load && !dataItem,
      itemTrue: !load && !!dataItem,
    };

    Object.entries(render).forEach((entries) => {
      $elements[entries[0]].style.display = entries[1] ? "" : "none";
    });
  });

  useThis.oValues.dataTrue.observe((array) => {
    if (array.length) {
      const type = $elements["form-filter-type"].key.value;
      if (["2", "3"].includes(type)) {
        return useThis.functions.dataRenderPeliculaSerie(array);
      }

      if (type == "1") {
        return useThis.functions.dataRenderAnime(array);
      }
    }
  });

  useThis.oValues.dataTrueGender.observe((array) => {
    $elements.selectGender.innerHTML = array
      .map((object) => {
        return `<option value="${object.value}">${object.string}</option>`;
      })
      .join("");

    $elements.genderText.textContent =
      $elements.selectGender.selectedOptions[0].innerText;
  });

  useThis.functions.dataRenderAnime = (array) => {
    const template = document.createElement("div");

    template.innerHTML = array
      .map((data) => {
        const url = useApp.url.img(data.poster);
        return `
          <a
            href="#/anime/${data.identifier}"
            class="div_SQpqup7" data-item>
              <div class="div_fMC1uk6">
                <img src="" alt="" data-src="${url}" style="display:none">
                <span style="display:none">${data.type ?? ""}</span>
              </div>
              <div class="div_9nWIRZE">
                <p>${data.title}</p>
              </div>
          </a>
        `;
      })
      .join("");

    $elements.itemTrue.append(
      ...Array.from(template.children).map((child) => {
        child.addEventListener("_IntersectionObserver", ({ detail }) => {
          if (detail.entry.isIntersecting) {
            detail.observer.unobserve(detail.entry.target);
            const img = child.querySelector("img");
            img.onload = () => (img.style.display = "");
            img.src = img.dataset.src;
          }
        });

        useApp.instances.IntersectionObserver.observe(child);
        useThis.values.observes.push(child);

        return child;
      })
    );

    $elements.itemTrueLoad.remove();

    if (array.length == 25) {
      $elements.itemTrue.append($elements.itemTrueLoad);
      useApp.instances.IntersectionObserver.observe($elements.itemTrueLoad);
    }
  };

  useThis.functions.dataRenderPeliculaSerie = (array) => {
    const type =
      $elements["form-filter-type"].key.value == "2" ? "pelicula" : "serie";

    const template = document.createElement("div");

    template.innerHTML = array
      .map((data) => {
        if (data.images.poster == null) {
          return '<div style="display:none"></div>';
        }
        const url = data.images.poster.replace("/original/", "/w185/");

        return `
          <a
            href="#/${type}/${data.TMDbId}"
            class="div_SQpqup7"
            data-item>
              <div class="div_fMC1uk6">
                <img src="" alt="" data-src="${url}" style="display:none">
                <span style="display:none">${type}</span>
              </div>
              <div class="div_9nWIRZE">
                <p>${data.titles.name}</p>
              </div>
          </a>
        `;
      })
      .join("");

    $elements.itemTrue.append(
      ...Array.from(template.children).map((child) => {
        if (child.tagName == "A") {
          child.addEventListener("_IntersectionObserver", ({ detail }) => {
            if (detail.entry.isIntersecting) {
              detail.observer.unobserve(detail.entry.target);
              const img = child.querySelector("img");
              img.onload = () => (img.style.display = "");
              img.src = img.dataset.src;
            }
          });

          useApp.instances.IntersectionObserver.observe(child);
          useThis.values.observes.push(child);
        }

        return child;
      })
    );

    $elements.itemTrueLoad.remove();

    if (array.length == 24) {
      $elements.itemTrue.append($elements.itemTrueLoad);
      useApp.instances.IntersectionObserver.observe($elements.itemTrueLoad);
    }
  };

  useThis.functions.dataTrueAnime = () => {
    const encodeQueryString = useApp.MyFunction.encodeQueryObject({
      route: useThis.values.types[$elements.selectGender.value] ?? "favorites",
      type: 1,
      start: $elements.itemTrue.querySelectorAll("[data-item]").length,
      end: 25,
    });

    fetch(
      useApp.url.server(`/api.php?${encodeQueryString}`),
      useApp.fetchOptions({
        method: "GET",
      })
    )
      .then((res) => res.json())
      .then((data) => {
        useThis.oValues.dataNull.value = true;
        useThis.oValues.dataTrue.value = data.map((data) =>
          JSON.parse(data.data_json)
        );
        useThis.oValues.dataNull.value = false;
      });
  };

  useThis.functions.dataTruePelicula = () => {
    const type = $elements["form-filter-type"].key.value;

    const encodeQueryString = useApp.MyFunction.encodeQueryObject({
      route: useThis.values.types[$elements.selectGender.value] ?? "favorites",
      type: type,
      start: $elements.itemTrue.querySelectorAll("[data-item]").length,
      end: 25,
    });

    fetch(
      useApp.url.server(`/api.php?${encodeQueryString}`),
      useApp.fetchOptions({
        method: "GET",
      })
    )
      .then((res) => res.json())
      .then((data) => {
        useThis.oValues.dataNull.value = true;
        useThis.oValues.dataTrue.value = data.map((data) =>
          JSON.parse(data.data_json)
        );
        useThis.oValues.dataNull.value = false;
      });
  };

  useThis.functions.dataTrueSerie = () => {
    useThis.functions.dataTruePelicula();
  };

  useThis.functions.dataTrue = () => {
    const type = $elements["form-filter-type"].key.value;

    const types = {
      1: useThis.functions.dataTrueAnime,
      2: useThis.functions.dataTruePelicula,
      3: useThis.functions.dataTrueSerie,
    };

    types?.[type]?.();
  };

  useThis.functions.dataTrue();

  return $element;
};

var historial = () => {
  const useApp = window.dataApp;
  const useThis = {
    params: useApp.routes.params(),
    oValues: {
      dataNull: useApp.MyFunction.observeValue(true),
      dataTrue: useApp.MyFunction.observeValue([]),
    },
    values: {
      observes: [],
      dates: {},
    },
    functions: {},
  };

  const $element = useApp.MyFunction.createNodeElement(`

        <div class="div_Xu02Xjh">

            <header class="header_K0hs3I0">
 
                <div class="div_uNg74XS div_McPrYGP">
                    <a href="#/favorite" class="button_lvV6qZu">
                      ${useApp.svgIcon("fi fi-rr-angle-small-left")}
                    </a>
                    <div class="div_sZZicpN">  
                        <h3>Historial</h3>
                        <span style="display:none">${useThis.params.type}</span>
                    </div>
                </div>

            </header>

            <div class="div_BIchAsC">
                <div id="buttonsFocus" data-gender="Todos" class="div_O73RBqH">

                    ${Object.entries({
                      anime: "Animes",
                      pelicula: "peliculas",
                      serie: "series",
                      // youtube: "YT Videos",
                    })
                      .map((entries, index) => {
                        return `
                        <button 
                          data-gender="${entries[0]}" 
                          class="${index == 0 ? "focus" : ""}">
                        ${entries[1]}
                        </button>`;
                      })
                      .join("")}
                </div>
            </div>
        
            <div class="div_IsTCHpN">
                <div id="itemNull" class="loader-i" style="--color:var(--color-letter)"></div>
                <div id="itemFalse" class="div_b14S3dH">
                  ${useApp.svgIcon("fi fi-rr-search-alt")}
                  <h3>sin resultados</h3>
                </div>

                <div id="itemTrue" class="">
                    <div id="itemTrueLoad" class="div_Qm4cPUn">
                        <div class="loader-i" style="--color:var(--color-letter)"></div>
                    </div>
                </div>
                
            </div>

        </div>

  `);

  const $elements = useApp.MyFunction.createObjectElement(
    $element.querySelectorAll("[id]"),
    "id",
    true
  );

  useThis.functions.dataRenderAnime = (Data) => {
    const template = document.createElement("div");
    template.innerHTML = Data.map((data) => {
      const date = new Date(data.other.datetime);
      let fechaFormateada = "";
      if (!useThis.values.dates[date.toLocaleDateString()]) {
        useThis.values.dates[date.toLocaleDateString()] = true;
        fechaFormateada = date.toLocaleDateString("es-ES", {
          day: "numeric",
          month: "long",
          year: "numeric",
        });
      }

      const url = useApp.url.img(data.poster);
      const episode = data.other.episode.padStart(2, "0");

      return `
          ${
            fechaFormateada
              ? `
                <h3 style="grid-column: 1 / -1; padding: 10px">
                  ${fechaFormateada}
                </h3>
              `
              : ""
          }
          
          <a 
            href="#/anime/${data?.identifier}" 
            class="div_SQpqup7" 
            data-item>

              <div class="div_fMC1uk6">
                  <img src="" alt="" data-src="${url}" style="display:none">
                  <span>${data.type ?? ""} | E${episode}</span>
              </div>
              <div class="div_9nWIRZE">
                  <p>${data.title}</p>
              </div>

          </a>
      `;
    }).join("");

    for (const child of template.children) {
      if (child.tagName == "A") {
        child.addEventListener("_IntersectionObserver", ({ detail }) => {
          if (detail.entry.isIntersecting) {
            detail.observer.unobserve(detail.entry.target);
            const img = child.querySelector("img");
            img.onload = () => (img.style.display = "");
            img.src = img.dataset.src;
          }
        });
        useApp.instances.IntersectionObserver.observe(child);
        useThis.values.observes.push(child);
      }
    }

    $elements.itemTrue.append(...template.children);
    $elements.itemTrueLoad.remove();

    if (Data.length === 25) {
      $elements.itemTrue.append($elements.itemTrueLoad);
      useApp.instances.IntersectionObserver.observe($elements.itemTrueLoad);
    }
  };

  useThis.functions.dataRenderPeliculaSerie = (Data, type) => {
    const template = document.createElement("div");
    template.innerHTML = Data.map((data) => {
      const date = new Date(data.other.datetime);

      const url = data.images.poster.replace("/original/", "/w185/");

      let seasonAndEpisode = type;
      let fechaFormateada = "";

      if (type == "serie") {
        const [season, episode] = data.other.episode.split("-");
        if (!episode) return "";

        seasonAndEpisode = `
          T${season.padStart(2, "0")}
          E${episode.padStart(2, "0")}
        `;
      }

      if (data.images.poster == null) return "";

      if (!useThis.values.dates[date.toLocaleDateString()]) {
        useThis.values.dates[date.toLocaleDateString()] = true;
        fechaFormateada = date.toLocaleDateString("es-ES", {
          day: "numeric",
          month: "long",
          year: "numeric",
        });
      }

      return `

        ${
          fechaFormateada
            ? `
              <h3 style="grid-column: 1 / -1; padding: 10px">
                ${fechaFormateada}
              </h3>
            `
            : ""
        }
        <a 
          href="#/${type}/${data.TMDbId}" 
          class="div_SQpqup7" data-item>

            <div class="div_fMC1uk6">
                <img src="" alt="" data-src="${url}" style="display:none">
                <span>${seasonAndEpisode}</span>
            </div>
            <div class="div_9nWIRZE">
                <p>${data.titles.name}</p>
            </div>
        </a>    
      `;
    }).join("");

    Array.from(template.children).forEach((child) => {
      if (child.tagName == "A") {
        child.addEventListener("_IntersectionObserver", ({ detail }) => {
          if (detail.entry.isIntersecting) {
            detail.observer.unobserve(detail.entry.target);
            const img = child.querySelector("img");
            img.onload = () => (img.style.display = "");
            img.src = img.dataset.src;
          }
        });
        useApp.instances.IntersectionObserver.observe(child);
        useThis.values.observes.push(child);
      }
    });

    $elements.itemTrue.append(...template.children);
    $elements.itemTrueLoad.remove();

    if (Data.length === 25) {
      $elements.itemTrue.append($elements.itemTrueLoad);
      useApp.instances.IntersectionObserver.observe($elements.itemTrueLoad);
    }
  };

  useThis.functions.dataRenderYoutube = (Data) => {
    const fragment = document.createDocumentFragment();
    fragment.append(
      ...Data.map((data) => {
        return createNodeElement(`
                <a 
                  href="#/youtube/${data.videoId}" 
                  class="div_EJlRW2l" data-item>

                    <div class="div_zcWgA0o">
                        <img 
                          src="${data.thumbnail.thumbnails[0].url}" 
                          alt="">
                        <span>
                          ${data.author || data.ownerText.runs[0].text}
                        </span>
                    </div>
                    <div class="div_9nWIRZE">
                      <p>
                        ${
                          data.title.runs ? data.title.runs[0].text : data.title
                        }
                      </p>
                    </div>
    
                </a>
            `);
      })
    );

    $elements.itemTrue.append(fragment);
    $elements.itemTrueLoad.remove();
  };

  useThis.functions.dataTrueAnime = () => {
    const encodeQueryString = useApp.MyFunction.encodeQueryObject({
      route: "history",
      type: 1,
      start: $elements.itemTrue.querySelectorAll("[data-item]").length,
      end: 25,
    });

    fetch(
      useApp.url.server(`/api.php?${encodeQueryString}`),
      useApp.fetchOptions()
    )
      .then((res) => res.json())
      .then((data) => {
        useThis.oValues.dataNull.value = true;
        useThis.oValues.dataTrue.value = Array.isArray(data)
          ? data.map((data) => {
              return {
                ...JSON.parse(data.data_json),
                other: {
                  episode: data.episode,
                  datetime: data.datetime,
                },
              };
            })
          : [];

        useThis.oValues.dataNull.value = false;
      });
  };

  useThis.functions.dataTruePeliculaSerie = (type) => {
    const encodeQueryString = useApp.MyFunction.encodeQueryObject({
      route: "history",
      type: type == "pelicula" ? 2 : 3,
      start: $elements.itemTrue.querySelectorAll("[data-item]").length,
      end: 25,
    });

    fetch(
      useApp.url.server(`/api.php?${encodeQueryString}`),
      useApp.fetchOptions()
    )
      .then((res) => res.json())
      .then((data) => {
        useThis.oValues.dataNull.value = true;
        useThis.oValues.dataTrue.value = Array.isArray(data)
          ? data.map((data) => {
              return {
                ...JSON.parse(data.data_json),
                other: {
                  episode: data.episode,
                  datetime: data.datetime,
                },
              };
            })
          : [];

        useThis.oValues.dataNull.value = false;
      });
  };

  useThis.functions.dataTrue = () => {
    const type = $elements.buttonsFocus
      .querySelector("button.focus")
      .getAttribute("data-gender");
    $elements.itemTrue.setAttribute(
      "class",
      ["anime", "pelicula", "serie"].includes(type)
        ? "div_qsNmfP3"
        : "div_FtxwFbU"
    );

    if (["pelicula", "serie"].includes(type)) {
      return useThis.functions.dataTruePeliculaSerie(type);
    }

    if (type == "anime") {
      return useThis.functions.dataTrueAnime();
    }

    if (type == "youtube") {
      return useThis.functions.dataTrueYoutube();
    }
  };

  useThis.functions.unobserve = () => {
    for (const observe of useThis.values.observes) {
      useApp.instances.IntersectionObserver.unobserve(observe);
    }

    useThis.values.observes = [];
  };

  $elements.buttonsFocus.addEventListener("click", (e) => {
    const button = e.target.closest("button");
    if (button) {
      Array.from(
        $elements.buttonsFocus.querySelectorAll("button.focus")
      ).forEach((button) => button.classList.remove("focus"));
      button.classList.add("focus");

      useThis.oValues.dataNull.value = true;

      $elements.itemTrue.innerHTML = "";
      useThis.values.dates = {};

      useThis.functions.unobserve();
      useThis.functions.dataTrue();
    }
  });

  $elements.itemTrueLoad.addEventListener(
    "_IntersectionObserver",
    ({ detail }) => {
      if (detail.entry.isIntersecting) {
        detail.observer.unobserve(detail.entry.target);
        useThis.functions.dataTrue();
      }
    }
  );

  addEventListener(
    "hashchange",
    () => {
      useThis.functions.unobserve();
    },
    { once: true }
  );

  useThis.functions.dataTrue();

  //end

  useThis.oValues.dataNull.observe((boolean) => {
    const dataItem = $elements.itemTrue.querySelector("[data-item]");

    const render = {
      itemNull: boolean,
      itemFalse: !boolean && !dataItem,
      itemTrue: !boolean && !!dataItem,
    };

    Object.entries(render).forEach((entries) => {
      $elements[entries[0]].style.display = entries[1] ? "" : "none";
    });
  });

  useThis.oValues.dataTrue.observe((Data) => {
    const type = $elements.buttonsFocus
      .querySelector("button.focus")
      .getAttribute("data-gender");

    Data = Data.filter((data) => Object.keys(data).length);

    if (["pelicula", "serie"].includes(type)) {
      return useThis.functions.dataRenderPeliculaSerie(Data, type);
    }

    if (type == "anime") {
      return useThis.functions.dataRenderAnime(Data);
    }
  });

  return $element;
};

var login = () => {
  const useApp = window.dataApp;

  const $element = useApp.MyFunction.createNodeElement(`

    <div class="div_Xu02Xjh">

        <header class="header_K0hs3I0">

            <div class="div_uNg74XS">
                <a href="#/setting" class="button_lvV6qZu" data-history-back>
                  ${useApp.svgIcon("fi fi-rr-angle-small-left")}
                </a>
                <h3 id="textTitle"></h3>
            </div>

        </header>

        <div class="div_IsTCHpN p-10px">
             
          <form id="form" class="div_SCqCUTo" autocomplete="off">
              <h2 style="padding: 0 20px;">Iniciar sesion</h2>
              <div class="div_Y85zRC0">
                  <label class="label_ieXcceLhkyD2WGY label_0BFeKpk">
                      <input type="text" name="email" placeholder="">
                      <span>correo</span>
                  </label>
              </div>
              <button id="buttonSubmit" class="button_WU25psx">
                  <span id="spanLoad">Recibir codigo</span>
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-envelope"><path d="M19,1H5A5.006,5.006,0,0,0,0,6V18a5.006,5.006,0,0,0,5,5H19a5.006,5.006,0,0,0,5-5V6A5.006,5.006,0,0,0,19,1ZM5,3H19a3,3,0,0,1,2.78,1.887l-7.658,7.659a3.007,3.007,0,0,1-4.244,0L2.22,4.887A3,3,0,0,1,5,3ZM19,21H5a3,3,0,0,1-3-3V7.5L8.464,13.96a5.007,5.007,0,0,0,7.072,0L22,7.5V18A3,3,0,0,1,19,21Z"></path></svg>
              </button>
              <a href="#/register" class="a_8hzaMUg">
                  <span>registro</span>
                  ${useApp.svgIcon("fi fi-rr-arrow-right")}
              </a>
          </form>
          <form id="form2" class="div_SCqCUTo" autocomplete="off" style="display: none">
              <div class="d-flex" style="align-items: center;">
                <button id="buttonBack" class="wh-40px d-flex-center" type="button"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-angle-left"><path d="M17.17,24a1,1,0,0,1-.71-.29L8.29,15.54a5,5,0,0,1,0-7.08L16.46.29a1,1,0,1,1,1.42,1.42L9.71,9.88a3,3,0,0,0,0,4.24l8.17,8.17a1,1,0,0,1,0,1.42A1,1,0,0,1,17.17,24Z"></path></svg></button>
                <h2>Ingresar codigo</h2>
              </div>
              <div class="div_Y85zRC0" >
                  <label class="label_ieXcceLhkyD2WGY label_0BFeKpk pointer-off" style="opacity: 0.7">
                      <input type="text" name="email" placeholder="" tabindex="-1">
                      <span>correo</span>
                  </label>
                  <label id="labelCode" class="label_ieXcceLhkyD2WGY label_0BFeKpk">
                      <input type="number" name="code" placeholder="" autocomplete="off" tabindex="-1">
                      <span>codigo</span>
                  </label>
              </div>
              <a href="#" id="aSendEmail" class="a_c305F1l">Volver a recibir codigo</a>
              <button id="buttonSubmit" class="button_WU25psx" >
                  <span id="spanLoad">Ingresar</span>
                  ${useApp.svgIcon("fi fi-rr-arrow-right")}
              </button>
              <a href="#/register" class="a_8hzaMUg" >
                  <span>registro</span>
                  ${useApp.svgIcon("fi fi-rr-arrow-right")}
              </a>
          </form>

        </div>

    </div>

`);

  const $elements = useApp.MyFunction.createObjectElement(
    $element.querySelectorAll("[id]"),
    "id",
    true
  );

  $elements.form.addEventListener("submit", (e) => {
    e.preventDefault();

    $elements.form.style.display = "none";
    $elements.form2.style.display = "";

    const body = {
      email: $elements.form.email.value.trim(),
    };

    fetch(useApp.url.server("/api.php?route=auth.login-email-get"), {
      method: "POST",
      body: JSON.stringify(body),
    })
      .then((res) => res.json())
      .then((data) => {
        if (!data?.status) {
          alert("Email no registrado");
          $elements.buttonBack.dispatchEvent(new CustomEvent("click"));
        }
      });
  });

  $elements.form2.addEventListener("submit", (e) => {
    e.preventDefault();

    location.hash = `/login/code/${encodeURIComponent(
      JSON.stringify([$elements.form2.email.value, $elements.form2.code.value])
    )}`;
  });

  $elements.form.email.addEventListener("input", () => {
    $elements.form2.email.value = $elements.form.email.value.trim();
  });

  $elements.form2.code.addEventListener("input", (e) => {
    if (e.target.value.length > 6) e.target.value = e.target.value.slice(0, 6);
  });

  $elements.aSendEmail.addEventListener("click", (e) => {
    e.preventDefault();
  });

  $elements.buttonBack.addEventListener("click", () => {
    $elements.form.style.display = "";
    $elements.form2.style.display = "none";
  });

  // useApp.functions.historyBack($element.querySelector("[data-history-back]"));
  return $element;
};

var register = () => {
  const useApp = window.dataApp;
  ({
    params: useApp.routes.params(),

    functions: {},
  });

  const $element = useApp.MyFunction.createNodeElement(`

    <div class="div_Xu02Xjh">

        <header class="header_K0hs3I0">

            <div class="div_uNg74XS">
                <a href="#/setting" class="button_lvV6qZu">
                  ${useApp.svgIcon("fi fi-rr-angle-small-left")}
                </a>
                <h3 id="textTitle"></h3>
            </div>

        </header>

        <div class="div_IsTCHpN p-10px">
             
          <form id="form" class="div_SCqCUTo" autocomplete="off">
              <h2 style="padding: 0 20px;">Registro</h2>
              <div class="div_Y85zRC0">
                  <label class="label_ieXcceLhkyD2WGY label_0BFeKpk">
                      <input type="text" name="fullname" placeholder="">
                      <span>Nombre</span>
                  </label>
                  <label class="label_ieXcceLhkyD2WGY label_0BFeKpk">
                      <input type="text" name="lastname" placeholder="" autocomplete="off">
                      <span>Apellido</span>
                  </label>
                  <label class="label_ieXcceLhkyD2WGY label_0BFeKpk">
                      <input type="text" name="email" placeholder="" autocomplete="off">
                      <span>Correo</span>
                  </label>
              </div>
              <button class="button_WU25psx">
                  <span id="spanLoad">Crear cuenta</span>
                  ${useApp.svgIcon("fi fi-rr-arrow-right")}
              </button>
              <a href="#/login" class="a_8hzaMUg">
                  <span>Iniciar sesion</span>
                  ${useApp.svgIcon("fi fi-rr-arrow-right")}
              </a>
          </form>

        </div>

    </div>

`);

  const $elements = useApp.MyFunction.createObjectElement(
    $element.querySelectorAll("[id]"),
    "id",
    true
  );

  $elements.form.addEventListener("submit", (e) => {
    e.preventDefault();

    const body = {
      fullname: $elements.form.fullname.value.trim(),
      lastname: $elements.form.lastname.value.trim(),
      email: $elements.form.email.value.trim(),
    };

    fetch(useApp.url.server("/api.php?route=auth.register"), {
      method: "POST",
      body: JSON.stringify(body),
    })
      .then((res) => res.json())
      .then(() => {
        location.href = "/login";
      });
  });

  return $element;
};

var loginKeyValue = () => {
  const useApp = window.dataApp;
  const useThis = {
    params: useApp.routes.params(),

    functions: {},
  };

  const $element = useApp.MyFunction.createNodeElement(`<div class=""></div>`);
  useApp.MyFunction.createObjectElement(
    $element.querySelectorAll("[id]"),
    "id",
    true
  );

  if (useThis.params.key == "code") {
    try {
      const [email, code] = JSON.parse(
        decodeURIComponent(useThis.params.value)
      );

      if (true) {
        const body = {
          email,
          code,
        };

        fetch(useApp.url.server("/api.php?route=auth.login-email-set"), {
          method: "POST",
          body: JSON.stringify(body),
        })
          .then((res) => res.json())
          .then((data) => {
            if (data?.status) {
              useApp.MyClass.Cookie.set(useApp.auth, data.token, {
                lifetime: 60 * 60 * 24 * 7,
              });

              location.hash = "/";
            } else {
              location.hash = "/";
              setTimeout(() => {
                alert("Codigo no valido");
              }, 50);
            }
          });
      }
    } catch (error) {
      // console.log("el codigo no es valido");
    }
  }

  return $element;
};

var profile = () => {
  const useApp = window.dataApp;

  const $element = useApp.MyFunction.createNodeElement(`

        <div class="div_Xu02Xjh">

            <header class="header_K0hs3I0">

                <div class="div_uNg74XS">
                    <a href="#/setting" class="button_lvV6qZu">
                      ${useApp.svgIcon("fi fi-rr-angle-small-left")}
                    </a>
                    <h3 id="textTitle">Actualizar datos</h3>
                </div>

            </header>

            <div class="div_IsTCHpN p-10px">
                 
              <form id="form" class="div_SCqCUTo" autocomplete="off">
                  <h2 style="padding: 0 20px;">Actualizar datos</h2>
                  <div class="div_Y85zRC0">
                      <label class="label_ieXcceLhkyD2WGY label_0BFeKpk">
                          <input type="text" name="fullname" placeholder="" autocomplete="off">
                          <span>nombre</span>
                      </label>
                      <label class="label_ieXcceLhkyD2WGY label_0BFeKpk">
                          <input type="text" name="lastname" placeholder="" autocomplete="off">
                          <span>apellido</span>
                      </label>
                  </div>
                  <button class="button_WU25psx">
                      <span id="spanLoad">Actualizar datos</span>
                      ${useApp.svgIcon("fi fi-rr-arrow-right")}
                  </button>
                  <a href="#/register" id="aLogout" class="a_8hzaMUg">
                      <span>Cerrar sesion</span>
                      ${useApp.svgIcon("fi fi-rr-arrow-right")}
                  </a>
              </form>

            </div>

        </div>

    `);

  const $elements = useApp.MyFunction.createObjectElement(
    $element.querySelectorAll("[id]"),
    "id",
    true
  );

  $elements.form.addEventListener("submit", (e) => {
    e.preventDefault();

    const encodeQueryString = useApp.MyFunction.encodeQueryObject({
      route: "user",
    });

    const body = {
      fullname: $elements.form.fullname.value.trim(),
      lsatname: $elements.form.lastname.value.trim(),
    };

    fetch(
      useApp.url.server(`/api.php?${encodeQueryString}`),
      useApp.fetchOptions({
        method: "PATCH",
        body: JSON.stringify(body),
      })
    )
      .then((res) => res.json())
      .then((data) => {
        if (data?.status) alert("Datos actualizados");
        else alert("Ocurrio un error");
      });
  });

  fetch(
    useApp.url.server(`/api.php?route=user`),
    useApp.fetchOptions({
      method: "GET",
    })
  )
    .then((res) => res.json())
    .then((data) => {
      $elements.form.fullname.value = data?.fullname || "";
      $elements.form.lastname.value = data?.lastname || "";
    });

  $elements.aLogout.addEventListener("click", (e) => {
    e.preventDefault();

    if (confirm("¿Cerrar session?")) {
      const encodeQueryString = useApp.MyFunction.encodeQueryObject({
        route: "auth.logout",
        id: "one",
      });

      fetch(
        useApp.url.server(`/api.php?${encodeQueryString}`),
        useApp.fetchOptions({
          method: "POST",
        })
      )
        .then((res) => res.json())
        .then((res) => {
          if (res?.status) {
            location.hash = "/login";
          }
        });
    }
  });

  return $element;
};

var theme = () => {
  const useApp = window.dataApp;
  const useThis = {
    instances: {
      // abortController: new AbortController(),
    },
    values: {
      // themeCustom: useApp.MyFunction.callbackTryCatch(
      //   () => JSON.parse(localStorage.getItem("theme-custom")),
      //   {}
      // ),
    },
    functions: {},
    themes: {
      dark: {
        "--app-color-background": "#000000",
        "--app-color-background-second": "#000000",
        "--app-color-background-ii": "#000000",
        "--app-color-background-transparent": "rgb(255 255 255 / 0.1)",
        "--app-color-letter": "#ffffff",
        "--app-color-letter-second": "#ffffff",
        "--app-color-letter-ii": "#ffffff",
        "--app-color-item": "#1A1A1A",
        "--app-color-item-second": "#1A1A1A",
        "--app-color-item-ii": "#1A1A1A",
        "--app-color-item-third": "#1A1A1A",
        "--app-color-item-iii": "#1A1A1A",
      },
      light: {
        "--app-color-background": "#F7F7F7",
        "--app-color-background-second": "#FFFFFF",
        "--app-color-background-ii": "#FFFFFF",
        "--app-color-background-transparent": "rgb(0 0 0 / 0.1)",
        "--app-color-letter": "#000000",
        "--app-color-letter-second": "#ffffff",
        "--app-color-letter-ii": "#ffffff",
        "--app-color-item": "#FFFFFF",
        "--app-color-item-second": "#000000",
        "--app-color-item-ii": "#000000",
        "--app-color-item-third": "#F7F7F7",
        "--app-color-item-iii": "#F7F7F7",
      },
      system: {},
      custom: {},
    },
  };
  const $element = useApp.MyFunction.createNodeElement(`
        <div class="div_Xu02Xjh div_MN7ZWeX">
            <header class="header_K0hs3I0">

                <div class="div_uNg74XS">
                    <a href="#/setting" class="button_lvV6qZu button_YWxwK2P">
                        ${useApp.svgIcon("fi fi-rr-angle-small-left")}
                    </a>
                    <h3 id="textTitle">Tema</h3>
                </div>

            </header>
            <div class="div_guZ6yID" style="padding:10px">
                
                <div class="div_cDfbXwR">
                    <div class="div_0p76jdM">
                        <label class="label_2F1ZTtw">
                            <span>Tema claro</span>
                            <input type="radio" name="name_Dokrc6U2gbEtz29wg2" data-theme="light" checked>
                        </label> 
                    </div>
                    <div class="div_0p76jdM">
                        <label class="label_2F1ZTtw">
                            <span>Tema oscuro</span>
                            <input type="radio" name="name_Dokrc6U2gbEtz29wg2" data-theme="dark">
                        </label> 
                    </div>
                    <div class="div_0p76jdM">
                        <label class="label_2F1ZTtw">
                            <span>Tema sistema</span>
                            <input type="radio" name="name_Dokrc6U2gbEtz29wg2" data-theme="system">
                        </label> 
                    </div>
                    <div class="div_0p76jdM" style="display:none">
                        <label class="label_2F1ZTtw">
                            <span>Tema personalizado</span>
                            <input type="radio" name="name_Dokrc6U2gbEtz29wg2" data-theme="custom">
                        </label>
                        <div class="div_VDMeCmA">
                            <div class="div_QKKEgOu">
                                <label class="label_2F1ZTtw">
                                    <span>color Fondo</span>
                                    <input type="color" data-color-custom="app-color-background">
                                </label>
                                <label class="label_2F1ZTtw">
                                    <span>color Fondo secundario</span>
                                    <input type="color" data-color-custom="app-color-background-second">
                                </label>
                                <label class="label_2F1ZTtw" >
                                    <span>color de items</span>
                                    <input type="color" data-color-custom="app-color-item">
                                </label>
                                <label class="label_2F1ZTtw">
                                    <span>color de items secundario</span>
                                    <input type="color" data-color-custom="app-color-item-second">
                                </label>
                                <label class="label_2F1ZTtw">
                                    <span>color de items tercero</span>
                                    <input type="color" data-color-custom="app-color-item-third">
                                </label>
                                <label class="label_2F1ZTtw">
                                    <span>color de letras</span>
                                    <input type="color" data-color-custom="app-color-letter">
                                </label>
                                <label class="label_2F1ZTtw">
                                    <span>color de letras secundario</span>
                                    <input type="color" data-color-custom="app-color-letter-second">
                                </label>
                            </div>
                        </div> 
                    </div>
                </div>
               
            </div>
        </div>
    `);

  useThis.functions.updateTheme = () => {
    $element.querySelectorAll("[data-theme]").forEach((element) => {
      element.addEventListener("change", () => {
        const theme = ((theme) => {
          if (theme == "light") return useThis.themes.light;
          if (theme == "dark") return useThis.themes.dark;
          if (theme == "system") {
            if (window.matchMedia("(prefers-color-scheme: light)").matches) {
              return useThis.themes.light;
            }

            if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
              return useThis.themes.dark;
            }
          }

          return useThis.themes.light;
        })(element.getAttribute("data-theme"));

        Object.entries(theme).forEach((entries) => {
          document.documentElement.style.setProperty(entries[0], entries[1]);
        });

        useApp.elements.meta.color.setAttribute(
          "content",
          theme["--app-color-background"]
        );

        localStorage.setItem("theme", element.getAttribute("data-theme"));
        Android.colorSystemBar(theme["--app-color-background"]);
      });

      if (localStorage.getItem("theme") == element.getAttribute("data-theme")) {
        element.checked = true;
        element.dispatchEvent(new CustomEvent("change"));
      }
    });
  };

  window
    .matchMedia("(prefers-color-scheme: light)")
    .addEventListener("change", (e) => {
      if (localStorage.getItem("theme") == "system") {
        const theme = e.matches ? useThis.themes.light : useThis.themes.dark;

        Object.entries(theme).forEach((entries) => {
          document.documentElement.style.setProperty(entries[0], entries[1]);
        });

        useApp.elements.meta.color.setAttribute(
          "content",
          theme["--app-color-background"]
        );

        Android.colorSystemBar(theme["--app-color-background"]);
      }
    });

  addEventListener("hashchange", useThis.functions.updateTheme);

  useThis.functions.updateTheme();
  //   $element.querySelectorAll("[data-color-custom]").forEach((element) => {
  //     element.value =
  //       useThis.values.themeCustom?.[element.getAttribute("data-color-custom")];
  //     element.addEventListener("change", () => {
  //       const themeCustom = JSON.parse(localStorage.getItem("theme-custom"));
  //       themeCustom[element.getAttribute("data-color-custom")] = element.value;
  //       localStorage.setItem("theme-custom", JSON.stringify(themeCustom));

  //       dispatchEvent(useApp.values.customEvents._theme);
  //     });
  //   });

  return $element;
};

var setting = () => {
  const useApp = window.dataApp;

  const $element = useApp.MyFunction.createNodeElement(`
      <div class="div_Xu02Xjh">
          <header class="header_K0hs3I0">

              <div class="div_uNg74XS">
                  <a href="#/" class="button_lvV6qZu">
                    ${useApp.svgIcon("fi fi-rr-angle-small-left")}
                  </a>
                  <h3 id="textTitle">Configuracion</h3>
              </div>

          </header>
          <div class="div_guZ6yID" style="padding:10px;">
            <div class="div_gVQO1KR">
                <div class="div_cq16fYP">
                  <a 
                  href="#/profile"
                  class="app-style-var d-flex-center-y" style="--pd:10px; --g:10px; --h:60px;">
                    <small class="app-square-var d-flex-center">
                      ${useApp.svgIcon("fi fi-rr-user")}
                    </small>
                    <span>Cuenta</span>
                  </a>
                  <a href="#/theme" class="app-style-var d-flex-center-y" style="--pd:10px; --g:10px; --h:60px;">
                    <small class="app-square-var d-flex-center">
                      ${useApp.svgIcon("fi fi-rr-palette")}
                    </small>
                    <span>Tema</span>
                  </a>
                </div>
            </div>
          </div>
      </div>  
    `);

  return $element;
};

var iptvPeliculaId = () => {
  const useApp = window.dataApp;
  const useThis = {
    params: useApp.routes.params(),
    // reactivity: {
    //   isFavorite: defineVal(false),
    //   isView: defineVal(false),
    //   load: defineVal(true),
    //   data: defineVal({}),
    // },
    functions: {},
    oValues: {
      favorite: useApp.MyFunction.observeValue(false),
      view: useApp.MyFunction.observeValue(false),
    },
    values: {
      isConnected: false,
      streaming: {},
      episode: 1,
      data_id: "",
      data: null,
      thisMovie: {},
    },
  };

  const $element = useApp.MyFunction.createNodeElement(`
    <div class="div_Xu02Xjh div_mrXVL9t" style="position:fixed">
         
        <header class="header_K0hs3I0 header_RtX3J1X">

            <div class="div_uNg74XS">
                <a href="#" class="button_lvV6qZu" data-history-back>
                  ${useApp.svgIcon("fi fi-rr-angle-small-left")}
                </a>  
            </div>
            <h2 id="textTitle" style="flex: 1; text-align:center; font-size: clamp(1rem, 2vw, 2rem);"></h2>
            <div id="divButton" class="div_x0cH0Hq" style="visibility:hidden">
                <button id="favorite" class="button_lvV6qZu" data-action="0">
                  ${useApp.svgIcon("fi fi-rr-heart")}
                </button>
            </div>

        </header>
        <div id="item" class="div_guZ6yID div_DtSQApy">
            <div id="itemNull" class="loader-i" style="--color:var(--app-color-letter)"></div>
            <div id="itemFalse" class="div_b14S3dH" style="display:none">
                ${useApp.svgIcon("fi fi-rr-search-alt")}
                <h3>La pelicula no existe</h3>
            </div> 
            <div id="itemTrue" class="div_hqzh2NV" style="display:none; padding:15px">

                <div class="div_cnJqhFl">
                  <div class="div_0JOSFlg">
                    <img id="poster" src="">
                  </div>
                  <div class="div_cxFXOaL">
                    <label class="label_zjZIMnZ" style="display:none">
                      <input type="checkbox" id="inputView">
                      <span style="display:flex"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-check"><path d="M22.319,4.431,8.5,18.249a1,1,0,0,1-1.417,0L1.739,12.9a1,1,0,0,0-1.417,0h0a1,1,0,0,0,0,1.417l5.346,5.345a3.008,3.008,0,0,0,4.25,0L23.736,5.847a1,1,0,0,0,0-1.416h0A1,1,0,0,0,22.319,4.431Z"></path></svg></span>
                    </label>
                    <button id="play" class="button_bDfhQ4b">
                      <small>
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-sr-play"><path d="M20.492,7.969,10.954.975A5,5,0,0,0,3,5.005V19a4.994,4.994,0,0,0,7.954,4.03l9.538-6.994a5,5,0,0,0,0-8.062Z"></path></svg>
                      </small>
                      <span>Reproducir</span>
                    </button>
                  </div>
                </div>
                
                <hr class="hr_nTfcjTI">
                <div class="div_BIchAsC">

                    <form class="app-form-label-checkbox" id="form-filter-type">
                      <label>
                        <input type="radio" name="key" value="information" checked>
                        <span>Detalles</span>
                      </label>
                      <label>
                        <input type="radio" name="key" value="similar">
                        <span>Otros</span>
                      </label>
                    </form>
                      
                </div>
                <hr class="hr_nTfcjTI">

                <div id="itemTrueInformation" class="div_cnJqhFl" >
                  <div class="div_aSwP0zW">
                      <span id="genres"></span>
                      <span id="duration"></span>
                      <span id="date"></span>
                  </div>
                  <p id="overview" style="font-size:14px"></p>
                </div>

                <div id="itemTrueSimilar" class="div_wNo9gA9" style="display:none; padding: 15px 0">
                  <div id="episodes" class="div_qsNmfP3" style="padding: 0"></div>
                </div>

            </div>
        </div>
        
        <div id="itemTrueOption" class="div_5Pe946IMjyL1Rs" popover>
            <div class="div_dsb3nhtCrFmUlSN p-10px">
                <div class="div_cXaADrL pointer-on">
                    <div id="itemTrueOptionVideos" class="div_lm2WViG"></div>
                </div>
            </div>
        </div>
    </div>
  `);

  const $elements = useApp.MyFunction.createObjectElement(
    $element.querySelectorAll("[id]"),
    "id",
    true
  );

  useThis.oValues.favorite.observe((boolean) => {
    $elements.favorite.innerHTML = useApp.svgIcon(
      boolean ? "fi fi-sr-heart" : "fi fi-rr-heart"
    );

    $elements.favorite.setAttribute("data-action", boolean ? 1 : 0);
  });

  useThis.oValues.view.observe((boolean) => {
    $elements.inputView.checked = boolean;
  });

  useThis.functions.dataRenderTrue = (data) => {
    try {
      const thisMovie = data.info;
      const fromSecondsToTime = useApp.MyFunction.fromSecondsToTime(
        thisMovie.runtime * 60
      );

      // const slug = thisMovie.url.slug
      //   .split("/")
      //   .map((name) => {
      //     if (name == "movies") return "pelicula";
      //     else if (name == "series") return "serie";
      //     else if (name == "seasons") return "temporada";
      //     else if (name == "episodes") return "episodio";
      //     return name;
      //   })
      //   .join("/");

      const duration = thisMovie.duration?.split?.(":");

      $elements.poster.src = useApp.url.img(thisMovie.movie_image);

      $elements.textTitle.textContent = thisMovie.name;
      $elements.overview.textContent = thisMovie.description;
      $elements.genres.textContent = thisMovie.genre;

      $elements.duration.textContent = `${duration[0]}h ${duration[1]}min`;
      $elements.date.textContent = thisMovie.releasedate?.split?.("-")[0] ?? "";

      $elements.play.style.display = "";
      $elements.play.setAttribute("data-data", JSON.stringify(thisMovie));
      // $elements.play.setAttribute("data-slug", `https://cuevana.biz/${slug}`);

      // useApp.mediaPlayer.info({
      //   title: thisMovie.titles.name,
      //   description: thisMovie.genres.map((genre) => genre.name).join(", "),
      // });

      // useApp.mediaPlayer.controls({
      //   options: {
      //     not: ["download"],
      //   },
      // });

      useApp.MyClass.MyImage.canvas($elements.poster.src).then((result) => {
        const pixelData = result.ctx.getImageData(0, 0, 1, 1).data;
        const r = pixelData[0];
        const g = pixelData[1];
        const b = pixelData[2];

        const color = useApp.MyClass.MyColor.toDark({ rgb: [r, g, b] }, 50);

        $elements.itemTrueOptionVideos.parentElement.style.background =
          useApp.MyClass.MyColor.toDark({ rgb: [r, g, b] }, 60);

        useApp.elements.meta.color.setAttribute("content", color);
        $element.style.background = color;

        Android.colorSystemBar(color);
      });

      // const objectMovies = Object.values(data.props.pageProps)
      //   .filter((value) => Array.isArray(value))
      //   .flat()
      //   .reduce((prev, curr) => {
      //     if (!prev[curr.TMDbId]) {
      //       prev[curr.TMDbId] = curr;
      //     }

      //     return prev;
      //   }, {});

      // $elements.episodes.innerHTML = Object.values(objectMovies)
      //   .map((data) => {
      //     const type =
      //       data.url.slug.split("/")[0] == "movies" ? "pelicula" : "serie";

      //     if (data.images.poster == null) {
      //       return '<div style="display:none"></div>';
      //     }
      //     const url = data.images.poster.replace("/original/", "/w185/");

      //     return `
      //     <a
      //       href="#/${type}/${data.TMDbId}"
      //       class="div_SQpqup7"
      //       data-item>
      //         <div class="div_fMC1uk6">
      //           <img src="${url}" alt="">
      //           <span>${type}</span>
      //         </div>
      //         <div class="div_9nWIRZE">
      //           <p>${data.titles.name}</p>
      //         </div>
      //     </a>
      //   `;
      //   })
      //   .join("");

      useThis.functions.dataTrueInfo(thisMovie);

      $elements.itemNull.style.display = "none";
      $elements.itemTrue.style.display = "";
    } catch (error) {
      alert(error);
    }
  };

  useThis.functions.dataTrueInfo = (data) => {
    return null;
  };

  useThis.functions.getLinkServer = (url) => {
    const newURL = new URL(url);
    const hostSplit = newURL.host.split(".");
    const host = hostSplit.length == 3 ? hostSplit[1] : hostSplit[0];
    const mediaPlayer = useApp.mediaPlayer;

    if (["streamwish"].includes(host)) {
      MediaWebUrl.streamwish({ url: url }).then((res) => {
        if (res.status) {
          Android.openWithDefault(res.url, "video/*");
          return;
        } else alert("Video no disponible");
      });
    } else if (["voe"].includes(host)) {
      MediaWebUrl.voesx({ url: url }).then((res) => {
        if (res.status) {
          Android.openWithDefault(res.url, "video/*");
          return;
        } else alert("Video no disponible");
      });
    } else if (["doodstream"].includes(host)) {
      MediaWebUrl.doodstream({ url: url }).then((res) => {
        if (res.status) {
          Android.openWithDefault(res.url, "video/*");
          return;
        } else alert("Video no disponible");
      });
    } else if (["yourupload"].includes(host)) {
      MediaWeb.yourupload({ url: url }).then((res) => {
        if (res.body.status) {
          mediaPlayer.video((video) => {
            video.src = res.body.url;
          });
        } else alert("Video no disponible");
      });
    }
  };

  useThis.functions.dataTrue = () => {
    fetch(
      "https://fetch.vniox.com/get.php?url=" +
        encodeURIComponent(
          `${useApp.iptv.server}/player_api.php?username=${useApp.iptv.username}&password=${useApp.iptv.password}&action=get_vod_info&vod_id=${useThis.params.id}`
        )
    )
      .then((res) => res.json())
      .then((data) => {
        useThis.values.data = data;
        useThis.values.thisMovie = data.info;
        useThis.functions.dataRenderTrue(data);
      });

    // ApiWebCuevana.peliculaId(useThis.params.id).then((data) => {
    //   useThis.values.data = data;
    //   useThis.values.thisMovie = data.props.pageProps.thisMovie;
    //   useThis.functions.dataRenderTrue(data);
    // });
  };

  useThis.functions.updateHistory = (currentTime, duration = 0) => {
    console.log("visto");
    console.log(useThis.values.isConnected);
  };

  useThis.functions.updateHistoryVideo = () => {
    useApp.mediaPlayer.video((video) => {
      let times = {};
      let status = false;

      video.src = "";

      video.onloadedmetadata = () => {
        times = {};
        status = false;

        const currentTime =
          parseInt(
            useThis.values.streaming?.episodes?.[useThis.values.episode]
              ?.time_view
          ) || 0;

        video.currentTime = currentTime;
      };

      video.ontimeupdate = (e) => {
        if (status) {
          const num = Math.floor(e.target.currentTime);

          if (num > 0 && num % 15 == 0 && !times[num]) {
            times[num] = true;
            useThis.functions.updateHistory(
              num,
              Math.ceil(video.duration) || 0
            );
          }
        }
      };

      video.onseeked = () => {
        const currentTime = Math.floor(video.currentTime);
        useThis.functions.updateHistory(
          currentTime,
          Math.ceil(video.duration) || 0
        );

        times = {};
        times[currentTime] = true;

        status = true;
      };
    });
  };

  $elements.play.addEventListener("click", () => {
    Android.openWithDefault(
      `${useApp.iptv.server}/movie/${useApp.iptv.username}/${useApp.iptv.password}/${useThis.values.data.movie_data.stream_id}.${useThis.values.data.movie_data.container_extension}`,
      "video/*"
    );

    return;
  });

  $elements.favorite.addEventListener("click", () => {
    return;
  });

  $elements.inputView.addEventListener("change", () => {
    // if (!useThis.values.isConnected) {
    //   return (location.hash = "#/login");
    // }

    // useThis.oValues.view.value = !useThis.oValues.view.value;

    const encodeQueryString = useApp.MyFunction.encodeQueryObject({
      route: "toggle-views",
      data_id: useThis.values.thisMovie.TMDbId,
      type: 2,
      action: $elements.inputView.checked ? 1 : 0,
    });

    fetch(
      useApp.url.server(`/api.php?${encodeQueryString}`),
      useApp.fetchOptions({
        method: "GET",
      })
    )
      .then((res) => res.json())
      .then((data) => {
        if (data == null) {
          location.hash = "#/login";
          return;
        }

        if (data?.status) {
          $elements.inputView.checked = data.type == 1;
        }
      });
  });

  $elements.itemTrueOptionVideos.addEventListener("click", (e) => {
    const button = e.target.closest("button");
    if (button) {
      $elements.itemTrueOption.hidePopover();

      ApiWebCuevana.serverUrl(button.getAttribute("data-url")).then((url) => {
        useThis.functions.getLinkServer(url);
      });

      useApp.mediaPlayer.element().requestFullscreen();
      useThis.functions.updateHistoryVideo();

      if ("mediaSession" in navigator) {
        navigator.mediaSession.metadata = new MediaMetadata({
          title: $elements.textTitle.textContent,
          artist: $elements.genres.textContent,
          album: "Pelicula",
          artwork: [
            {
              src: $elements.poster.src,
              sizes: "512x512",
              type: "image/png",
            },
          ],
        });
      }
    }
  });

  $elements.itemTrueOption.addEventListener("click", (e) => {
    if (e.target === e.currentTarget) {
      $elements.itemTrueOption.hidePopover();
    }
  });

  $elements["form-filter-type"].addEventListener("change", () => {
    const value = $elements["form-filter-type"].key.value;

    const elements = {
      information: $elements.itemTrueInformation,
      similar: $elements.itemTrueSimilar,
    };

    Object.entries(elements).forEach((entries) => {
      entries[1].style.display = entries[0] == value ? "" : "none";
    });
  });

  useApp.elements.meta.color.setAttribute("content", "#000000");
  useThis.functions.dataTrue();

  useApp.functions.historyBack($element.querySelector("[data-history-back]"));

  Android.colorSystemBar("#000000");

  return $element;
};

var iptvSerieId = () => {
  const useApp = window.dataApp;
  const useThis = {
    params: useApp.routes.params(),
    functions: {},
    oValues: {
      isFavorite: useApp.MyFunction.observeValue(false),
      isView: useApp.MyFunction.observeValue(false),
      episodes: useApp.MyFunction.observeValue([]),
    },
    values: {
      dataInfo: null,
      isConnected: false,
      observes: [],
      streaming: {},
      episode: -1,
      data_id: "",
      data: null,
      thisSerie: {},
    },
  };

  const $element = useApp.MyFunction.createNodeElement(`
    <div class="div_Xu02Xjh div_mrXVL9t" style="position:fixed">
        <header class="header_K0hs3I0 header_XpmKRuK header_RtX3J1X">

            <div class="div_uNg74XS">
                <a href="#" class="button_lvV6qZu" data-history-back>
                  ${useApp.svgIcon("fi fi-rr-angle-small-left")}
                </a>
            </div>
            <h2 id="title" style="flex: 1; text-align:center; font-size: clamp(1rem, 2vw, 2rem);"></h2>
            <div class="div_x0cH0Hq">
                <button id="favorite" class="button_lvV6qZu" data-action="0" style="visibility:hidden">
                  ${useApp.svgIcon("fi fi-rr-heart")}
                </button>
            </div>

        </header>

        <div id="item" class="div_guZ6yID div_DtSQApy" >
            <div id="itemNull" class="loader-i" style="--color:var(--app-color-letter)"></div>
            <div id="itemFalse" class="div_b14S3dH" style="display:none">
                ${useApp.svgIcon("fi fi-rr-search-alt")}
                <h3>La pelicula no existe</h3>
            </div>
            <div id="itemTrue" class="div_hqzh2NV" style="display:none; padding:15px">

                <div class="div_cnJqhFl">
                  <div class="div_0JOSFlg">
                    <img id="poster" src="">
                  </div>
                  <div class="div_cxFXOaL">
                    <label class="label_zjZIMnZ" style="pointer-events:none; opacity:.3">
                      <input type="checkbox" id="inputView">
                      <span style="display:flex"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-check"><path d="M22.319,4.431,8.5,18.249a1,1,0,0,1-1.417,0L1.739,12.9a1,1,0,0,0-1.417,0h0a1,1,0,0,0,0,1.417l5.346,5.345a3.008,3.008,0,0,0,4.25,0L23.736,5.847a1,1,0,0,0,0-1.416h0A1,1,0,0,0,22.319,4.431Z"></path></svg></span>
                    </label>
                    <button id="play" class="button_bDfhQ4b" style="display:none">
                      <small>
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-sr-play"><path d="M20.492,7.969,10.954.975A5,5,0,0,0,3,5.005V19a4.994,4.994,0,0,0,7.954,4.03l9.538-6.994a5,5,0,0,0,0-8.062Z"></path></svg>
                      </small>
                      <span>Reproducir</span>
                    </button>
                  </div>
                </div>

                <hr class="hr_nTfcjTI">
                <div class="div_BIchAsC">

                    <form class="app-form-label-checkbox" id="form-filter-type">
                      <label>
                        <input type="radio" name="key" value="information" checked>
                        <span>Detalles</span>
                      </label>
                      <label>
                        <input type="radio" name="key" value="chapter">
                        <span>Capitulos</span>
                      </label>
                      <label>
                        <input type="radio" name="key" value="similar">
                        <span>Otros</span>
                      </label>
                    </form>
                      
                </div>
                <hr class="hr_nTfcjTI">

                <div id="itemTrueInformation" class="div_cnJqhFl" >
                  <div class="div_aSwP0zW">
                      <span id="genres"></span>
                      <span id="duration"></span>
                      <span id="date"></span>
                  </div>
                  <p id="overview" style="font-size:14px"></p>
                </div>

                <div id="itemTrueChapter" class="div_rJOqfX3" style="display:none">
                    <div class="div_mu7pmfs">
                      <div class="div_xesi90n">
                        <select id="selectSeason">
                          <option>Temporada 1</option>
                        </select>
                        <button id="buttonSeasonOrder">
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-sort-alt"><path d="M11.293,17.707l-3.293,3.293V1c0-.553-.447-1-1-1s-1,.447-1,1V21l-3.293-3.293c-.391-.391-1.023-.391-1.414,0s-.391,1.023,0,1.414l4.293,4.293c.39,.39,.902,.585,1.414,.585s1.024-.195,1.414-.585l4.293-4.293c.391-.391,.391-1.023,0-1.414s-1.023-.391-1.414,0ZM22.707,6.293c.391-.391,.391-1.023,0-1.414L18.414,.586C18.024,.196,17.512,0,17,0s-1.024,.195-1.414,.585l-4.293,4.293c-.391,.391-.391,1.023,0,1.414s1.023,.391,1.414,0l3.293-3.293V23c0,.553,.447,1,1,1s1-.447,1-1V3l3.293,3.293c.391,.391,1.023,.391,1.414,0Z"></path></svg>
                        </button>
                      </div>
                    </div>
                    <div id="episodes" class="div_bi3qmqX" data-class="div_2cD7Iqb"></div>
                </div>

                <div id="itemTrueSimilar" class="div_wNo9gA9" style="display:none; padding: 15px 0">
                  <div id="similar" class="div_qsNmfP3" style="padding: 0"></div>
                </div>
                
            </div>
        </div>
       
        <div id="itemTrueOption" class="div_5Pe946IMjyL1Rs" popover>
            <div class="div_dsb3nhtCrFmUlSN p-10px">
                <div class="div_cXaADrL pointer-on">
                    <div id="itemTrueOptionVideos" class="div_lm2WViG"></div>
                </div>
            </div>
        </div>
    </div>
`);

  const $elements = useApp.MyFunction.createObjectElement(
    $element.querySelectorAll("[id]"),
    "id",
    true
  );

  useThis.oValues.isFavorite.observe((boolean) => {
    $elements.favorite.innerHTML = useApp.svgIcon(
      boolean ? "fi fi-sr-heart" : "fi fi-rr-heart"
    );
  });

  useThis.oValues.isView.observe((boolean) => {
    $elements.inputView.checked = boolean;
  });

  useThis.functions.dataRenderTrue = (data) => {
    try {
      const thisSerie = data.info;

      $elements.poster.src = useApp.url.img(thisSerie.cover);
 
      $elements.title.textContent = thisSerie.name;
      $elements.overview.textContent = thisSerie.plot;
      $elements.genres.textContent = thisSerie.genre;

      $elements.duration.textContent = `${data.seasons.length} temporadas`;
      $elements.date.textContent = new Date(
        thisSerie.releaseDate
      ).getFullYear();

      // const objectMovies = Object.values(data.props.pageProps)
      //   .filter((value) => Array.isArray(value))
      //   .flat()
      //   .reduce((prev, curr) => {
      //     if (!prev[curr.TMDbId] && curr.TMDbId != data.TMDbId) {
      //       prev[curr.TMDbId] = curr;
      //     }

      //     return prev;
      //   }, {});

      // $elements.similar.innerHTML = Object.values(objectMovies)
      //   .map((data) => {
      //     const type =
      //       data.url.slug.split("/")[0] == "movies" ? "pelicula" : "serie";

      //     if (data.images.poster == null) {
      //       return '<div style="display:none"></div>';
      //     }
      //     const url = data.images.poster.replace("/original/", "/w185/");

      //     return `
      //     <a
      //       href="#/${type}/${data.TMDbId}"
      //       class="div_SQpqup7"
      //       data-item>
      //         <div class="div_fMC1uk6">
      //           <img src="${url}" alt="">
      //           <span>${type}</span>
      //         </div>
      //         <div class="div_9nWIRZE">
      //           <p>${data.titles.name}</p>
      //         </div>
      //     </a>
      //   `;
      //   })
      //   .join("");

      $elements.selectSeason.innerHTML = Object.keys(data.episodes)
        .map((season) => {
          return `
          <option value="${season}">Temporada ${season}</option>
        `;
        })
        .join("");

      useApp.MyClass.MyImage.canvas($elements.poster.src).then((result) => {
        const pixelData = result.ctx.getImageData(0, 0, 1, 1).data;
        const r = pixelData[0];
        const g = pixelData[1];
        const b = pixelData[2];

        const color = useApp.MyClass.MyColor.toDark({ rgb: [r, g, b] }, 50);

        $elements.itemTrueOptionVideos.parentElement.style.background =
          useApp.MyClass.MyColor.toDark({ rgb: [r, g, b] }, 60);

        useApp.elements.meta.color.setAttribute("content", color);
        $element.style.background = color;
        Android.colorSystemBar(color);
      });

      useThis.functions.renderSeason($elements.selectSeason.value);
      // useThis.functions.dataTrueInfo(thisSerie);

      $elements.itemNull.style.display = "none";
      $elements.itemTrue.style.display = "";
    } catch (error) {
      alert(error);
    }
  };

  useThis.functions.dataTrueInfo = (data) => {
    return;
  };

  useThis.functions.renderSeason = (index = 0) => {
    // const seasons = useThis.values.thisSerie.seasons.filter(
    //   (season) => season.episodes.length
    // );

    // const episodes = seasons[index].episodes;
    // const season = seasons[index].number;

    const array = useThis.values.data.episodes[index];

    $elements.episodes.innerHTML = array
      .map((episode) => {
        // const episodeInfo =
        //   useThis.values.streaming?.episodes?.[`${season}-${episode.number}`];

        const dataData = useApp.MyClass.EncodeTemplateString.toInput(
          JSON.stringify(episode)
        );

        // const checked = episodeInfo != undefined ? "checked" : "";
        const displayInput = "display:none";

        return `
          <div data-episode="${episode.number}" class="div_eGwK6I1">
            <button 
            class="button_fk0VHgU" 
              data-data="${dataData}" 
              data-season="${index}"
              data-episode="${episode.episode_num}"
              data-item>
                <span>
                  T${index} 
                  E${episode.episode_num.toString().padStart(2, "0")}
                </span>
                <small>
               
                </small>
            </button>
            <label class="label_zjZIMnZ" style="${displayInput}">
              <input type="checkbox" 
                data-season="" 
                data-episode="">
              <span style="display:flex"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-check"><path d="M22.319,4.431,8.5,18.249a1,1,0,0,1-1.417,0L1.739,12.9a1,1,0,0,0-1.417,0h0a1,1,0,0,0,0,1.417l5.346,5.345a3.008,3.008,0,0,0,4.25,0L23.736,5.847a1,1,0,0,0,0-1.416h0A1,1,0,0,0,22.319,4.431Z"></path></svg></span>
            </label>
          </div>
        `;
      })
      .join("");

    // if (!episodes.length) {
    //   $elements.episodes.innerHTML = `
    //     <div class="div_Qm4cPUn">
    //       <div id="itemFalse" class="div_b14S3dH">
    //         ${useApp.svgIcon("fi fi-rr-search-alt")}
    //         <h3>No hay capitulos</h3>
    //       </div>
    //     </div>
    //   `;
    // }
  };

  useThis.functions.setLinkServer = (url) => {
    const newURL = new URL(url);
    const hostSplit = newURL.host.split(".");
    const host = hostSplit.length == 3 ? hostSplit[1] : hostSplit[0];

    const mediaPlayer = useApp.mediaPlayer;

    if (["streamwish"].includes(host)) {
      MediaWebUrl.streamwish({ url: url }).then((res) => {
        if (res.status) {
          Android.openWithDefault(res.url, "video/*");
          return;
        } else alert("Video no disponible");
      });
    } else if (["voe"].includes(host)) {
      MediaWebUrl.voesx({ url: url }).then((res) => {
        if (res.status) {
          Android.openWithDefault(res.url, "video/*");
          return;
        } else alert("Video no disponible");
      });
    } else if (["doodstream"].includes(host)) {
      MediaWebUrl.doodstream({ url: url }).then((res) => {
        if (res.body.status) {
          Android.openWithDefault(res.url, "video/*");
          return;
        } else alert("Video no disponible");
      });
    } else if (["yourupload"].includes(host)) {
      MediaWeb.yourupload({ url: url }).then((res) => {
        if (res.body.status) {
          mediaPlayer.video((video) => {
            video.src = res.body.url;
          });
        } else alert("Video no disponible");
      });
    }
  };

  useThis.functions.dataTrue = () => {
    fetch(
      "https://fetch.vniox.com/get.php?url=" +
        encodeURIComponent(
          `${useApp.iptv.server}/player_api.php?username=${useApp.iptv.username}&password=${useApp.iptv.password}&action=get_series_info&series_id=${useThis.params.id}`
        )
    )
      .then((res) => res.json())
      .then((data) => {
        // alert(useThis.params.id);

        useThis.values.data = data;
        useThis.values.thisSerie = data.info;
        useThis.functions.dataRenderTrue(data);
      });

    // ApiWebCuevana.serieId(useThis.params.id).then((data) => {
    //   useThis.values.data = data;
    //   useThis.values.thisSerie = data.props.pageProps.thisSerie;

    //   useThis.functions.dataRenderTrue(data);
    // });
  };

  useThis.functions.unobserve = () => {
    for (const observe of useThis.values.observes) {
      useApp.instances.IntersectionObserver.unobserve(observe);
    }

    useThis.values.observes = [];
  };

  useThis.functions.updateHistory = (currentTime, duration = 0) => {
  };

  useThis.functions.updateHistoryVideo = () => {
    useApp.mediaPlayer.video((video) => {
      let times = {};
      let status = false;

      video.src = "";

      video.onloadedmetadata = () => {
        times = {};
        status = false;

        const currentTime =
          parseInt(
            useThis.values.streaming?.episodes?.[useThis.values.episode]
              ?.time_view
          ) || 0;

        video.currentTime = currentTime;
      };

      video.ontimeupdate = (e) => {
        if (status) {
          const num = Math.floor(e.target.currentTime);

          if (num > 0 && num % 15 == 0 && !times[num]) {
            times[num] = true;
            useThis.functions.updateHistory(
              num,
              Math.ceil(video.duration) || 0
            );
          }
        }
      };

      video.onseeked = () => {
        const currentTime = Math.floor(video.currentTime);
        useThis.functions.updateHistory(
          currentTime,
          Math.ceil(video.duration) || 0
        );

        times = {};
        times[currentTime] = true;

        status = true;
      };
    });
  };

  $elements.selectSeason.addEventListener("change", () => {
    useThis.functions.renderSeason($elements.selectSeason.value);
  });

  $elements.buttonSeasonOrder.addEventListener("click", () => {
    $elements.episodes.append(
      ...Array.from($elements.episodes.children).reverse()
    );
  });

  $elements.episodes.addEventListener("click", (e) => {
    const item = e.target.closest("[data-item]");
    // const input = e.target.closest("input");
    if (item) {
      const data = JSON.parse(item.getAttribute("data-data"));

      Android.openWithDefault(
        `${useApp.iptv.server}/series/${useApp.iptv.username}/${useApp.iptv.password}/${data.id}.${data.container_extension}`,
        "video/*"
      );

      return;
    }

    // if (input) {
    //   const encodeQueryString = useApp.MyFunction.encodeQueryObject({
    //     route: "toggle-history-view",
    //     episode: `${input.dataset.season}-${input.dataset.episode}`,
    //     datetime: Date.now(),
    //     data_id: useThis.values.data_id,
    //     type: 3,
    //     action: input.checked ? 1 : 0,
    //   });

    //   fetch(
    //     useApp.url.server(`/api.php?${encodeQueryString}`),
    //     useApp.fetchOptions({
    //       method: "GET",
    //     })
    //   )
    //     .then((res) => res.json())
    //     .then((data) => {
    //       if (data?.status) {
    //         input.checked = data.type == 1;
    //       }
    //     });
    // }
  });

  $elements.favorite.addEventListener("click", () => {
    $elements.favorite.setAttribute(
      "data-action",
      $elements.favorite.getAttribute("data-action") != 0 ? 0 : 1
    );

    // if (!useThis.values.isConnected) {
    //   return (location.hash = "#/login");
    // }

    useThis.oValues.isFavorite.value = !useThis.oValues.isFavorite.value;

    const encodeQueryString = useApp.MyFunction.encodeQueryObject({
      route: "toggle-favorites",
      data_id: useThis.values.thisSerie.TMDbId,
      type: 3,
      action: $elements.favorite.dataset.action,
    });

    fetch(
      useApp.url.server(`/api.php?${encodeQueryString}`),
      useApp.fetchOptions({
        method: "GET",
      })
    )
      .then((res) => res.json())
      .then((data) => {
        if (data == null) {
          location.hash = "#/login";
          return;
        }

        if (data?.status) {
          useThis.oValues.isFavorite.value = data.type == 1;
        }
      });
  });

  $elements.inputView.addEventListener("click", () => {
    // if (!useThis.values.isConnected) {
    //   return (location.hash = "#/login");
    // }

    const encodeQueryString = useApp.MyFunction.encodeQueryObject({
      route: "toggle-views",
      data_id: useThis.values.thisSerie.TMDbId,
      type: 3,
      action: $elements.inputView.checked ? 1 : 0,
    });

    fetch(
      useApp.url.server(`/api.php?${encodeQueryString}`),
      useApp.fetchOptions({
        method: "GET",
      })
    )
      .then((res) => res.json())
      .then((data) => {
        if (data == null) {
          location.hash = "#/login";
          return;
        }

        if (data?.status) {
          $elements.inputView.checked = data.type == 1;
        }
      });
  });

  $elements.itemTrueOptionVideos.addEventListener("click", (e) => {
    const button = e.target.closest("button");
    if (button) {
      useThis.values.episode = $elements.itemTrueOptionVideos.dataset.episode;
      const [season, episode] = useThis.values.episode.split("-");

      $elements.itemTrueOption.hidePopover();
      useApp.mediaPlayer.element().requestFullscreen();
      useThis.functions.updateHistoryVideo();

      useApp.mediaPlayer.info({
        title: useThis.values.dataInfo.props.pageProps.episode.title,
        description: useThis.values.dataInfo.props.pageProps.serie.genres
          .map((genre) => genre.name)
          .join(", "),
      });

      useApp.mediaPlayer.controls({
        options: {
          not: ["download"],
        },
      });

      ApiWebCuevana.serverUrl(button.getAttribute("data-url")).then((url) => {
        useThis.functions.setLinkServer(url);
      });

      if ("mediaSession" in navigator) {
        navigator.mediaSession.metadata = new MediaMetadata({
          title: $elements.title.textContent,
          artist: `T${season.padStart(2, "0")} E${episode.padStart(2, "0")}`,
          album: "Serie",
          artwork: [
            {
              src: $elements.poster.src,
              sizes: "512x512",
              type: "image/png",
            },
          ],
        });
      }
    }
  });

  $elements.itemTrueOption.addEventListener("click", (e) => {
    if (e.target === e.currentTarget) {
      $elements.itemTrueOption.hidePopover();
    }
  });

  $elements["form-filter-type"].addEventListener("change", () => {
    const value = $elements["form-filter-type"].key.value;

    const elements = {
      information: $elements.itemTrueInformation,
      chapter: $elements.itemTrueChapter,
      similar: $elements.itemTrueSimilar,
    };

    Object.entries(elements).forEach((entries) => {
      entries[1].style.display = entries[0] == value ? "" : "none";
    });
  });

  addEventListener(
    "hashchange",
    () => {
      useThis.functions.unobserve();
    },
    { once: true }
  );

  useApp.elements.meta.color.setAttribute("content", "#000000");
  useThis.functions.dataTrue();

  useApp.functions.historyBack($element.querySelector("[data-history-back]"));

  Android.colorSystemBar("#000000");

  return $element;
};

var routes = () => {
  const useApp = window.dataApp;
  const useThis = {
    values: {
      pages: {},
    },
    element: {
      route: document.createElement("div"),
    },
    elements: {
      inicio: inicio(),
      theme: theme(),
    },
  };

  useApp.routes.set([
    { hash: "/", callback: () => useThis.elements.inicio },
    { hash: "/login", callback: () => routesPublic(login) },
    { hash: "/register", callback: () => routesPublic(register) },

    { hash: "/login/:key/:value", callback: () => routesPublic(loginKeyValue) },
    { hash: "/profile", callback: () => routesPrivate(profile) },

    { hash: "/pelicula/:id", callback: peliculaId },
    { hash: "/serie/:id", callback: serieId },
    { hash: "/anime/:id", callback: animeId },

    { hash: "/pelicula-ii/:id", callback: iptvPeliculaId },
    { hash: "/serie-ii/:id", callback: iptvSerieId },

    { hash: "/search", callback: searchType },
    { hash: "/search/:result", callback: searchType },
    { hash: "/search/:result/result", callback: searchTypeResult },

    { hash: "/favorite", callback: () => routesPrivate(favoritos) },
    { hash: "/historial", callback: () => routesPrivate(historial) },
    { hash: "/theme", callback: () => useThis.elements.theme },
    { hash: "/setting", callback: setting },
  ]);

  if (history.length <= 2 || history.state == null) {
    history.replaceState({ start: true }, null, location.href);
  }

  addEventListener("hashchange", (e) => {
    // try {
    //   useApp.elements.meta.color.setAttribute(
    //     "content",
    //     localStorage.getItem("theme") == "light" ? "#F7F7F7" : "#000000"
    //   );

    //   Android.colorSystemBar(
    //     localStorage.getItem("theme") == "light" ? "#F7F7F7" : "#000000"
    //   );
    // } catch (error) {}

    let uuid = history.state?.uuid ?? useApp.functions.generateUUID();

    if (!Boolean(e instanceof CustomEvent) && history.state == null) {
      history.replaceState({ start: false, uuid }, null, location.href);
    }

    useThis.element.route.innerHTML = "";

    if (navigator.onLine) {
      // useThis.values.pages[uuid] || useApp.routes.get() || "";
      useThis.element.route.append(useApp.routes.get() || "");
    } else {
      useThis.element.route.append(offline());
    }
  });

  return useThis.element.route;
};

class ElementMakeDrag {
  constructor(element) {
    this._element = element;
    this._events = {};
  }

  on = (type, callback) => {
    this._events[type] = callback;
  };

  start = () => {
    let draggable = this._element;
    let element = this._element;

    const startDragging = (e) => {
      if (typeof this._events.start == "function") {
        this._events.start({
          e,
          target: draggable,
        });
      }

      if (e.type === "mousedown") {
        e.preventDefault();
      }

      element.addEventListener("touchmove", drag, { passive: false });
      element.addEventListener("touchend", stopDragging);
      element.addEventListener("mousemove", drag);
      element.addEventListener("mouseup", stopDragging);
      element.addEventListener("mouseleave", stopDragging);
    };

    const drag = (e) => {
      if (typeof this._events.move == "function") {
        this._events.move({
          e,
          target: draggable,
        });
      }
    };

    const stopDragging = (e) => {
      // allowtouchstart = true;
      if (typeof this._events.end == "function") {
        this._events.end({
          e,
          target: draggable,
        });
      }

      if (e.touches && e.touches.length > 0) return;
      element.removeEventListener("touchmove", drag);
      element.removeEventListener("touchend", stopDragging);
      element.removeEventListener("mousemove", drag);
      element.removeEventListener("mouseup", stopDragging);
      element.removeEventListener("mouseleave", stopDragging);
    };

    draggable.addEventListener("touchstart", startDragging, {
      passive: false,
    });
    draggable.addEventListener("mousedown", startDragging);
  };
}

function calculateNewPosition(
  top,
  left,
  width,
  height,
  newWidth,
  newHeight
) {
  // Calcula la diferencia en tamaño para cada eje
  const deltaX = (newWidth - width) / 2;
  const deltaY = (newHeight - height) / 2;

  // Ajusta las posiciones de left y top para mantener el centro
  const newLeft = left - deltaX;
  const newTop = top - deltaY;

  return { top: newTop, left: newLeft };
}

var footerVideoPlayer = () => {
  const useApp = window.dataApp;
  const useThis = {
    elements: {
      video: useApp.mediaPlayer.element("video"),
    },
    classes: {
      divPreview: null,
      divPrueba: null,
    },
    values: {
      pinch: {
        start: false,
        escala: 1,
        ultimaDistancia: 0,
      },
    },
  };

  const $element = useApp.MyFunction.createNodeElement(`
        <footer class="footer_rTzBt2c">

            <div id="divPrueba" class="div_MJ5Ba2C" style="pointer-events:none;">
              <div id="divPreview" class="div_wPiZgS6" style="display:none;">
                  <div id="divPreviewContent" class="d-grid">
                    <canvas id="canvasVideo" style="aspect-ratio: 16/9;"></canvas>
                    <div class="div_OZ6oAgh"><span id="spanBar"></span></div>
                    <div class="div_lq8dhAa">
                        <button id="buttonPlayPause"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-play"><path d="M20.494,7.968l-9.54-7A5,5,0,0,0,3,5V19a5,5,0,0,0,7.957,4.031l9.54-7a5,5,0,0,0,0-8.064Zm-1.184,6.45-9.54,7A3,3,0,0,1,5,19V5A2.948,2.948,0,0,1,6.641,2.328,3.018,3.018,0,0,1,8.006,2a2.97,2.97,0,0,1,1.764.589l9.54,7a3,3,0,0,1,0,4.836Z"></path></svg></button>
                        <button id="buttonPIP"><svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" data-svg-name="fi fi-rr-resize"><path d="m19 0h-8a5.006 5.006 0 0 0 -5 5v6h-1a5.006 5.006 0 0 0 -5 5v3a5.006 5.006 0 0 0 5 5h3a5.006 5.006 0 0 0 5-5v-1h6a5.006 5.006 0 0 0 5-5v-8a5.006 5.006 0 0 0 -5-5zm-8 16a3 3 0 0 1 -3-3 3 3 0 0 1 3 3zm0 3a3 3 0 0 1 -3 3h-3a3 3 0 0 1 -3-3v-3a3 3 0 0 1 3-3h1a5.006 5.006 0 0 0 5 5zm11-6a3 3 0 0 1 -3 3h-6a4.969 4.969 0 0 0 -.833-2.753l5.833-5.833v2.586a1 1 0 0 0 2 0v-3a3 3 0 0 0 -3-3h-3a1 1 0 0 0 0 2h2.586l-5.833 5.833a4.969 4.969 0 0 0 -2.753-.833v-6a3 3 0 0 1 3-3h8a3 3 0 0 1 3 3z"></path></svg></button>
                        <button id="buttonCloseVideo"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-cross"><path d="M23.707.293h0a1,1,0,0,0-1.414,0L12,10.586,1.707.293a1,1,0,0,0-1.414,0h0a1,1,0,0,0,0,1.414L10.586,12,.293,22.293a1,1,0,0,0,0,1.414h0a1,1,0,0,0,1.414,0L12,13.414,22.293,23.707a1,1,0,0,0,1.414,0h0a1,1,0,0,0,0-1.414L13.414,12,23.707,1.707A1,1,0,0,0,23.707.293Z"></path></svg></button>
                    </div>
                  </div>
              </div>
            </div>
            
            <div class="div_rFbZYz7">
                <div id="elementVideo" class="div_DFHkIAJ pointer-on"></div>
            </div>
            
        </footer>
  `);

  const $elements = useApp.MyFunction.createObjectElement(
    $element.querySelectorAll("[id]"),
    "id",
    true
  );

  const context = $elements.canvasVideo.getContext("2d");

  const draw = () => {
    const video = useThis.elements.video;
    const canvas = $elements.canvasVideo;
    if (!video.paused && !video.ended) {
      context.drawImage(video, 0, 0, canvas.width, canvas.height);
      requestAnimationFrame(draw);
    }
  };

  $elements.canvasVideo.addEventListener("click", () => {
    useApp.mediaPlayer.element().requestFullscreen();
  });

  $elements.buttonPlayPause.addEventListener("click", () => {
    if (useThis.elements.video.paused) useThis.elements.video.play();
    else useThis.elements.video.pause();
  });

  $elements.buttonPIP.addEventListener("click", () => {
    useThis.elements.video.requestPictureInPicture();
  });

  $elements.buttonCloseVideo.addEventListener("click", () => {
    $elements.divPreview.style.display = "none";
    useApp.mediaPlayer.video((video) => {
      video.src = "";
    });
  });

  useThis.elements.video.addEventListener("play", () => {
    $elements.buttonPlayPause.innerHTML =
      '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-pause"><path d="M6.5,0A3.5,3.5,0,0,0,3,3.5v17a3.5,3.5,0,0,0,7,0V3.5A3.5,3.5,0,0,0,6.5,0ZM8,20.5a1.5,1.5,0,0,1-3,0V3.5a1.5,1.5,0,0,1,3,0Z"></path><path d="M17.5,0A3.5,3.5,0,0,0,14,3.5v17a3.5,3.5,0,0,0,7,0V3.5A3.5,3.5,0,0,0,17.5,0ZM19,20.5a1.5,1.5,0,0,1-3,0V3.5a1.5,1.5,0,0,1,3,0Z"></path></svg>';
    draw();
  });
  useThis.elements.video.addEventListener("pause", () => {
    $elements.buttonPlayPause.innerHTML =
      '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" data-svg-name="fi fi-rr-play"><path d="M20.494,7.968l-9.54-7A5,5,0,0,0,3,5V19a5,5,0,0,0,7.957,4.031l9.54-7a5,5,0,0,0,0-8.064Zm-1.184,6.45-9.54,7A3,3,0,0,1,5,19V5A2.948,2.948,0,0,1,6.641,2.328,3.018,3.018,0,0,1,8.006,2a2.97,2.97,0,0,1,1.764.589l9.54,7a3,3,0,0,1,0,4.836Z"></path></svg>';
  });

  useThis.elements.video.addEventListener("timeupdate", () => {
    $elements.spanBar.style.width =
      useApp.MyClass.MyInt.percentage(
        useThis.elements.video.currentTime,
        useThis.elements.video.duration
      ) + "%";
  });

  useThis.elements.video.addEventListener("loadstart", () => {
    if (useThis.elements.video.getAttribute("src").trim()) {
      $elements.divPreview.style.display = "";
    }
  });

  useThis.elements.video.addEventListener("loadedmetadata", () => {
    $elements.canvasVideo.width = useThis.elements.video.videoWidth;
    $elements.canvasVideo.height = useThis.elements.video.videoHeight;
    $elements.canvasVideo.style.aspectRatio = "";
  });

  useThis.elements.video.addEventListener("error", (e) => {
    if (e.target.error.code == 3) {
      useApp.values.hls.recoverMediaError();
      e.target.play();
    }
  });

  useThis.elements.video.addEventListener("enterpictureinpicture", () => {
    $elements.divPreview.style.display = "none";
  });

  useThis.elements.video.addEventListener("leavepictureinpicture", () => {
    if (document.fullscreenElement) document.exitFullscreen();
    $elements.divPreview.style.display = "";
  });

  $elements.elementVideo.append(useApp.mediaPlayer.element());

  const function_pmgnvcdirebja = () => {
    const elementMakeDrag = new ElementMakeDrag($elements.divPrueba);
    const draggable = $elements.divPreview;

    const datapinch = {
      allow: false,
      startdistance: 0,
      lastdistance: 0,
      scale: 1,
    };

    const datamove = {
      allow: false,
      xy: {
        initial: {
          x: 0,
          y: 0,
        },
        current: {
          x: 0,
          y: 0,
        },
      },
    };

    elementMakeDrag.on("start", ({ e, target }) => {
      target.style.pointerEvents = "";

      if (e.touches) {
        if (!draggable.contains(e.touches[0].target)) return;
      }

      if (draggable.contains(e.target)) {
        datamove.allow = true;

        if (e.type === "touchstart") {
          const index = Array.from(e.touches).findIndex((touch) =>
            draggable.contains(touch.target)
          );

          datamove.xy.initial.x =
            e.touches[index].clientX - draggable.offsetLeft;
          datamove.xy.initial.y =
            e.touches[index].clientY - draggable.offsetTop;
        } else {
          datamove.xy.initial.x = e.clientX - draggable.offsetLeft;
          datamove.xy.initial.y = e.clientY - draggable.offsetTop;
        }

        if (e.touches && e.touches.length === 2) {
          datapinch.allow = true;
          datapinch.lastdistance = Math.hypot(
            e.touches[0].clientX - e.touches[1].clientX,
            e.touches[0].clientY - e.touches[1].clientY
          );
        }
      }
    });
    elementMakeDrag.on("move", ({ e }) => {
      if (datamove.allow) {
        $elements.divPreviewContent.style.pointerEvents = "none";

        if (e.type === "touchmove") {
          e.preventDefault();
          const index = Array.from(e.touches).findIndex((touch) =>
            draggable.contains(touch.target)
          );

          if (index != -1) {
            datamove.xy.current.x =
              e.touches[index].clientX - datamove.xy.initial.x;
            datamove.xy.current.y =
              e.touches[index].clientY - datamove.xy.initial.y;
          }
        } else {
          datamove.xy.current.x = e.clientX - datamove.xy.initial.x;
          datamove.xy.current.y = e.clientY - datamove.xy.initial.y;
        }

        const top = draggable.offsetHeight / 2;
        const left = draggable.offsetWidth / 2;

        const y = Math.max(
          top * -1,
          Math.min(
            datamove.xy.current.y,
            window.innerHeight - draggable.offsetHeight + top
          )
        );

        const x = Math.max(
          left * -1,
          Math.min(
            datamove.xy.current.x,
            window.innerWidth - draggable.offsetWidth + left
          )
        );

        draggable.style.top = `${y}px`;
        draggable.style.left = `${x}px`;

        draggable.style.right = "initial";
        draggable.style.bottom = "initial";
      }

      if (datapinch.allow) {
        if (e.touches && e.touches.length === 2) {
          const currentdistance = Math.hypot(
            e.touches[0].clientX - e.touches[1].clientX,
            e.touches[0].clientY - e.touches[1].clientY
          );

          if (
            (currentdistance > datapinch.lastdistance &&
              parseInt(draggable.style.width) == 700) ||
            (currentdistance < datapinch.lastdistance &&
              parseInt(draggable.style.width) == 150)
          )
            return (datapinch.lastdistance = currentdistance);

          const scalerelative = currentdistance / datapinch.lastdistance;
          datapinch.scale *= scalerelative;

          datapinch.lastdistance = currentdistance;

          if (!draggable.getAttribute("data-width")) {
            draggable.setAttribute("data-width", draggable.offsetWidth);
          }

          draggable.style.width = `${Math.max(
            150,
            Math.min(
              parseInt(draggable.getAttribute("data-width")) * datapinch.scale,
              700
            )
          )}px`;
        }
      }
    });
    elementMakeDrag.on("end", ({ e, target }) => {
      if (datamove.allow && ((e.touches && !e.touches.length) || !e.touches)) {
        datamove.allow = false;
      }

      if (datapinch.allow && e.touches && e.touches.length != 2) {
        datapinch.allow = false;
      }

      if (e.touches && e.touches.length) return;

      target.style.pointerEvents = "none";
      $elements.divPreviewContent.style.pointerEvents = "";
    });

    draggable.addEventListener(
      "wheel",
      (e) => {
        e.preventDefault();

        const draggablegetBoundingClientRect =
          draggable.getBoundingClientRect();

        draggable.style.width = `${Math.max(
          150,
          Math.min(draggable.offsetWidth - (e.deltaY > 0 ? 10 : -10), 1000)
        )}px`;

        const draggablegetBoundingClientRect2 =
          draggable.getBoundingClientRect();

        const datasss = calculateNewPosition(
          draggablegetBoundingClientRect.top,
          draggablegetBoundingClientRect.left,
          draggablegetBoundingClientRect.width,
          draggablegetBoundingClientRect.height,
          draggablegetBoundingClientRect2.width,
          draggablegetBoundingClientRect2.height
        );

        draggable.style.left = `${datasss.left}px`;
        draggable.style.top = `${datasss.top}px`;

        draggable.style.right = "initial";
        draggable.style.bottom = "initial";
      },
      { passive: false }
    );

    addEventListener("resize", () => {
      if (draggable.style.left != "" || draggable.style.top != "") {
        draggable.style.top = "";
        draggable.style.left = "";
        draggable.style.right = "20px";
        draggable.style.bottom = "20px";
      }
    });

    elementMakeDrag.start();
  };

  function_pmgnvcdirebja();

  return $element;
};

addEventListener("contextmenu", (e) => {
  e.preventDefault();
});

addEventListener("DOMContentLoaded", () => {
  const useApp = dataApp();
  window.dataApp = useApp;

  document.getElementById("app").append(
    useApp.MyClass.MyElement.create(
      `
      <div class="container">
        <navigate></navigate>
        <element-route class="routes" class="routes"></element-route>
      </div>
      <navigate-bottom></navigate-bottom>
      <footer-player></footer-player>
    `
    ).fragment((fragment) => {
      useApp.MyClass.MyElement.replaceChildren(fragment, {
        navigate: navigate(),
        "navigate-bottom": navigateBottom(),
        "element-route": routes(),
        "footer-player": footerVideoPlayer(),
      });
    })
  );

  // storageObject();
  // theme();

  dispatchEvent(new CustomEvent("hashchange"));
  // dispatchEvent(new CustomEvent("_theme"));
});
